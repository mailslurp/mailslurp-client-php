<?php
/**
 * SentEmailDto
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MailSlurp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MailSlurp\Models;

use \ArrayAccess;
use \MailSlurp\ObjectSerializer;

/**
 * SentEmailDto Class Doc Comment
 *
 * @category Class
 * @description Sent email details
 * @package  MailSlurp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SentEmailDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SentEmailDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'user_id' => 'string',
        'inbox_id' => 'string',
        'domain_id' => 'string',
        'to' => 'string[]',
        'from' => 'string',
        'reply_to' => 'string',
        'cc' => 'string[]',
        'bcc' => 'string[]',
        'attachments' => 'string[]',
        'subject' => 'string',
        'body_md5_hash' => 'string',
        'body' => 'string',
        'to_contacts' => 'string[]',
        'to_group' => 'string',
        'charset' => 'string',
        'is_html' => 'bool',
        'sent_at' => '\DateTime',
        'pixel_ids' => 'string[]',
        'message_id' => 'string',
        'message_ids' => 'string[]',
        'virtual_send' => 'bool',
        'template_id' => 'string',
        'template_variables' => 'array<string,object>',
        'headers' => 'array<string,string>',
        'html' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'user_id' => 'uuid',
        'inbox_id' => 'uuid',
        'domain_id' => 'uuid',
        'to' => null,
        'from' => null,
        'reply_to' => null,
        'cc' => null,
        'bcc' => null,
        'attachments' => null,
        'subject' => null,
        'body_md5_hash' => null,
        'body' => null,
        'to_contacts' => 'uuid',
        'to_group' => 'uuid',
        'charset' => null,
        'is_html' => null,
        'sent_at' => 'date-time',
        'pixel_ids' => 'uuid',
        'message_id' => null,
        'message_ids' => null,
        'virtual_send' => null,
        'template_id' => 'uuid',
        'template_variables' => null,
        'headers' => null,
        'html' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'user_id' => false,
		'inbox_id' => false,
		'domain_id' => true,
		'to' => true,
		'from' => true,
		'reply_to' => true,
		'cc' => true,
		'bcc' => true,
		'attachments' => true,
		'subject' => true,
		'body_md5_hash' => true,
		'body' => true,
		'to_contacts' => true,
		'to_group' => true,
		'charset' => true,
		'is_html' => true,
		'sent_at' => false,
		'pixel_ids' => true,
		'message_id' => true,
		'message_ids' => true,
		'virtual_send' => true,
		'template_id' => true,
		'template_variables' => true,
		'headers' => true,
		'html' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'user_id' => 'userId',
        'inbox_id' => 'inboxId',
        'domain_id' => 'domainId',
        'to' => 'to',
        'from' => 'from',
        'reply_to' => 'replyTo',
        'cc' => 'cc',
        'bcc' => 'bcc',
        'attachments' => 'attachments',
        'subject' => 'subject',
        'body_md5_hash' => 'bodyMD5Hash',
        'body' => 'body',
        'to_contacts' => 'toContacts',
        'to_group' => 'toGroup',
        'charset' => 'charset',
        'is_html' => 'isHTML',
        'sent_at' => 'sentAt',
        'pixel_ids' => 'pixelIds',
        'message_id' => 'messageId',
        'message_ids' => 'messageIds',
        'virtual_send' => 'virtualSend',
        'template_id' => 'templateId',
        'template_variables' => 'templateVariables',
        'headers' => 'headers',
        'html' => 'html'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'user_id' => 'setUserId',
        'inbox_id' => 'setInboxId',
        'domain_id' => 'setDomainId',
        'to' => 'setTo',
        'from' => 'setFrom',
        'reply_to' => 'setReplyTo',
        'cc' => 'setCc',
        'bcc' => 'setBcc',
        'attachments' => 'setAttachments',
        'subject' => 'setSubject',
        'body_md5_hash' => 'setBodyMd5Hash',
        'body' => 'setBody',
        'to_contacts' => 'setToContacts',
        'to_group' => 'setToGroup',
        'charset' => 'setCharset',
        'is_html' => 'setIsHtml',
        'sent_at' => 'setSentAt',
        'pixel_ids' => 'setPixelIds',
        'message_id' => 'setMessageId',
        'message_ids' => 'setMessageIds',
        'virtual_send' => 'setVirtualSend',
        'template_id' => 'setTemplateId',
        'template_variables' => 'setTemplateVariables',
        'headers' => 'setHeaders',
        'html' => 'setHtml'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'user_id' => 'getUserId',
        'inbox_id' => 'getInboxId',
        'domain_id' => 'getDomainId',
        'to' => 'getTo',
        'from' => 'getFrom',
        'reply_to' => 'getReplyTo',
        'cc' => 'getCc',
        'bcc' => 'getBcc',
        'attachments' => 'getAttachments',
        'subject' => 'getSubject',
        'body_md5_hash' => 'getBodyMd5Hash',
        'body' => 'getBody',
        'to_contacts' => 'getToContacts',
        'to_group' => 'getToGroup',
        'charset' => 'getCharset',
        'is_html' => 'getIsHtml',
        'sent_at' => 'getSentAt',
        'pixel_ids' => 'getPixelIds',
        'message_id' => 'getMessageId',
        'message_ids' => 'getMessageIds',
        'virtual_send' => 'getVirtualSend',
        'template_id' => 'getTemplateId',
        'template_variables' => 'getTemplateVariables',
        'headers' => 'getHeaders',
        'html' => 'getHtml'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('user_id', $data ?? [], null);
        $this->setIfExists('inbox_id', $data ?? [], null);
        $this->setIfExists('domain_id', $data ?? [], null);
        $this->setIfExists('to', $data ?? [], null);
        $this->setIfExists('from', $data ?? [], null);
        $this->setIfExists('reply_to', $data ?? [], null);
        $this->setIfExists('cc', $data ?? [], null);
        $this->setIfExists('bcc', $data ?? [], null);
        $this->setIfExists('attachments', $data ?? [], null);
        $this->setIfExists('subject', $data ?? [], null);
        $this->setIfExists('body_md5_hash', $data ?? [], null);
        $this->setIfExists('body', $data ?? [], null);
        $this->setIfExists('to_contacts', $data ?? [], null);
        $this->setIfExists('to_group', $data ?? [], null);
        $this->setIfExists('charset', $data ?? [], null);
        $this->setIfExists('is_html', $data ?? [], null);
        $this->setIfExists('sent_at', $data ?? [], null);
        $this->setIfExists('pixel_ids', $data ?? [], null);
        $this->setIfExists('message_id', $data ?? [], null);
        $this->setIfExists('message_ids', $data ?? [], null);
        $this->setIfExists('virtual_send', $data ?? [], null);
        $this->setIfExists('template_id', $data ?? [], null);
        $this->setIfExists('template_variables', $data ?? [], null);
        $this->setIfExists('headers', $data ?? [], null);
        $this->setIfExists('html', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['user_id'] === null) {
            $invalidProperties[] = "'user_id' can't be null";
        }
        if ($this->container['inbox_id'] === null) {
            $invalidProperties[] = "'inbox_id' can't be null";
        }
        if ($this->container['sent_at'] === null) {
            $invalidProperties[] = "'sent_at' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id ID of sent email
     *
     * @return self
     */
    public function setId($id)
    {

        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return string
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param string $user_id User ID
     *
     * @return self
     */
    public function setUserId($user_id)
    {

        if (is_null($user_id)) {
            throw new \InvalidArgumentException('non-nullable user_id cannot be null');
        }

        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets inbox_id
     *
     * @return string
     */
    public function getInboxId()
    {
        return $this->container['inbox_id'];
    }

    /**
     * Sets inbox_id
     *
     * @param string $inbox_id Inbox ID email was sent from
     *
     * @return self
     */
    public function setInboxId($inbox_id)
    {

        if (is_null($inbox_id)) {
            throw new \InvalidArgumentException('non-nullable inbox_id cannot be null');
        }

        $this->container['inbox_id'] = $inbox_id;

        return $this;
    }

    /**
     * Gets domain_id
     *
     * @return string|null
     */
    public function getDomainId()
    {
        return $this->container['domain_id'];
    }

    /**
     * Sets domain_id
     *
     * @param string|null $domain_id Domain ID
     *
     * @return self
     */
    public function setDomainId($domain_id)
    {

        if (is_null($domain_id)) {
            array_push($this->openAPINullablesSetToNull, 'domain_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('domain_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['domain_id'] = $domain_id;

        return $this;
    }

    /**
     * Gets to
     *
     * @return string[]|null
     */
    public function getTo()
    {
        return $this->container['to'];
    }

    /**
     * Sets to
     *
     * @param string[]|null $to Recipients email was sent to
     *
     * @return self
     */
    public function setTo($to)
    {

        if (is_null($to)) {
            array_push($this->openAPINullablesSetToNull, 'to');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('to', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['to'] = $to;

        return $this;
    }

    /**
     * Gets from
     *
     * @return string|null
     */
    public function getFrom()
    {
        return $this->container['from'];
    }

    /**
     * Sets from
     *
     * @param string|null $from Sent from address
     *
     * @return self
     */
    public function setFrom($from)
    {

        if (is_null($from)) {
            array_push($this->openAPINullablesSetToNull, 'from');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('from', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['from'] = $from;

        return $this;
    }

    /**
     * Gets reply_to
     *
     * @return string|null
     */
    public function getReplyTo()
    {
        return $this->container['reply_to'];
    }

    /**
     * Sets reply_to
     *
     * @param string|null $reply_to reply_to
     *
     * @return self
     */
    public function setReplyTo($reply_to)
    {

        if (is_null($reply_to)) {
            array_push($this->openAPINullablesSetToNull, 'reply_to');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reply_to', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['reply_to'] = $reply_to;

        return $this;
    }

    /**
     * Gets cc
     *
     * @return string[]|null
     */
    public function getCc()
    {
        return $this->container['cc'];
    }

    /**
     * Sets cc
     *
     * @param string[]|null $cc cc
     *
     * @return self
     */
    public function setCc($cc)
    {

        if (is_null($cc)) {
            array_push($this->openAPINullablesSetToNull, 'cc');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cc', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['cc'] = $cc;

        return $this;
    }

    /**
     * Gets bcc
     *
     * @return string[]|null
     */
    public function getBcc()
    {
        return $this->container['bcc'];
    }

    /**
     * Sets bcc
     *
     * @param string[]|null $bcc bcc
     *
     * @return self
     */
    public function setBcc($bcc)
    {

        if (is_null($bcc)) {
            array_push($this->openAPINullablesSetToNull, 'bcc');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bcc', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['bcc'] = $bcc;

        return $this;
    }

    /**
     * Gets attachments
     *
     * @return string[]|null
     */
    public function getAttachments()
    {
        return $this->container['attachments'];
    }

    /**
     * Sets attachments
     *
     * @param string[]|null $attachments Array of IDs of attachments that were sent with this email
     *
     * @return self
     */
    public function setAttachments($attachments)
    {

        if (is_null($attachments)) {
            array_push($this->openAPINullablesSetToNull, 'attachments');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('attachments', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['attachments'] = $attachments;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string|null
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string|null $subject subject
     *
     * @return self
     */
    public function setSubject($subject)
    {

        if (is_null($subject)) {
            array_push($this->openAPINullablesSetToNull, 'subject');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('subject', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets body_md5_hash
     *
     * @return string|null
     */
    public function getBodyMd5Hash()
    {
        return $this->container['body_md5_hash'];
    }

    /**
     * Sets body_md5_hash
     *
     * @param string|null $body_md5_hash MD5 Hash
     *
     * @return self
     */
    public function setBodyMd5Hash($body_md5_hash)
    {

        if (is_null($body_md5_hash)) {
            array_push($this->openAPINullablesSetToNull, 'body_md5_hash');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('body_md5_hash', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['body_md5_hash'] = $body_md5_hash;

        return $this;
    }

    /**
     * Gets body
     *
     * @return string|null
     */
    public function getBody()
    {
        return $this->container['body'];
    }

    /**
     * Sets body
     *
     * @param string|null $body Sent email body
     *
     * @return self
     */
    public function setBody($body)
    {

        if (is_null($body)) {
            array_push($this->openAPINullablesSetToNull, 'body');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('body', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['body'] = $body;

        return $this;
    }

    /**
     * Gets to_contacts
     *
     * @return string[]|null
     */
    public function getToContacts()
    {
        return $this->container['to_contacts'];
    }

    /**
     * Sets to_contacts
     *
     * @param string[]|null $to_contacts to_contacts
     *
     * @return self
     */
    public function setToContacts($to_contacts)
    {

        if (is_null($to_contacts)) {
            array_push($this->openAPINullablesSetToNull, 'to_contacts');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('to_contacts', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['to_contacts'] = $to_contacts;

        return $this;
    }

    /**
     * Gets to_group
     *
     * @return string|null
     */
    public function getToGroup()
    {
        return $this->container['to_group'];
    }

    /**
     * Sets to_group
     *
     * @param string|null $to_group to_group
     *
     * @return self
     */
    public function setToGroup($to_group)
    {

        if (is_null($to_group)) {
            array_push($this->openAPINullablesSetToNull, 'to_group');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('to_group', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['to_group'] = $to_group;

        return $this;
    }

    /**
     * Gets charset
     *
     * @return string|null
     */
    public function getCharset()
    {
        return $this->container['charset'];
    }

    /**
     * Sets charset
     *
     * @param string|null $charset charset
     *
     * @return self
     */
    public function setCharset($charset)
    {

        if (is_null($charset)) {
            array_push($this->openAPINullablesSetToNull, 'charset');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('charset', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['charset'] = $charset;

        return $this;
    }

    /**
     * Gets is_html
     *
     * @return bool|null
     */
    public function getIsHtml()
    {
        return $this->container['is_html'];
    }

    /**
     * Sets is_html
     *
     * @param bool|null $is_html is_html
     *
     * @return self
     */
    public function setIsHtml($is_html)
    {

        if (is_null($is_html)) {
            array_push($this->openAPINullablesSetToNull, 'is_html');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_html', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['is_html'] = $is_html;

        return $this;
    }

    /**
     * Gets sent_at
     *
     * @return \DateTime
     */
    public function getSentAt()
    {
        return $this->container['sent_at'];
    }

    /**
     * Sets sent_at
     *
     * @param \DateTime $sent_at sent_at
     *
     * @return self
     */
    public function setSentAt($sent_at)
    {

        if (is_null($sent_at)) {
            throw new \InvalidArgumentException('non-nullable sent_at cannot be null');
        }

        $this->container['sent_at'] = $sent_at;

        return $this;
    }

    /**
     * Gets pixel_ids
     *
     * @return string[]|null
     */
    public function getPixelIds()
    {
        return $this->container['pixel_ids'];
    }

    /**
     * Sets pixel_ids
     *
     * @param string[]|null $pixel_ids pixel_ids
     *
     * @return self
     */
    public function setPixelIds($pixel_ids)
    {

        if (is_null($pixel_ids)) {
            array_push($this->openAPINullablesSetToNull, 'pixel_ids');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pixel_ids', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['pixel_ids'] = $pixel_ids;

        return $this;
    }

    /**
     * Gets message_id
     *
     * @return string|null
     */
    public function getMessageId()
    {
        return $this->container['message_id'];
    }

    /**
     * Sets message_id
     *
     * @param string|null $message_id message_id
     *
     * @return self
     */
    public function setMessageId($message_id)
    {

        if (is_null($message_id)) {
            array_push($this->openAPINullablesSetToNull, 'message_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('message_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['message_id'] = $message_id;

        return $this;
    }

    /**
     * Gets message_ids
     *
     * @return string[]|null
     */
    public function getMessageIds()
    {
        return $this->container['message_ids'];
    }

    /**
     * Sets message_ids
     *
     * @param string[]|null $message_ids message_ids
     *
     * @return self
     */
    public function setMessageIds($message_ids)
    {

        if (is_null($message_ids)) {
            array_push($this->openAPINullablesSetToNull, 'message_ids');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('message_ids', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['message_ids'] = $message_ids;

        return $this;
    }

    /**
     * Gets virtual_send
     *
     * @return bool|null
     */
    public function getVirtualSend()
    {
        return $this->container['virtual_send'];
    }

    /**
     * Sets virtual_send
     *
     * @param bool|null $virtual_send virtual_send
     *
     * @return self
     */
    public function setVirtualSend($virtual_send)
    {

        if (is_null($virtual_send)) {
            array_push($this->openAPINullablesSetToNull, 'virtual_send');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('virtual_send', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['virtual_send'] = $virtual_send;

        return $this;
    }

    /**
     * Gets template_id
     *
     * @return string|null
     */
    public function getTemplateId()
    {
        return $this->container['template_id'];
    }

    /**
     * Sets template_id
     *
     * @param string|null $template_id template_id
     *
     * @return self
     */
    public function setTemplateId($template_id)
    {

        if (is_null($template_id)) {
            array_push($this->openAPINullablesSetToNull, 'template_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('template_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['template_id'] = $template_id;

        return $this;
    }

    /**
     * Gets template_variables
     *
     * @return array<string,object>|null
     */
    public function getTemplateVariables()
    {
        return $this->container['template_variables'];
    }

    /**
     * Sets template_variables
     *
     * @param array<string,object>|null $template_variables template_variables
     *
     * @return self
     */
    public function setTemplateVariables($template_variables)
    {

        if (is_null($template_variables)) {
            array_push($this->openAPINullablesSetToNull, 'template_variables');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('template_variables', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['template_variables'] = $template_variables;

        return $this;
    }

    /**
     * Gets headers
     *
     * @return array<string,string>|null
     */
    public function getHeaders()
    {
        return $this->container['headers'];
    }

    /**
     * Sets headers
     *
     * @param array<string,string>|null $headers headers
     *
     * @return self
     */
    public function setHeaders($headers)
    {

        if (is_null($headers)) {
            array_push($this->openAPINullablesSetToNull, 'headers');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('headers', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['headers'] = $headers;

        return $this;
    }

    /**
     * Gets html
     *
     * @return bool|null
     */
    public function getHtml()
    {
        return $this->container['html'];
    }

    /**
     * Sets html
     *
     * @param bool|null $html html
     *
     * @return self
     */
    public function setHtml($html)
    {

        if (is_null($html)) {
            throw new \InvalidArgumentException('non-nullable html cannot be null');
        }

        $this->container['html'] = $html;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


