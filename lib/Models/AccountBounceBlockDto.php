<?php
/**
 * AccountBounceBlockDto
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MailSlurp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MailSlurp\Models;

use \ArrayAccess;
use \MailSlurp\ObjectSerializer;

/**
 * AccountBounceBlockDto Class Doc Comment
 *
 * @category Class
 * @package  MailSlurp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AccountBounceBlockDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AccountBounceBlockDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'is_sending_blocked' => 'bool',
        'bounce_count' => 'int',
        'bounce_count_today' => 'int',
        'maximum_daily_bounces' => 'int',
        'maximum_account_bounces' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'is_sending_blocked' => null,
        'bounce_count' => 'int64',
        'bounce_count_today' => 'int64',
        'maximum_daily_bounces' => 'int64',
        'maximum_account_bounces' => 'int64'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'is_sending_blocked' => false,
		'bounce_count' => false,
		'bounce_count_today' => false,
		'maximum_daily_bounces' => false,
		'maximum_account_bounces' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'is_sending_blocked' => 'isSendingBlocked',
        'bounce_count' => 'bounceCount',
        'bounce_count_today' => 'bounceCountToday',
        'maximum_daily_bounces' => 'maximumDailyBounces',
        'maximum_account_bounces' => 'maximumAccountBounces'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'is_sending_blocked' => 'setIsSendingBlocked',
        'bounce_count' => 'setBounceCount',
        'bounce_count_today' => 'setBounceCountToday',
        'maximum_daily_bounces' => 'setMaximumDailyBounces',
        'maximum_account_bounces' => 'setMaximumAccountBounces'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'is_sending_blocked' => 'getIsSendingBlocked',
        'bounce_count' => 'getBounceCount',
        'bounce_count_today' => 'getBounceCountToday',
        'maximum_daily_bounces' => 'getMaximumDailyBounces',
        'maximum_account_bounces' => 'getMaximumAccountBounces'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('is_sending_blocked', $data ?? [], null);
        $this->setIfExists('bounce_count', $data ?? [], null);
        $this->setIfExists('bounce_count_today', $data ?? [], null);
        $this->setIfExists('maximum_daily_bounces', $data ?? [], null);
        $this->setIfExists('maximum_account_bounces', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['is_sending_blocked'] === null) {
            $invalidProperties[] = "'is_sending_blocked' can't be null";
        }
        if ($this->container['bounce_count'] === null) {
            $invalidProperties[] = "'bounce_count' can't be null";
        }
        if ($this->container['bounce_count_today'] === null) {
            $invalidProperties[] = "'bounce_count_today' can't be null";
        }
        if ($this->container['maximum_daily_bounces'] === null) {
            $invalidProperties[] = "'maximum_daily_bounces' can't be null";
        }
        if ($this->container['maximum_account_bounces'] === null) {
            $invalidProperties[] = "'maximum_account_bounces' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets is_sending_blocked
     *
     * @return bool
     */
    public function getIsSendingBlocked()
    {
        return $this->container['is_sending_blocked'];
    }

    /**
     * Sets is_sending_blocked
     *
     * @param bool $is_sending_blocked is_sending_blocked
     *
     * @return self
     */
    public function setIsSendingBlocked($is_sending_blocked)
    {

        if (is_null($is_sending_blocked)) {
            throw new \InvalidArgumentException('non-nullable is_sending_blocked cannot be null');
        }

        $this->container['is_sending_blocked'] = $is_sending_blocked;

        return $this;
    }

    /**
     * Gets bounce_count
     *
     * @return int
     */
    public function getBounceCount()
    {
        return $this->container['bounce_count'];
    }

    /**
     * Sets bounce_count
     *
     * @param int $bounce_count bounce_count
     *
     * @return self
     */
    public function setBounceCount($bounce_count)
    {

        if (is_null($bounce_count)) {
            throw new \InvalidArgumentException('non-nullable bounce_count cannot be null');
        }

        $this->container['bounce_count'] = $bounce_count;

        return $this;
    }

    /**
     * Gets bounce_count_today
     *
     * @return int
     */
    public function getBounceCountToday()
    {
        return $this->container['bounce_count_today'];
    }

    /**
     * Sets bounce_count_today
     *
     * @param int $bounce_count_today bounce_count_today
     *
     * @return self
     */
    public function setBounceCountToday($bounce_count_today)
    {

        if (is_null($bounce_count_today)) {
            throw new \InvalidArgumentException('non-nullable bounce_count_today cannot be null');
        }

        $this->container['bounce_count_today'] = $bounce_count_today;

        return $this;
    }

    /**
     * Gets maximum_daily_bounces
     *
     * @return int
     */
    public function getMaximumDailyBounces()
    {
        return $this->container['maximum_daily_bounces'];
    }

    /**
     * Sets maximum_daily_bounces
     *
     * @param int $maximum_daily_bounces maximum_daily_bounces
     *
     * @return self
     */
    public function setMaximumDailyBounces($maximum_daily_bounces)
    {

        if (is_null($maximum_daily_bounces)) {
            throw new \InvalidArgumentException('non-nullable maximum_daily_bounces cannot be null');
        }

        $this->container['maximum_daily_bounces'] = $maximum_daily_bounces;

        return $this;
    }

    /**
     * Gets maximum_account_bounces
     *
     * @return int
     */
    public function getMaximumAccountBounces()
    {
        return $this->container['maximum_account_bounces'];
    }

    /**
     * Sets maximum_account_bounces
     *
     * @param int $maximum_account_bounces maximum_account_bounces
     *
     * @return self
     */
    public function setMaximumAccountBounces($maximum_account_bounces)
    {

        if (is_null($maximum_account_bounces)) {
            throw new \InvalidArgumentException('non-nullable maximum_account_bounces cannot be null');
        }

        $this->container['maximum_account_bounces'] = $maximum_account_bounces;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


