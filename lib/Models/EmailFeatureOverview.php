<?php
/**
 * EmailFeatureOverview
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MailSlurp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MailSlurp\Models;

use \ArrayAccess;
use \MailSlurp\ObjectSerializer;

/**
 * EmailFeatureOverview Class Doc Comment
 *
 * @category Class
 * @package  MailSlurp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EmailFeatureOverview implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EmailFeatureOverview';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'feature' => 'string',
        'title' => 'string',
        'description' => 'string',
        'category' => 'string',
        'notes' => 'string',
        'notes_numbers' => 'array<string,string>',
        'feature_statistics' => '\MailSlurp\Models\EmailFeatureFamilyStatistics[]',
        'statuses' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'feature' => null,
        'title' => null,
        'description' => null,
        'category' => null,
        'notes' => null,
        'notes_numbers' => null,
        'feature_statistics' => null,
        'statuses' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'feature' => false,
		'title' => false,
		'description' => false,
		'category' => false,
		'notes' => false,
		'notes_numbers' => false,
		'feature_statistics' => false,
		'statuses' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'feature' => 'feature',
        'title' => 'title',
        'description' => 'description',
        'category' => 'category',
        'notes' => 'notes',
        'notes_numbers' => 'notesNumbers',
        'feature_statistics' => 'featureStatistics',
        'statuses' => 'statuses'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'feature' => 'setFeature',
        'title' => 'setTitle',
        'description' => 'setDescription',
        'category' => 'setCategory',
        'notes' => 'setNotes',
        'notes_numbers' => 'setNotesNumbers',
        'feature_statistics' => 'setFeatureStatistics',
        'statuses' => 'setStatuses'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'feature' => 'getFeature',
        'title' => 'getTitle',
        'description' => 'getDescription',
        'category' => 'getCategory',
        'notes' => 'getNotes',
        'notes_numbers' => 'getNotesNumbers',
        'feature_statistics' => 'getFeatureStatistics',
        'statuses' => 'getStatuses'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const FEATURE_AMP = 'amp';
    public const FEATURE_CSS_ACCENT_COLOR = 'css-accent-color';
    public const FEATURE_CSS_ALIGN_ITEMS = 'css-align-items';
    public const FEATURE_CSS_ANIMATION = 'css-animation';
    public const FEATURE_CSS_ASPECT_RATIO = 'css-aspect-ratio';
    public const FEATURE_CSS_AT_FONT_FACE = 'css-at-font-face';
    public const FEATURE_CSS_AT_IMPORT = 'css-at-import';
    public const FEATURE_CSS_AT_KEYFRAMES = 'css-at-keyframes';
    public const FEATURE_CSS_AT_MEDIA = 'css-at-media';
    public const FEATURE_CSS_AT_SUPPORTS = 'css-at-supports';
    public const FEATURE_CSS_BACKGROUND_BLEND_MODE = 'css-background-blend-mode';
    public const FEATURE_CSS_BACKGROUND_CLIP = 'css-background-clip';
    public const FEATURE_CSS_BACKGROUND_COLOR = 'css-background-color';
    public const FEATURE_CSS_BACKGROUND_IMAGE = 'css-background-image';
    public const FEATURE_CSS_BACKGROUND_ORIGIN = 'css-background-origin';
    public const FEATURE_CSS_BACKGROUND_POSITION = 'css-background-position';
    public const FEATURE_CSS_BACKGROUND_REPEAT = 'css-background-repeat';
    public const FEATURE_CSS_BACKGROUND_SIZE = 'css-background-size';
    public const FEATURE_CSS_BACKGROUND = 'css-background';
    public const FEATURE_CSS_BLOCK_INLINE_SIZE = 'css-block-inline-size';
    public const FEATURE_CSS_BORDER_IMAGE = 'css-border-image';
    public const FEATURE_CSS_BORDER_INLINE_BLOCK_INDIVIDUAL = 'css-border-inline-block-individual';
    public const FEATURE_CSS_BORDER_INLINE_BLOCK_LONGHAND = 'css-border-inline-block-longhand';
    public const FEATURE_CSS_BORDER_INLINE_BLOCK = 'css-border-inline-block';
    public const FEATURE_CSS_BORDER_RADIUS_LOGICAL = 'css-border-radius-logical';
    public const FEATURE_CSS_BORDER_RADIUS = 'css-border-radius';
    public const FEATURE_CSS_BORDER = 'css-border';
    public const FEATURE_CSS_BOX_SHADOW = 'css-box-shadow';
    public const FEATURE_CSS_BOX_SIZING = 'css-box-sizing';
    public const FEATURE_CSS_CAPTION_SIDE = 'css-caption-side';
    public const FEATURE_CSS_CLIP_PATH = 'css-clip-path';
    public const FEATURE_CSS_COLUMN_COUNT = 'css-column-count';
    public const FEATURE_CSS_COLUMN_LAYOUT_PROPERTIES = 'css-column-layout-properties';
    public const FEATURE_CSS_DIRECTION = 'css-direction';
    public const FEATURE_CSS_DISPLAY_FLEX = 'css-display-flex';
    public const FEATURE_CSS_DISPLAY_GRID = 'css-display-grid';
    public const FEATURE_CSS_DISPLAY_NONE = 'css-display-none';
    public const FEATURE_CSS_DISPLAY = 'css-display';
    public const FEATURE_CSS_FILTER = 'css-filter';
    public const FEATURE_CSS_FLEX_DIRECTION = 'css-flex-direction';
    public const FEATURE_CSS_FLEX_WRAP = 'css-flex-wrap';
    public const FEATURE_CSS_FLOAT = 'css-float';
    public const FEATURE_CSS_FONT_KERNING = 'css-font-kerning';
    public const FEATURE_CSS_FONT_WEIGHT = 'css-font-weight';
    public const FEATURE_CSS_FONT = 'css-font';
    public const FEATURE_CSS_GAP = 'css-gap';
    public const FEATURE_CSS_GRID_TEMPLATE = 'css-grid-template';
    public const FEATURE_CSS_HEIGHT = 'css-height';
    public const FEATURE_CSS_HYPHENS = 'css-hyphens';
    public const FEATURE_CSS_INLINE_SIZE = 'css-inline-size';
    public const FEATURE_CSS_JUSTIFY_CONTENT = 'css-justify-content';
    public const FEATURE_CSS_LEFT_RIGHT_TOP_BOTTOM = 'css-left-right-top-bottom';
    public const FEATURE_CSS_LETTER_SPACING = 'css-letter-spacing';
    public const FEATURE_CSS_LINE_HEIGHT = 'css-line-height';
    public const FEATURE_CSS_LIST_STYLE_IMAGE = 'css-list-style-image';
    public const FEATURE_CSS_LIST_STYLE_POSITION = 'css-list-style-position';
    public const FEATURE_CSS_LIST_STYLE_TYPE = 'css-list-style-type';
    public const FEATURE_CSS_LIST_STYLE = 'css-list-style';
    public const FEATURE_CSS_MARGIN_BLOCK_START_END = 'css-margin-block-start-end';
    public const FEATURE_CSS_MARGIN_INLINE_BLOCK = 'css-margin-inline-block';
    public const FEATURE_CSS_MARGIN_INLINE_START_END = 'css-margin-inline-start-end';
    public const FEATURE_CSS_MARGIN_INLINE = 'css-margin-inline';
    public const FEATURE_CSS_MARGIN = 'css-margin';
    public const FEATURE_CSS_MAX_BLOCK_SIZE = 'css-max-block-size';
    public const FEATURE_CSS_MAX_HEIGHT = 'css-max-height';
    public const FEATURE_CSS_MAX_WIDTH = 'css-max-width';
    public const FEATURE_CSS_MIN_HEIGHT = 'css-min-height';
    public const FEATURE_CSS_MIN_INLINE_SIZE = 'css-min-inline-size';
    public const FEATURE_CSS_MIN_WIDTH = 'css-min-width';
    public const FEATURE_CSS_MIX_BLEND_MODE = 'css-mix-blend-mode';
    public const FEATURE_CSS_OBJECT_FIT = 'css-object-fit';
    public const FEATURE_CSS_OBJECT_POSITION = 'css-object-position';
    public const FEATURE_CSS_OPACITY = 'css-opacity';
    public const FEATURE_CSS_OUTLINE_OFFSET = 'css-outline-offset';
    public const FEATURE_CSS_OUTLINE = 'css-outline';
    public const FEATURE_CSS_OVERFLOW_WRAP = 'css-overflow-wrap';
    public const FEATURE_CSS_OVERFLOW = 'css-overflow';
    public const FEATURE_CSS_PADDING_BLOCK_START_END = 'css-padding-block-start-end';
    public const FEATURE_CSS_PADDING_INLINE_BLOCK = 'css-padding-inline-block';
    public const FEATURE_CSS_PADDING_INLINE_START_END = 'css-padding-inline-start-end';
    public const FEATURE_CSS_PADDING = 'css-padding';
    public const FEATURE_CSS_POSITION = 'css-position';
    public const FEATURE_CSS_TAB_SIZE = 'css-tab-size';
    public const FEATURE_CSS_TABLE_LAYOUT = 'css-table-layout';
    public const FEATURE_CSS_TEXT_ALIGN_LAST = 'css-text-align-last';
    public const FEATURE_CSS_TEXT_ALIGN = 'css-text-align';
    public const FEATURE_CSS_TEXT_DECORATION_COLOR = 'css-text-decoration-color';
    public const FEATURE_CSS_TEXT_DECORATION_THICKNESS = 'css-text-decoration-thickness';
    public const FEATURE_CSS_TEXT_DECORATION = 'css-text-decoration';
    public const FEATURE_CSS_TEXT_EMPHASIS_POSITION = 'css-text-emphasis-position';
    public const FEATURE_CSS_TEXT_EMPHASIS = 'css-text-emphasis';
    public const FEATURE_CSS_TEXT_INDENT = 'css-text-indent';
    public const FEATURE_CSS_TEXT_OVERFLOW = 'css-text-overflow';
    public const FEATURE_CSS_TEXT_SHADOW = 'css-text-shadow';
    public const FEATURE_CSS_TEXT_TRANSFORM = 'css-text-transform';
    public const FEATURE_CSS_TEXT_UNDERLINE_OFFSET = 'css-text-underline-offset';
    public const FEATURE_CSS_TRANSFORM = 'css-transform';
    public const FEATURE_CSS_VERTICAL_ALIGN = 'css-vertical-align';
    public const FEATURE_CSS_VISIBILITY = 'css-visibility';
    public const FEATURE_CSS_WHITE_SPACE = 'css-white-space';
    public const FEATURE_CSS_WIDTH = 'css-width';
    public const FEATURE_CSS_WORD_BREAK = 'css-word-break';
    public const FEATURE_CSS_WRITING_MODE = 'css-writing-mode';
    public const FEATURE_CSS_Z_INDEX = 'css-z-index';
    public const FEATURE_HTML_ABBR = 'html-abbr';
    public const FEATURE_HTML_ADDRESS = 'html-address';
    public const FEATURE_HTML_ALIGN = 'html-align';
    public const FEATURE_HTML_ANCHOR_LINKS = 'html-anchor-links';
    public const FEATURE_HTML_ARIA_DESCRIBEDBY = 'html-aria-describedby';
    public const FEATURE_HTML_ARIA_HIDDEN = 'html-aria-hidden';
    public const FEATURE_HTML_ARIA_LABEL = 'html-aria-label';
    public const FEATURE_HTML_ARIA_LABELLEDBY = 'html-aria-labelledby';
    public const FEATURE_HTML_ARIA_LIVE = 'html-aria-live';
    public const FEATURE_HTML_AUDIO = 'html-audio';
    public const FEATURE_HTML_BACKGROUND = 'html-background';
    public const FEATURE_HTML_BASE = 'html-base';
    public const FEATURE_HTML_BLOCKQUOTE = 'html-blockquote';
    public const FEATURE_HTML_BODY = 'html-body';
    public const FEATURE_HTML_BUTTON_RESET = 'html-button-reset';
    public const FEATURE_HTML_BUTTON_SUBMIT = 'html-button-submit';
    public const FEATURE_HTML_CODE = 'html-code';
    public const FEATURE_HTML_DEL = 'html-del';
    public const FEATURE_HTML_DFN = 'html-dfn';
    public const FEATURE_HTML_DIALOG = 'html-dialog';
    public const FEATURE_HTML_DIR = 'html-dir';
    public const FEATURE_HTML_DIV = 'html-div';
    public const FEATURE_HTML_DOCTYPE = 'html-doctype';
    public const FEATURE_HTML_FORM = 'html-form';
    public const FEATURE_HTML_H1_H6 = 'html-h1-h6';
    public const FEATURE_HTML_HEIGHT = 'html-height';
    public const FEATURE_HTML_IMAGE_MAPS = 'html-image-maps';
    public const FEATURE_HTML_INPUT_CHECKBOX = 'html-input-checkbox';
    public const FEATURE_HTML_INPUT_HIDDEN = 'html-input-hidden';
    public const FEATURE_HTML_INPUT_RADIO = 'html-input-radio';
    public const FEATURE_HTML_INPUT_RESET = 'html-input-reset';
    public const FEATURE_HTML_INPUT_SUBMIT = 'html-input-submit';
    public const FEATURE_HTML_INPUT_TEXT = 'html-input-text';
    public const FEATURE_HTML_LANG = 'html-lang';
    public const FEATURE_HTML_LINK = 'html-link';
    public const FEATURE_HTML_LISTS = 'html-lists';
    public const FEATURE_HTML_LOADING_ATTRIBUTE = 'html-loading-attribute';
    public const FEATURE_HTML_MAILTO_LINKS = 'html-mailto-links';
    public const FEATURE_HTML_MARQUEE = 'html-marquee';
    public const FEATURE_HTML_METER = 'html-meter';
    public const FEATURE_HTML_OBJECT = 'html-object';
    public const FEATURE_HTML_P = 'html-p';
    public const FEATURE_HTML_PICTURE = 'html-picture';
    public const FEATURE_HTML_PRE = 'html-pre';
    public const FEATURE_HTML_PROGRESS = 'html-progress';
    public const FEATURE_HTML_REQUIRED = 'html-required';
    public const FEATURE_HTML_ROLE = 'html-role';
    public const FEATURE_HTML_RP = 'html-rp';
    public const FEATURE_HTML_RT = 'html-rt';
    public const FEATURE_HTML_RUBY = 'html-ruby';
    public const FEATURE_HTML_SELECT = 'html-select';
    public const FEATURE_HTML_SEMANTICS = 'html-semantics';
    public const FEATURE_HTML_SMALL = 'html-small';
    public const FEATURE_HTML_SPAN = 'html-span';
    public const FEATURE_HTML_SRCSET = 'html-srcset';
    public const FEATURE_HTML_STRIKE = 'html-strike';
    public const FEATURE_HTML_STRONG = 'html-strong';
    public const FEATURE_HTML_STYLE = 'html-style';
    public const FEATURE_HTML_SVG = 'html-svg';
    public const FEATURE_HTML_TABLE = 'html-table';
    public const FEATURE_HTML_TARGET = 'html-target';
    public const FEATURE_HTML_TEXTAREA = 'html-textarea';
    public const FEATURE_HTML_VALIGN = 'html-valign';
    public const FEATURE_HTML_VIDEO = 'html-video';
    public const FEATURE_HTML_WBR = 'html-wbr';
    public const FEATURE_HTML_WIDTH = 'html-width';
    public const FEATURE_IMAGE_AVIF = 'image-avif';
    public const FEATURE_IMAGE_BASE64 = 'image-base64';
    public const FEATURE_IMAGE_BMP = 'image-bmp';
    public const FEATURE_IMAGE_GIF = 'image-gif';
    public const FEATURE_IMAGE_ICO = 'image-ico';
    public const FEATURE_IMAGE_JPG = 'image-jpg';
    public const FEATURE_IMAGE_PNG = 'image-png';
    public const FEATURE_IMAGE_SVG = 'image-svg';
    public const FEATURE_IMAGE_WEBP = 'image-webp';
    public const FEATURE_UNSUPPORTED = 'unsupported';
    public const CATEGORY_CSS = 'css';
    public const CATEGORY_HTML = 'html';
    public const CATEGORY_IMAGE = 'image';
    public const CATEGORY_OTHERS = 'others';
    public const STATUSES_SUPPORTED = 'SUPPORTED';
    public const STATUSES_PARTIAL = 'PARTIAL';
    public const STATUSES_NOT_SUPPORTED = 'NOT_SUPPORTED';
    public const STATUSES_UNKNOWN = 'UNKNOWN';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFeatureAllowableValues()
    {
        return [
            self::FEATURE_AMP,
            self::FEATURE_CSS_ACCENT_COLOR,
            self::FEATURE_CSS_ALIGN_ITEMS,
            self::FEATURE_CSS_ANIMATION,
            self::FEATURE_CSS_ASPECT_RATIO,
            self::FEATURE_CSS_AT_FONT_FACE,
            self::FEATURE_CSS_AT_IMPORT,
            self::FEATURE_CSS_AT_KEYFRAMES,
            self::FEATURE_CSS_AT_MEDIA,
            self::FEATURE_CSS_AT_SUPPORTS,
            self::FEATURE_CSS_BACKGROUND_BLEND_MODE,
            self::FEATURE_CSS_BACKGROUND_CLIP,
            self::FEATURE_CSS_BACKGROUND_COLOR,
            self::FEATURE_CSS_BACKGROUND_IMAGE,
            self::FEATURE_CSS_BACKGROUND_ORIGIN,
            self::FEATURE_CSS_BACKGROUND_POSITION,
            self::FEATURE_CSS_BACKGROUND_REPEAT,
            self::FEATURE_CSS_BACKGROUND_SIZE,
            self::FEATURE_CSS_BACKGROUND,
            self::FEATURE_CSS_BLOCK_INLINE_SIZE,
            self::FEATURE_CSS_BORDER_IMAGE,
            self::FEATURE_CSS_BORDER_INLINE_BLOCK_INDIVIDUAL,
            self::FEATURE_CSS_BORDER_INLINE_BLOCK_LONGHAND,
            self::FEATURE_CSS_BORDER_INLINE_BLOCK,
            self::FEATURE_CSS_BORDER_RADIUS_LOGICAL,
            self::FEATURE_CSS_BORDER_RADIUS,
            self::FEATURE_CSS_BORDER,
            self::FEATURE_CSS_BOX_SHADOW,
            self::FEATURE_CSS_BOX_SIZING,
            self::FEATURE_CSS_CAPTION_SIDE,
            self::FEATURE_CSS_CLIP_PATH,
            self::FEATURE_CSS_COLUMN_COUNT,
            self::FEATURE_CSS_COLUMN_LAYOUT_PROPERTIES,
            self::FEATURE_CSS_DIRECTION,
            self::FEATURE_CSS_DISPLAY_FLEX,
            self::FEATURE_CSS_DISPLAY_GRID,
            self::FEATURE_CSS_DISPLAY_NONE,
            self::FEATURE_CSS_DISPLAY,
            self::FEATURE_CSS_FILTER,
            self::FEATURE_CSS_FLEX_DIRECTION,
            self::FEATURE_CSS_FLEX_WRAP,
            self::FEATURE_CSS_FLOAT,
            self::FEATURE_CSS_FONT_KERNING,
            self::FEATURE_CSS_FONT_WEIGHT,
            self::FEATURE_CSS_FONT,
            self::FEATURE_CSS_GAP,
            self::FEATURE_CSS_GRID_TEMPLATE,
            self::FEATURE_CSS_HEIGHT,
            self::FEATURE_CSS_HYPHENS,
            self::FEATURE_CSS_INLINE_SIZE,
            self::FEATURE_CSS_JUSTIFY_CONTENT,
            self::FEATURE_CSS_LEFT_RIGHT_TOP_BOTTOM,
            self::FEATURE_CSS_LETTER_SPACING,
            self::FEATURE_CSS_LINE_HEIGHT,
            self::FEATURE_CSS_LIST_STYLE_IMAGE,
            self::FEATURE_CSS_LIST_STYLE_POSITION,
            self::FEATURE_CSS_LIST_STYLE_TYPE,
            self::FEATURE_CSS_LIST_STYLE,
            self::FEATURE_CSS_MARGIN_BLOCK_START_END,
            self::FEATURE_CSS_MARGIN_INLINE_BLOCK,
            self::FEATURE_CSS_MARGIN_INLINE_START_END,
            self::FEATURE_CSS_MARGIN_INLINE,
            self::FEATURE_CSS_MARGIN,
            self::FEATURE_CSS_MAX_BLOCK_SIZE,
            self::FEATURE_CSS_MAX_HEIGHT,
            self::FEATURE_CSS_MAX_WIDTH,
            self::FEATURE_CSS_MIN_HEIGHT,
            self::FEATURE_CSS_MIN_INLINE_SIZE,
            self::FEATURE_CSS_MIN_WIDTH,
            self::FEATURE_CSS_MIX_BLEND_MODE,
            self::FEATURE_CSS_OBJECT_FIT,
            self::FEATURE_CSS_OBJECT_POSITION,
            self::FEATURE_CSS_OPACITY,
            self::FEATURE_CSS_OUTLINE_OFFSET,
            self::FEATURE_CSS_OUTLINE,
            self::FEATURE_CSS_OVERFLOW_WRAP,
            self::FEATURE_CSS_OVERFLOW,
            self::FEATURE_CSS_PADDING_BLOCK_START_END,
            self::FEATURE_CSS_PADDING_INLINE_BLOCK,
            self::FEATURE_CSS_PADDING_INLINE_START_END,
            self::FEATURE_CSS_PADDING,
            self::FEATURE_CSS_POSITION,
            self::FEATURE_CSS_TAB_SIZE,
            self::FEATURE_CSS_TABLE_LAYOUT,
            self::FEATURE_CSS_TEXT_ALIGN_LAST,
            self::FEATURE_CSS_TEXT_ALIGN,
            self::FEATURE_CSS_TEXT_DECORATION_COLOR,
            self::FEATURE_CSS_TEXT_DECORATION_THICKNESS,
            self::FEATURE_CSS_TEXT_DECORATION,
            self::FEATURE_CSS_TEXT_EMPHASIS_POSITION,
            self::FEATURE_CSS_TEXT_EMPHASIS,
            self::FEATURE_CSS_TEXT_INDENT,
            self::FEATURE_CSS_TEXT_OVERFLOW,
            self::FEATURE_CSS_TEXT_SHADOW,
            self::FEATURE_CSS_TEXT_TRANSFORM,
            self::FEATURE_CSS_TEXT_UNDERLINE_OFFSET,
            self::FEATURE_CSS_TRANSFORM,
            self::FEATURE_CSS_VERTICAL_ALIGN,
            self::FEATURE_CSS_VISIBILITY,
            self::FEATURE_CSS_WHITE_SPACE,
            self::FEATURE_CSS_WIDTH,
            self::FEATURE_CSS_WORD_BREAK,
            self::FEATURE_CSS_WRITING_MODE,
            self::FEATURE_CSS_Z_INDEX,
            self::FEATURE_HTML_ABBR,
            self::FEATURE_HTML_ADDRESS,
            self::FEATURE_HTML_ALIGN,
            self::FEATURE_HTML_ANCHOR_LINKS,
            self::FEATURE_HTML_ARIA_DESCRIBEDBY,
            self::FEATURE_HTML_ARIA_HIDDEN,
            self::FEATURE_HTML_ARIA_LABEL,
            self::FEATURE_HTML_ARIA_LABELLEDBY,
            self::FEATURE_HTML_ARIA_LIVE,
            self::FEATURE_HTML_AUDIO,
            self::FEATURE_HTML_BACKGROUND,
            self::FEATURE_HTML_BASE,
            self::FEATURE_HTML_BLOCKQUOTE,
            self::FEATURE_HTML_BODY,
            self::FEATURE_HTML_BUTTON_RESET,
            self::FEATURE_HTML_BUTTON_SUBMIT,
            self::FEATURE_HTML_CODE,
            self::FEATURE_HTML_DEL,
            self::FEATURE_HTML_DFN,
            self::FEATURE_HTML_DIALOG,
            self::FEATURE_HTML_DIR,
            self::FEATURE_HTML_DIV,
            self::FEATURE_HTML_DOCTYPE,
            self::FEATURE_HTML_FORM,
            self::FEATURE_HTML_H1_H6,
            self::FEATURE_HTML_HEIGHT,
            self::FEATURE_HTML_IMAGE_MAPS,
            self::FEATURE_HTML_INPUT_CHECKBOX,
            self::FEATURE_HTML_INPUT_HIDDEN,
            self::FEATURE_HTML_INPUT_RADIO,
            self::FEATURE_HTML_INPUT_RESET,
            self::FEATURE_HTML_INPUT_SUBMIT,
            self::FEATURE_HTML_INPUT_TEXT,
            self::FEATURE_HTML_LANG,
            self::FEATURE_HTML_LINK,
            self::FEATURE_HTML_LISTS,
            self::FEATURE_HTML_LOADING_ATTRIBUTE,
            self::FEATURE_HTML_MAILTO_LINKS,
            self::FEATURE_HTML_MARQUEE,
            self::FEATURE_HTML_METER,
            self::FEATURE_HTML_OBJECT,
            self::FEATURE_HTML_P,
            self::FEATURE_HTML_PICTURE,
            self::FEATURE_HTML_PRE,
            self::FEATURE_HTML_PROGRESS,
            self::FEATURE_HTML_REQUIRED,
            self::FEATURE_HTML_ROLE,
            self::FEATURE_HTML_RP,
            self::FEATURE_HTML_RT,
            self::FEATURE_HTML_RUBY,
            self::FEATURE_HTML_SELECT,
            self::FEATURE_HTML_SEMANTICS,
            self::FEATURE_HTML_SMALL,
            self::FEATURE_HTML_SPAN,
            self::FEATURE_HTML_SRCSET,
            self::FEATURE_HTML_STRIKE,
            self::FEATURE_HTML_STRONG,
            self::FEATURE_HTML_STYLE,
            self::FEATURE_HTML_SVG,
            self::FEATURE_HTML_TABLE,
            self::FEATURE_HTML_TARGET,
            self::FEATURE_HTML_TEXTAREA,
            self::FEATURE_HTML_VALIGN,
            self::FEATURE_HTML_VIDEO,
            self::FEATURE_HTML_WBR,
            self::FEATURE_HTML_WIDTH,
            self::FEATURE_IMAGE_AVIF,
            self::FEATURE_IMAGE_BASE64,
            self::FEATURE_IMAGE_BMP,
            self::FEATURE_IMAGE_GIF,
            self::FEATURE_IMAGE_ICO,
            self::FEATURE_IMAGE_JPG,
            self::FEATURE_IMAGE_PNG,
            self::FEATURE_IMAGE_SVG,
            self::FEATURE_IMAGE_WEBP,
            self::FEATURE_UNSUPPORTED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCategoryAllowableValues()
    {
        return [
            self::CATEGORY_CSS,
            self::CATEGORY_HTML,
            self::CATEGORY_IMAGE,
            self::CATEGORY_OTHERS,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusesAllowableValues()
    {
        return [
            self::STATUSES_SUPPORTED,
            self::STATUSES_PARTIAL,
            self::STATUSES_NOT_SUPPORTED,
            self::STATUSES_UNKNOWN,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('feature', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('category', $data ?? [], null);
        $this->setIfExists('notes', $data ?? [], null);
        $this->setIfExists('notes_numbers', $data ?? [], null);
        $this->setIfExists('feature_statistics', $data ?? [], null);
        $this->setIfExists('statuses', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['feature'] === null) {
            $invalidProperties[] = "'feature' can't be null";
        }
        $allowedValues = $this->getFeatureAllowableValues();
        if (!is_null($this->container['feature']) && !in_array($this->container['feature'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'feature', must be one of '%s'",
                $this->container['feature'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCategoryAllowableValues();
        if (!is_null($this->container['category']) && !in_array($this->container['category'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'category', must be one of '%s'",
                $this->container['category'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['statuses'] === null) {
            $invalidProperties[] = "'statuses' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets feature
     *
     * @return string
     */
    public function getFeature()
    {
        return $this->container['feature'];
    }

    /**
     * Sets feature
     *
     * @param string $feature feature
     *
     * @return self
     */
    public function setFeature($feature)
    {
        $allowedValues = $this->getFeatureAllowableValues();
        if (!in_array($feature, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'feature', must be one of '%s'",
                    $feature,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($feature)) {
            throw new \InvalidArgumentException('non-nullable feature cannot be null');
        }

        $this->container['feature'] = $feature;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title title
     *
     * @return self
     */
    public function setTitle($title)
    {

        if (is_null($title)) {
            throw new \InvalidArgumentException('non-nullable title cannot be null');
        }

        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {

        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string|null
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string|null $category category
     *
     * @return self
     */
    public function setCategory($category)
    {
        $allowedValues = $this->getCategoryAllowableValues();
        if (!is_null($category) && !in_array($category, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'category', must be one of '%s'",
                    $category,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($category)) {
            throw new \InvalidArgumentException('non-nullable category cannot be null');
        }

        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string|null
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string|null $notes notes
     *
     * @return self
     */
    public function setNotes($notes)
    {

        if (is_null($notes)) {
            throw new \InvalidArgumentException('non-nullable notes cannot be null');
        }

        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets notes_numbers
     *
     * @return array<string,string>|null
     */
    public function getNotesNumbers()
    {
        return $this->container['notes_numbers'];
    }

    /**
     * Sets notes_numbers
     *
     * @param array<string,string>|null $notes_numbers notes_numbers
     *
     * @return self
     */
    public function setNotesNumbers($notes_numbers)
    {

        if (is_null($notes_numbers)) {
            throw new \InvalidArgumentException('non-nullable notes_numbers cannot be null');
        }

        $this->container['notes_numbers'] = $notes_numbers;

        return $this;
    }

    /**
     * Gets feature_statistics
     *
     * @return \MailSlurp\Models\EmailFeatureFamilyStatistics[]|null
     */
    public function getFeatureStatistics()
    {
        return $this->container['feature_statistics'];
    }

    /**
     * Sets feature_statistics
     *
     * @param \MailSlurp\Models\EmailFeatureFamilyStatistics[]|null $feature_statistics feature_statistics
     *
     * @return self
     */
    public function setFeatureStatistics($feature_statistics)
    {

        if (is_null($feature_statistics)) {
            throw new \InvalidArgumentException('non-nullable feature_statistics cannot be null');
        }

        $this->container['feature_statistics'] = $feature_statistics;

        return $this;
    }

    /**
     * Gets statuses
     *
     * @return string[]
     */
    public function getStatuses()
    {
        return $this->container['statuses'];
    }

    /**
     * Sets statuses
     *
     * @param string[] $statuses statuses
     *
     * @return self
     */
    public function setStatuses($statuses)
    {
        $allowedValues = $this->getStatusesAllowableValues();
        if (array_diff($statuses, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'statuses', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }



        if (is_null($statuses)) {
            throw new \InvalidArgumentException('non-nullable statuses cannot be null');
        }

        $this->container['statuses'] = $statuses;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


