<?php
/**
 * InboxPreview
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MailSlurp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MailSlurp\Models;

use \ArrayAccess;
use \MailSlurp\ObjectSerializer;

/**
 * InboxPreview Class Doc Comment
 *
 * @category Class
 * @description Inbox data preview element.
 * @package  MailSlurp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class InboxPreview implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'InboxPreview';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'domain_id' => 'string',
        'email_address' => 'string',
        'created_at' => '\DateTime',
        'favourite' => 'bool',
        'name' => 'string',
        'tags' => 'string[]',
        'team_access' => 'bool',
        'inbox_type' => 'string',
        'virtual_inbox' => 'bool',
        'expires_at' => 'string',
        'functions_as' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'domain_id' => 'uuid',
        'email_address' => null,
        'created_at' => 'date-time',
        'favourite' => null,
        'name' => null,
        'tags' => null,
        'team_access' => null,
        'inbox_type' => null,
        'virtual_inbox' => null,
        'expires_at' => null,
        'functions_as' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'domain_id' => true,
		'email_address' => true,
		'created_at' => false,
		'favourite' => false,
		'name' => true,
		'tags' => true,
		'team_access' => false,
		'inbox_type' => true,
		'virtual_inbox' => false,
		'expires_at' => true,
		'functions_as' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'domain_id' => 'domainId',
        'email_address' => 'emailAddress',
        'created_at' => 'createdAt',
        'favourite' => 'favourite',
        'name' => 'name',
        'tags' => 'tags',
        'team_access' => 'teamAccess',
        'inbox_type' => 'inboxType',
        'virtual_inbox' => 'virtualInbox',
        'expires_at' => 'expiresAt',
        'functions_as' => 'functionsAs'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'domain_id' => 'setDomainId',
        'email_address' => 'setEmailAddress',
        'created_at' => 'setCreatedAt',
        'favourite' => 'setFavourite',
        'name' => 'setName',
        'tags' => 'setTags',
        'team_access' => 'setTeamAccess',
        'inbox_type' => 'setInboxType',
        'virtual_inbox' => 'setVirtualInbox',
        'expires_at' => 'setExpiresAt',
        'functions_as' => 'setFunctionsAs'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'domain_id' => 'getDomainId',
        'email_address' => 'getEmailAddress',
        'created_at' => 'getCreatedAt',
        'favourite' => 'getFavourite',
        'name' => 'getName',
        'tags' => 'getTags',
        'team_access' => 'getTeamAccess',
        'inbox_type' => 'getInboxType',
        'virtual_inbox' => 'getVirtualInbox',
        'expires_at' => 'getExpiresAt',
        'functions_as' => 'getFunctionsAs'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const INBOX_TYPE_HTTP_INBOX = 'HTTP_INBOX';
    public const INBOX_TYPE_SMTP_INBOX = 'SMTP_INBOX';
    public const FUNCTIONS_AS_ALIAS = 'ALIAS';
    public const FUNCTIONS_AS_THREAD = 'THREAD';
    public const FUNCTIONS_AS_CATCH_ALL = 'CATCH_ALL';
    public const FUNCTIONS_AS_CONNECTOR = 'CONNECTOR';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInboxTypeAllowableValues()
    {
        return [
            self::INBOX_TYPE_HTTP_INBOX,
            self::INBOX_TYPE_SMTP_INBOX,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFunctionsAsAllowableValues()
    {
        return [
            self::FUNCTIONS_AS_ALIAS,
            self::FUNCTIONS_AS_THREAD,
            self::FUNCTIONS_AS_CATCH_ALL,
            self::FUNCTIONS_AS_CONNECTOR,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('domain_id', $data ?? [], null);
        $this->setIfExists('email_address', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('favourite', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('tags', $data ?? [], null);
        $this->setIfExists('team_access', $data ?? [], null);
        $this->setIfExists('inbox_type', $data ?? [], null);
        $this->setIfExists('virtual_inbox', $data ?? [], null);
        $this->setIfExists('expires_at', $data ?? [], null);
        $this->setIfExists('functions_as', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['favourite'] === null) {
            $invalidProperties[] = "'favourite' can't be null";
        }
        if ($this->container['team_access'] === null) {
            $invalidProperties[] = "'team_access' can't be null";
        }
        $allowedValues = $this->getInboxTypeAllowableValues();
        if (!is_null($this->container['inbox_type']) && !in_array($this->container['inbox_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'inbox_type', must be one of '%s'",
                $this->container['inbox_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['virtual_inbox'] === null) {
            $invalidProperties[] = "'virtual_inbox' can't be null";
        }
        $allowedValues = $this->getFunctionsAsAllowableValues();
        if (!is_null($this->container['functions_as']) && !in_array($this->container['functions_as'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'functions_as', must be one of '%s'",
                $this->container['functions_as'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id ID of the inbox. The ID is a UUID-V4 format string. Use the inboxId for calls to Inbox and Email Controller endpoints. See the emailAddress property for the email address or the inbox. To get emails in an inbox use the WaitFor and Inbox Controller methods `waitForLatestEmail` and `getEmails` methods respectively. Inboxes can be used with aliases to forward emails automatically.
     *
     * @return self
     */
    public function setId($id)
    {

        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets domain_id
     *
     * @return string|null
     */
    public function getDomainId()
    {
        return $this->container['domain_id'];
    }

    /**
     * Sets domain_id
     *
     * @param string|null $domain_id ID of custom domain used by the inbox if any
     *
     * @return self
     */
    public function setDomainId($domain_id)
    {

        if (is_null($domain_id)) {
            array_push($this->openAPINullablesSetToNull, 'domain_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('domain_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['domain_id'] = $domain_id;

        return $this;
    }

    /**
     * Gets email_address
     *
     * @return string|null
     */
    public function getEmailAddress()
    {
        return $this->container['email_address'];
    }

    /**
     * Sets email_address
     *
     * @param string|null $email_address The inbox's email address. Inbox projections and previews may not include the email address. To view the email address fetch the inbox entity directly. Send an email to this address and the inbox will receive and store it for you. Note the email address in MailSlurp match characters exactly and are case sensitive so `+123` additions are considered different addresses. To retrieve the email use the Inbox and Email Controller endpoints with the inbox ID.
     *
     * @return self
     */
    public function setEmailAddress($email_address)
    {

        if (is_null($email_address)) {
            array_push($this->openAPINullablesSetToNull, 'email_address');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('email_address', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['email_address'] = $email_address;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at When the inbox was created. Time stamps are in ISO DateTime Format `yyyy-MM-dd'T'HH:mm:ss.SSSXXX` e.g. `2000-10-31T01:30:00.000-05:00`.
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {

        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }

        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets favourite
     *
     * @return bool
     */
    public function getFavourite()
    {
        return $this->container['favourite'];
    }

    /**
     * Sets favourite
     *
     * @param bool $favourite Is the inbox a favorite inbox. Make an inbox a favorite is typically done in the dashboard for quick access or filtering
     *
     * @return self
     */
    public function setFavourite($favourite)
    {

        if (is_null($favourite)) {
            throw new \InvalidArgumentException('non-nullable favourite cannot be null');
        }

        $this->container['favourite'] = $favourite;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Name of the inbox and used as the sender name when sending emails .Displayed in the dashboard for easier search
     *
     * @return self
     */
    public function setName($name)
    {

        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[]|null $tags Tags that inbox has been tagged with. Tags can be added to inboxes to group different inboxes within an account. You can also search for inboxes by tag in the dashboard UI.
     *
     * @return self
     */
    public function setTags($tags)
    {

        if (is_null($tags)) {
            array_push($this->openAPINullablesSetToNull, 'tags');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tags', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets team_access
     *
     * @return bool
     */
    public function getTeamAccess()
    {
        return $this->container['team_access'];
    }

    /**
     * Sets team_access
     *
     * @param bool $team_access Does inbox permit team access for organization team members. If so team users can use inbox and emails associated with it. See the team access guide at https://www.mailslurp.com/guides/team-email-account-sharing/
     *
     * @return self
     */
    public function setTeamAccess($team_access)
    {

        if (is_null($team_access)) {
            throw new \InvalidArgumentException('non-nullable team_access cannot be null');
        }

        $this->container['team_access'] = $team_access;

        return $this;
    }

    /**
     * Gets inbox_type
     *
     * @return string|null
     */
    public function getInboxType()
    {
        return $this->container['inbox_type'];
    }

    /**
     * Sets inbox_type
     *
     * @param string|null $inbox_type Type of inbox. HTTP inboxes are faster and better for most cases. SMTP inboxes are more suited for public facing inbound messages (but cannot send).
     *
     * @return self
     */
    public function setInboxType($inbox_type)
    {
        $allowedValues = $this->getInboxTypeAllowableValues();
        if (!is_null($inbox_type) && !in_array($inbox_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'inbox_type', must be one of '%s'",
                    $inbox_type,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($inbox_type)) {
            array_push($this->openAPINullablesSetToNull, 'inbox_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('inbox_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['inbox_type'] = $inbox_type;

        return $this;
    }

    /**
     * Gets virtual_inbox
     *
     * @return bool
     */
    public function getVirtualInbox()
    {
        return $this->container['virtual_inbox'];
    }

    /**
     * Sets virtual_inbox
     *
     * @param bool $virtual_inbox Virtual inbox can receive email but will not send emails to real recipients. Will save sent email record but never send an actual email. Perfect for testing mail server actions.
     *
     * @return self
     */
    public function setVirtualInbox($virtual_inbox)
    {

        if (is_null($virtual_inbox)) {
            throw new \InvalidArgumentException('non-nullable virtual_inbox cannot be null');
        }

        $this->container['virtual_inbox'] = $virtual_inbox;

        return $this;
    }

    /**
     * Gets expires_at
     *
     * @return string|null
     */
    public function getExpiresAt()
    {
        return $this->container['expires_at'];
    }

    /**
     * Sets expires_at
     *
     * @param string|null $expires_at Inbox expiration time. When, if ever, the inbox should expire and be deleted. If null then this inbox is permanent and the emails in it won't be deleted. This is the default behavior unless expiration date is set. If an expiration date is set and the time is reached MailSlurp will expire the inbox and move it to an expired inbox entity. You can still access the emails belonging to it but it can no longer send or receive email.
     *
     * @return self
     */
    public function setExpiresAt($expires_at)
    {

        if (is_null($expires_at)) {
            array_push($this->openAPINullablesSetToNull, 'expires_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('expires_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['expires_at'] = $expires_at;

        return $this;
    }

    /**
     * Gets functions_as
     *
     * @return string|null
     */
    public function getFunctionsAs()
    {
        return $this->container['functions_as'];
    }

    /**
     * Sets functions_as
     *
     * @param string|null $functions_as Inbox function if used as a primitive for another system.
     *
     * @return self
     */
    public function setFunctionsAs($functions_as)
    {
        $allowedValues = $this->getFunctionsAsAllowableValues();
        if (!is_null($functions_as) && !in_array($functions_as, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'functions_as', must be one of '%s'",
                    $functions_as,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($functions_as)) {
            array_push($this->openAPINullablesSetToNull, 'functions_as');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('functions_as', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['functions_as'] = $functions_as;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


