<?php
/**
 * ConnectorImapConnectionDto
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MailSlurp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MailSlurp\Models;

use \ArrayAccess;
use \MailSlurp\ObjectSerializer;

/**
 * ConnectorImapConnectionDto Class Doc Comment
 *
 * @category Class
 * @package  MailSlurp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ConnectorImapConnectionDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ConnectorImapConnectionDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'connector_id' => 'string',
        'imap_host' => 'string',
        'imap_port' => 'int',
        'imap_username' => 'string',
        'imap_password' => 'string',
        'imap_ssl' => 'bool',
        'select_folder' => 'string',
        'search_terms' => 'string',
        'start_tls' => 'bool',
        'proxy_host' => 'string',
        'proxy_port' => 'int',
        'proxy_enabled' => 'bool',
        'local_host_name' => 'string',
        'mechanisms' => 'string[]',
        'ssl_protocols' => 'string[]',
        'ssl_trust' => 'string',
        'enabled' => 'bool',
        'created_at' => '\DateTime',
        'id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'connector_id' => 'uuid',
        'imap_host' => null,
        'imap_port' => 'int32',
        'imap_username' => null,
        'imap_password' => null,
        'imap_ssl' => null,
        'select_folder' => null,
        'search_terms' => null,
        'start_tls' => null,
        'proxy_host' => null,
        'proxy_port' => 'int32',
        'proxy_enabled' => null,
        'local_host_name' => null,
        'mechanisms' => null,
        'ssl_protocols' => null,
        'ssl_trust' => null,
        'enabled' => null,
        'created_at' => 'date-time',
        'id' => 'uuid'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'connector_id' => false,
		'imap_host' => false,
		'imap_port' => false,
		'imap_username' => false,
		'imap_password' => false,
		'imap_ssl' => false,
		'select_folder' => false,
		'search_terms' => false,
		'start_tls' => false,
		'proxy_host' => false,
		'proxy_port' => false,
		'proxy_enabled' => false,
		'local_host_name' => false,
		'mechanisms' => false,
		'ssl_protocols' => false,
		'ssl_trust' => false,
		'enabled' => false,
		'created_at' => false,
		'id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'connector_id' => 'connectorId',
        'imap_host' => 'imapHost',
        'imap_port' => 'imapPort',
        'imap_username' => 'imapUsername',
        'imap_password' => 'imapPassword',
        'imap_ssl' => 'imapSsl',
        'select_folder' => 'selectFolder',
        'search_terms' => 'searchTerms',
        'start_tls' => 'startTls',
        'proxy_host' => 'proxyHost',
        'proxy_port' => 'proxyPort',
        'proxy_enabled' => 'proxyEnabled',
        'local_host_name' => 'localHostName',
        'mechanisms' => 'mechanisms',
        'ssl_protocols' => 'sslProtocols',
        'ssl_trust' => 'sslTrust',
        'enabled' => 'enabled',
        'created_at' => 'createdAt',
        'id' => 'id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'connector_id' => 'setConnectorId',
        'imap_host' => 'setImapHost',
        'imap_port' => 'setImapPort',
        'imap_username' => 'setImapUsername',
        'imap_password' => 'setImapPassword',
        'imap_ssl' => 'setImapSsl',
        'select_folder' => 'setSelectFolder',
        'search_terms' => 'setSearchTerms',
        'start_tls' => 'setStartTls',
        'proxy_host' => 'setProxyHost',
        'proxy_port' => 'setProxyPort',
        'proxy_enabled' => 'setProxyEnabled',
        'local_host_name' => 'setLocalHostName',
        'mechanisms' => 'setMechanisms',
        'ssl_protocols' => 'setSslProtocols',
        'ssl_trust' => 'setSslTrust',
        'enabled' => 'setEnabled',
        'created_at' => 'setCreatedAt',
        'id' => 'setId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'connector_id' => 'getConnectorId',
        'imap_host' => 'getImapHost',
        'imap_port' => 'getImapPort',
        'imap_username' => 'getImapUsername',
        'imap_password' => 'getImapPassword',
        'imap_ssl' => 'getImapSsl',
        'select_folder' => 'getSelectFolder',
        'search_terms' => 'getSearchTerms',
        'start_tls' => 'getStartTls',
        'proxy_host' => 'getProxyHost',
        'proxy_port' => 'getProxyPort',
        'proxy_enabled' => 'getProxyEnabled',
        'local_host_name' => 'getLocalHostName',
        'mechanisms' => 'getMechanisms',
        'ssl_protocols' => 'getSslProtocols',
        'ssl_trust' => 'getSslTrust',
        'enabled' => 'getEnabled',
        'created_at' => 'getCreatedAt',
        'id' => 'getId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('connector_id', $data ?? [], null);
        $this->setIfExists('imap_host', $data ?? [], null);
        $this->setIfExists('imap_port', $data ?? [], null);
        $this->setIfExists('imap_username', $data ?? [], null);
        $this->setIfExists('imap_password', $data ?? [], null);
        $this->setIfExists('imap_ssl', $data ?? [], null);
        $this->setIfExists('select_folder', $data ?? [], null);
        $this->setIfExists('search_terms', $data ?? [], null);
        $this->setIfExists('start_tls', $data ?? [], null);
        $this->setIfExists('proxy_host', $data ?? [], null);
        $this->setIfExists('proxy_port', $data ?? [], null);
        $this->setIfExists('proxy_enabled', $data ?? [], null);
        $this->setIfExists('local_host_name', $data ?? [], null);
        $this->setIfExists('mechanisms', $data ?? [], null);
        $this->setIfExists('ssl_protocols', $data ?? [], null);
        $this->setIfExists('ssl_trust', $data ?? [], null);
        $this->setIfExists('enabled', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['connector_id'] === null) {
            $invalidProperties[] = "'connector_id' can't be null";
        }
        if ($this->container['imap_host'] === null) {
            $invalidProperties[] = "'imap_host' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets connector_id
     *
     * @return string
     */
    public function getConnectorId()
    {
        return $this->container['connector_id'];
    }

    /**
     * Sets connector_id
     *
     * @param string $connector_id connector_id
     *
     * @return self
     */
    public function setConnectorId($connector_id)
    {

        if (is_null($connector_id)) {
            throw new \InvalidArgumentException('non-nullable connector_id cannot be null');
        }

        $this->container['connector_id'] = $connector_id;

        return $this;
    }

    /**
     * Gets imap_host
     *
     * @return string
     */
    public function getImapHost()
    {
        return $this->container['imap_host'];
    }

    /**
     * Sets imap_host
     *
     * @param string $imap_host imap_host
     *
     * @return self
     */
    public function setImapHost($imap_host)
    {

        if (is_null($imap_host)) {
            throw new \InvalidArgumentException('non-nullable imap_host cannot be null');
        }

        $this->container['imap_host'] = $imap_host;

        return $this;
    }

    /**
     * Gets imap_port
     *
     * @return int|null
     */
    public function getImapPort()
    {
        return $this->container['imap_port'];
    }

    /**
     * Sets imap_port
     *
     * @param int|null $imap_port imap_port
     *
     * @return self
     */
    public function setImapPort($imap_port)
    {

        if (is_null($imap_port)) {
            throw new \InvalidArgumentException('non-nullable imap_port cannot be null');
        }

        $this->container['imap_port'] = $imap_port;

        return $this;
    }

    /**
     * Gets imap_username
     *
     * @return string|null
     */
    public function getImapUsername()
    {
        return $this->container['imap_username'];
    }

    /**
     * Sets imap_username
     *
     * @param string|null $imap_username imap_username
     *
     * @return self
     */
    public function setImapUsername($imap_username)
    {

        if (is_null($imap_username)) {
            throw new \InvalidArgumentException('non-nullable imap_username cannot be null');
        }

        $this->container['imap_username'] = $imap_username;

        return $this;
    }

    /**
     * Gets imap_password
     *
     * @return string|null
     */
    public function getImapPassword()
    {
        return $this->container['imap_password'];
    }

    /**
     * Sets imap_password
     *
     * @param string|null $imap_password imap_password
     *
     * @return self
     */
    public function setImapPassword($imap_password)
    {

        if (is_null($imap_password)) {
            throw new \InvalidArgumentException('non-nullable imap_password cannot be null');
        }

        $this->container['imap_password'] = $imap_password;

        return $this;
    }

    /**
     * Gets imap_ssl
     *
     * @return bool|null
     */
    public function getImapSsl()
    {
        return $this->container['imap_ssl'];
    }

    /**
     * Sets imap_ssl
     *
     * @param bool|null $imap_ssl imap_ssl
     *
     * @return self
     */
    public function setImapSsl($imap_ssl)
    {

        if (is_null($imap_ssl)) {
            throw new \InvalidArgumentException('non-nullable imap_ssl cannot be null');
        }

        $this->container['imap_ssl'] = $imap_ssl;

        return $this;
    }

    /**
     * Gets select_folder
     *
     * @return string|null
     */
    public function getSelectFolder()
    {
        return $this->container['select_folder'];
    }

    /**
     * Sets select_folder
     *
     * @param string|null $select_folder select_folder
     *
     * @return self
     */
    public function setSelectFolder($select_folder)
    {

        if (is_null($select_folder)) {
            throw new \InvalidArgumentException('non-nullable select_folder cannot be null');
        }

        $this->container['select_folder'] = $select_folder;

        return $this;
    }

    /**
     * Gets search_terms
     *
     * @return string|null
     */
    public function getSearchTerms()
    {
        return $this->container['search_terms'];
    }

    /**
     * Sets search_terms
     *
     * @param string|null $search_terms search_terms
     *
     * @return self
     */
    public function setSearchTerms($search_terms)
    {

        if (is_null($search_terms)) {
            throw new \InvalidArgumentException('non-nullable search_terms cannot be null');
        }

        $this->container['search_terms'] = $search_terms;

        return $this;
    }

    /**
     * Gets start_tls
     *
     * @return bool|null
     */
    public function getStartTls()
    {
        return $this->container['start_tls'];
    }

    /**
     * Sets start_tls
     *
     * @param bool|null $start_tls start_tls
     *
     * @return self
     */
    public function setStartTls($start_tls)
    {

        if (is_null($start_tls)) {
            throw new \InvalidArgumentException('non-nullable start_tls cannot be null');
        }

        $this->container['start_tls'] = $start_tls;

        return $this;
    }

    /**
     * Gets proxy_host
     *
     * @return string|null
     */
    public function getProxyHost()
    {
        return $this->container['proxy_host'];
    }

    /**
     * Sets proxy_host
     *
     * @param string|null $proxy_host proxy_host
     *
     * @return self
     */
    public function setProxyHost($proxy_host)
    {

        if (is_null($proxy_host)) {
            throw new \InvalidArgumentException('non-nullable proxy_host cannot be null');
        }

        $this->container['proxy_host'] = $proxy_host;

        return $this;
    }

    /**
     * Gets proxy_port
     *
     * @return int|null
     */
    public function getProxyPort()
    {
        return $this->container['proxy_port'];
    }

    /**
     * Sets proxy_port
     *
     * @param int|null $proxy_port proxy_port
     *
     * @return self
     */
    public function setProxyPort($proxy_port)
    {

        if (is_null($proxy_port)) {
            throw new \InvalidArgumentException('non-nullable proxy_port cannot be null');
        }

        $this->container['proxy_port'] = $proxy_port;

        return $this;
    }

    /**
     * Gets proxy_enabled
     *
     * @return bool|null
     */
    public function getProxyEnabled()
    {
        return $this->container['proxy_enabled'];
    }

    /**
     * Sets proxy_enabled
     *
     * @param bool|null $proxy_enabled proxy_enabled
     *
     * @return self
     */
    public function setProxyEnabled($proxy_enabled)
    {

        if (is_null($proxy_enabled)) {
            throw new \InvalidArgumentException('non-nullable proxy_enabled cannot be null');
        }

        $this->container['proxy_enabled'] = $proxy_enabled;

        return $this;
    }

    /**
     * Gets local_host_name
     *
     * @return string|null
     */
    public function getLocalHostName()
    {
        return $this->container['local_host_name'];
    }

    /**
     * Sets local_host_name
     *
     * @param string|null $local_host_name local_host_name
     *
     * @return self
     */
    public function setLocalHostName($local_host_name)
    {

        if (is_null($local_host_name)) {
            throw new \InvalidArgumentException('non-nullable local_host_name cannot be null');
        }

        $this->container['local_host_name'] = $local_host_name;

        return $this;
    }

    /**
     * Gets mechanisms
     *
     * @return string[]|null
     */
    public function getMechanisms()
    {
        return $this->container['mechanisms'];
    }

    /**
     * Sets mechanisms
     *
     * @param string[]|null $mechanisms mechanisms
     *
     * @return self
     */
    public function setMechanisms($mechanisms)
    {

        if (is_null($mechanisms)) {
            throw new \InvalidArgumentException('non-nullable mechanisms cannot be null');
        }

        $this->container['mechanisms'] = $mechanisms;

        return $this;
    }

    /**
     * Gets ssl_protocols
     *
     * @return string[]|null
     */
    public function getSslProtocols()
    {
        return $this->container['ssl_protocols'];
    }

    /**
     * Sets ssl_protocols
     *
     * @param string[]|null $ssl_protocols ssl_protocols
     *
     * @return self
     */
    public function setSslProtocols($ssl_protocols)
    {

        if (is_null($ssl_protocols)) {
            throw new \InvalidArgumentException('non-nullable ssl_protocols cannot be null');
        }

        $this->container['ssl_protocols'] = $ssl_protocols;

        return $this;
    }

    /**
     * Gets ssl_trust
     *
     * @return string|null
     */
    public function getSslTrust()
    {
        return $this->container['ssl_trust'];
    }

    /**
     * Sets ssl_trust
     *
     * @param string|null $ssl_trust ssl_trust
     *
     * @return self
     */
    public function setSslTrust($ssl_trust)
    {

        if (is_null($ssl_trust)) {
            throw new \InvalidArgumentException('non-nullable ssl_trust cannot be null');
        }

        $this->container['ssl_trust'] = $ssl_trust;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool|null
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool|null $enabled enabled
     *
     * @return self
     */
    public function setEnabled($enabled)
    {

        if (is_null($enabled)) {
            throw new \InvalidArgumentException('non-nullable enabled cannot be null');
        }

        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {

        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }

        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return self
     */
    public function setId($id)
    {

        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }

        $this->container['id'] = $id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


