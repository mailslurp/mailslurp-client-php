<?php
/**
 * BouncedEmailDto
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MailSlurp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MailSlurp\Models;

use \ArrayAccess;
use \MailSlurp\ObjectSerializer;

/**
 * BouncedEmailDto Class Doc Comment
 *
 * @category Class
 * @description Bounced email
 * @package  MailSlurp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BouncedEmailDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BouncedEmailDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'user_id' => 'string',
        'notification_type' => 'string',
        'sent_to_recipients' => 'string[]',
        'sender' => 'string',
        'bounce_mta' => 'string',
        'bounce_type' => 'string',
        'bounce_recipients' => 'string[]',
        'bounce_sub_type' => 'string',
        'sent_email_id' => 'string',
        'subject' => 'string',
        'created_at' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'user_id' => 'uuid',
        'notification_type' => null,
        'sent_to_recipients' => null,
        'sender' => null,
        'bounce_mta' => null,
        'bounce_type' => null,
        'bounce_recipients' => null,
        'bounce_sub_type' => null,
        'sent_email_id' => 'uuid',
        'subject' => null,
        'created_at' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'user_id' => false,
		'notification_type' => false,
		'sent_to_recipients' => true,
		'sender' => false,
		'bounce_mta' => true,
		'bounce_type' => true,
		'bounce_recipients' => true,
		'bounce_sub_type' => true,
		'sent_email_id' => true,
		'subject' => true,
		'created_at' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'user_id' => 'userId',
        'notification_type' => 'notificationType',
        'sent_to_recipients' => 'sentToRecipients',
        'sender' => 'sender',
        'bounce_mta' => 'bounceMta',
        'bounce_type' => 'bounceType',
        'bounce_recipients' => 'bounceRecipients',
        'bounce_sub_type' => 'bounceSubType',
        'sent_email_id' => 'sentEmailId',
        'subject' => 'subject',
        'created_at' => 'createdAt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'user_id' => 'setUserId',
        'notification_type' => 'setNotificationType',
        'sent_to_recipients' => 'setSentToRecipients',
        'sender' => 'setSender',
        'bounce_mta' => 'setBounceMta',
        'bounce_type' => 'setBounceType',
        'bounce_recipients' => 'setBounceRecipients',
        'bounce_sub_type' => 'setBounceSubType',
        'sent_email_id' => 'setSentEmailId',
        'subject' => 'setSubject',
        'created_at' => 'setCreatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'user_id' => 'getUserId',
        'notification_type' => 'getNotificationType',
        'sent_to_recipients' => 'getSentToRecipients',
        'sender' => 'getSender',
        'bounce_mta' => 'getBounceMta',
        'bounce_type' => 'getBounceType',
        'bounce_recipients' => 'getBounceRecipients',
        'bounce_sub_type' => 'getBounceSubType',
        'sent_email_id' => 'getSentEmailId',
        'subject' => 'getSubject',
        'created_at' => 'getCreatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('user_id', $data ?? [], null);
        $this->setIfExists('notification_type', $data ?? [], null);
        $this->setIfExists('sent_to_recipients', $data ?? [], null);
        $this->setIfExists('sender', $data ?? [], null);
        $this->setIfExists('bounce_mta', $data ?? [], null);
        $this->setIfExists('bounce_type', $data ?? [], null);
        $this->setIfExists('bounce_recipients', $data ?? [], null);
        $this->setIfExists('bounce_sub_type', $data ?? [], null);
        $this->setIfExists('sent_email_id', $data ?? [], null);
        $this->setIfExists('subject', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['user_id'] === null) {
            $invalidProperties[] = "'user_id' can't be null";
        }
        if ($this->container['notification_type'] === null) {
            $invalidProperties[] = "'notification_type' can't be null";
        }
        if ($this->container['sender'] === null) {
            $invalidProperties[] = "'sender' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return self
     */
    public function setId($id)
    {

        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return string
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param string $user_id user_id
     *
     * @return self
     */
    public function setUserId($user_id)
    {

        if (is_null($user_id)) {
            throw new \InvalidArgumentException('non-nullable user_id cannot be null');
        }

        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets notification_type
     *
     * @return string
     */
    public function getNotificationType()
    {
        return $this->container['notification_type'];
    }

    /**
     * Sets notification_type
     *
     * @param string $notification_type notification_type
     *
     * @return self
     */
    public function setNotificationType($notification_type)
    {

        if (is_null($notification_type)) {
            throw new \InvalidArgumentException('non-nullable notification_type cannot be null');
        }

        $this->container['notification_type'] = $notification_type;

        return $this;
    }

    /**
     * Gets sent_to_recipients
     *
     * @return string[]|null
     */
    public function getSentToRecipients()
    {
        return $this->container['sent_to_recipients'];
    }

    /**
     * Sets sent_to_recipients
     *
     * @param string[]|null $sent_to_recipients sent_to_recipients
     *
     * @return self
     */
    public function setSentToRecipients($sent_to_recipients)
    {

        if (is_null($sent_to_recipients)) {
            array_push($this->openAPINullablesSetToNull, 'sent_to_recipients');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sent_to_recipients', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['sent_to_recipients'] = $sent_to_recipients;

        return $this;
    }

    /**
     * Gets sender
     *
     * @return string
     */
    public function getSender()
    {
        return $this->container['sender'];
    }

    /**
     * Sets sender
     *
     * @param string $sender sender
     *
     * @return self
     */
    public function setSender($sender)
    {

        if (is_null($sender)) {
            throw new \InvalidArgumentException('non-nullable sender cannot be null');
        }

        $this->container['sender'] = $sender;

        return $this;
    }

    /**
     * Gets bounce_mta
     *
     * @return string|null
     */
    public function getBounceMta()
    {
        return $this->container['bounce_mta'];
    }

    /**
     * Sets bounce_mta
     *
     * @param string|null $bounce_mta bounce_mta
     *
     * @return self
     */
    public function setBounceMta($bounce_mta)
    {

        if (is_null($bounce_mta)) {
            array_push($this->openAPINullablesSetToNull, 'bounce_mta');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bounce_mta', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['bounce_mta'] = $bounce_mta;

        return $this;
    }

    /**
     * Gets bounce_type
     *
     * @return string|null
     */
    public function getBounceType()
    {
        return $this->container['bounce_type'];
    }

    /**
     * Sets bounce_type
     *
     * @param string|null $bounce_type bounce_type
     *
     * @return self
     */
    public function setBounceType($bounce_type)
    {

        if (is_null($bounce_type)) {
            array_push($this->openAPINullablesSetToNull, 'bounce_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bounce_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['bounce_type'] = $bounce_type;

        return $this;
    }

    /**
     * Gets bounce_recipients
     *
     * @return string[]|null
     */
    public function getBounceRecipients()
    {
        return $this->container['bounce_recipients'];
    }

    /**
     * Sets bounce_recipients
     *
     * @param string[]|null $bounce_recipients bounce_recipients
     *
     * @return self
     */
    public function setBounceRecipients($bounce_recipients)
    {

        if (is_null($bounce_recipients)) {
            array_push($this->openAPINullablesSetToNull, 'bounce_recipients');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bounce_recipients', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['bounce_recipients'] = $bounce_recipients;

        return $this;
    }

    /**
     * Gets bounce_sub_type
     *
     * @return string|null
     */
    public function getBounceSubType()
    {
        return $this->container['bounce_sub_type'];
    }

    /**
     * Sets bounce_sub_type
     *
     * @param string|null $bounce_sub_type bounce_sub_type
     *
     * @return self
     */
    public function setBounceSubType($bounce_sub_type)
    {

        if (is_null($bounce_sub_type)) {
            array_push($this->openAPINullablesSetToNull, 'bounce_sub_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bounce_sub_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['bounce_sub_type'] = $bounce_sub_type;

        return $this;
    }

    /**
     * Gets sent_email_id
     *
     * @return string|null
     */
    public function getSentEmailId()
    {
        return $this->container['sent_email_id'];
    }

    /**
     * Sets sent_email_id
     *
     * @param string|null $sent_email_id sent_email_id
     *
     * @return self
     */
    public function setSentEmailId($sent_email_id)
    {

        if (is_null($sent_email_id)) {
            array_push($this->openAPINullablesSetToNull, 'sent_email_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sent_email_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['sent_email_id'] = $sent_email_id;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string|null
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string|null $subject subject
     *
     * @return self
     */
    public function setSubject($subject)
    {

        if (is_null($subject)) {
            array_push($this->openAPINullablesSetToNull, 'subject');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('subject', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {

        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }

        $this->container['created_at'] = $created_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


