<?php
/**
 * ReplyToEmailOptions
 *
 * PHP version 5
 *
 * @category Class
 * @package  MailSlurp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MailSlurp\Models;

use \ArrayAccess;
use \MailSlurp\ObjectSerializer;

/**
 * ReplyToEmailOptions Class Doc Comment
 *
 * @category Class
 * @description Options for replying to email with API
 * @package  MailSlurp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ReplyToEmailOptions implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ReplyToEmailOptions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'body' => 'string',
        'is_html' => 'bool',
        'from' => 'string',
        'reply_to' => 'string',
        'charset' => 'string',
        'attachments' => 'string[]',
        'template_variables' => 'map[string,object]',
        'template' => 'string',
        'send_strategy' => 'string',
        'use_inbox_name' => 'bool',
        'html' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'body' => null,
        'is_html' => null,
        'from' => null,
        'reply_to' => null,
        'charset' => null,
        'attachments' => null,
        'template_variables' => null,
        'template' => 'uuid',
        'send_strategy' => null,
        'use_inbox_name' => null,
        'html' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'body' => 'body',
        'is_html' => 'isHTML',
        'from' => 'from',
        'reply_to' => 'replyTo',
        'charset' => 'charset',
        'attachments' => 'attachments',
        'template_variables' => 'templateVariables',
        'template' => 'template',
        'send_strategy' => 'sendStrategy',
        'use_inbox_name' => 'useInboxName',
        'html' => 'html'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'body' => 'setBody',
        'is_html' => 'setIsHtml',
        'from' => 'setFrom',
        'reply_to' => 'setReplyTo',
        'charset' => 'setCharset',
        'attachments' => 'setAttachments',
        'template_variables' => 'setTemplateVariables',
        'template' => 'setTemplate',
        'send_strategy' => 'setSendStrategy',
        'use_inbox_name' => 'setUseInboxName',
        'html' => 'setHtml'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'body' => 'getBody',
        'is_html' => 'getIsHtml',
        'from' => 'getFrom',
        'reply_to' => 'getReplyTo',
        'charset' => 'getCharset',
        'attachments' => 'getAttachments',
        'template_variables' => 'getTemplateVariables',
        'template' => 'getTemplate',
        'send_strategy' => 'getSendStrategy',
        'use_inbox_name' => 'getUseInboxName',
        'html' => 'getHtml'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const SEND_STRATEGY_SINGLE_MESSAGE = 'SINGLE_MESSAGE';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSendStrategyAllowableValues()
    {
        return [
            self::SEND_STRATEGY_SINGLE_MESSAGE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['body'] = isset($data['body']) ? $data['body'] : null;
        $this->container['is_html'] = isset($data['is_html']) ? $data['is_html'] : null;
        $this->container['from'] = isset($data['from']) ? $data['from'] : null;
        $this->container['reply_to'] = isset($data['reply_to']) ? $data['reply_to'] : null;
        $this->container['charset'] = isset($data['charset']) ? $data['charset'] : null;
        $this->container['attachments'] = isset($data['attachments']) ? $data['attachments'] : null;
        $this->container['template_variables'] = isset($data['template_variables']) ? $data['template_variables'] : null;
        $this->container['template'] = isset($data['template']) ? $data['template'] : null;
        $this->container['send_strategy'] = isset($data['send_strategy']) ? $data['send_strategy'] : null;
        $this->container['use_inbox_name'] = isset($data['use_inbox_name']) ? $data['use_inbox_name'] : null;
        $this->container['html'] = isset($data['html']) ? $data['html'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['body'] === null) {
            $invalidProperties[] = "'body' can't be null";
        }
        if ($this->container['is_html'] === null) {
            $invalidProperties[] = "'is_html' can't be null";
        }
        $allowedValues = $this->getSendStrategyAllowableValues();
        if (!is_null($this->container['send_strategy']) && !in_array($this->container['send_strategy'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'send_strategy', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets body
     *
     * @return string
     */
    public function getBody()
    {
        return $this->container['body'];
    }

    /**
     * Sets body
     *
     * @param string $body Body of the reply email you want to send
     *
     * @return $this
     */
    public function setBody($body)
    {
        $this->container['body'] = $body;

        return $this;
    }

    /**
     * Gets is_html
     *
     * @return bool
     */
    public function getIsHtml()
    {
        return $this->container['is_html'];
    }

    /**
     * Sets is_html
     *
     * @param bool $is_html Is the reply HTML
     *
     * @return $this
     */
    public function setIsHtml($is_html)
    {
        $this->container['is_html'] = $is_html;

        return $this;
    }

    /**
     * Gets from
     *
     * @return string|null
     */
    public function getFrom()
    {
        return $this->container['from'];
    }

    /**
     * Sets from
     *
     * @param string|null $from The from header that should be used. Optional
     *
     * @return $this
     */
    public function setFrom($from)
    {
        $this->container['from'] = $from;

        return $this;
    }

    /**
     * Gets reply_to
     *
     * @return string|null
     */
    public function getReplyTo()
    {
        return $this->container['reply_to'];
    }

    /**
     * Sets reply_to
     *
     * @param string|null $reply_to The replyTo header that should be used. Optional
     *
     * @return $this
     */
    public function setReplyTo($reply_to)
    {
        $this->container['reply_to'] = $reply_to;

        return $this;
    }

    /**
     * Gets charset
     *
     * @return string|null
     */
    public function getCharset()
    {
        return $this->container['charset'];
    }

    /**
     * Sets charset
     *
     * @param string|null $charset The charset that your message should be sent with. Optional. Default is UTF-8
     *
     * @return $this
     */
    public function setCharset($charset)
    {
        $this->container['charset'] = $charset;

        return $this;
    }

    /**
     * Gets attachments
     *
     * @return string[]|null
     */
    public function getAttachments()
    {
        return $this->container['attachments'];
    }

    /**
     * Sets attachments
     *
     * @param string[]|null $attachments List of uploaded attachments to send with the reply. Optional.
     *
     * @return $this
     */
    public function setAttachments($attachments)
    {
        $this->container['attachments'] = $attachments;

        return $this;
    }

    /**
     * Gets template_variables
     *
     * @return map[string,object]|null
     */
    public function getTemplateVariables()
    {
        return $this->container['template_variables'];
    }

    /**
     * Sets template_variables
     *
     * @param map[string,object]|null $template_variables Template variables if using a template
     *
     * @return $this
     */
    public function setTemplateVariables($template_variables)
    {
        $this->container['template_variables'] = $template_variables;

        return $this;
    }

    /**
     * Gets template
     *
     * @return string|null
     */
    public function getTemplate()
    {
        return $this->container['template'];
    }

    /**
     * Sets template
     *
     * @param string|null $template Template ID to use instead of body. Will use template variable map to fill defined variable slots.
     *
     * @return $this
     */
    public function setTemplate($template)
    {
        $this->container['template'] = $template;

        return $this;
    }

    /**
     * Gets send_strategy
     *
     * @return string|null
     */
    public function getSendStrategy()
    {
        return $this->container['send_strategy'];
    }

    /**
     * Sets send_strategy
     *
     * @param string|null $send_strategy How an email should be sent based on its recipients
     *
     * @return $this
     */
    public function setSendStrategy($send_strategy)
    {
        $allowedValues = $this->getSendStrategyAllowableValues();
        if (!is_null($send_strategy) && !in_array($send_strategy, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'send_strategy', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['send_strategy'] = $send_strategy;

        return $this;
    }

    /**
     * Gets use_inbox_name
     *
     * @return bool|null
     */
    public function getUseInboxName()
    {
        return $this->container['use_inbox_name'];
    }

    /**
     * Sets use_inbox_name
     *
     * @param bool|null $use_inbox_name Optionally use inbox name as display name for sender email address
     *
     * @return $this
     */
    public function setUseInboxName($use_inbox_name)
    {
        $this->container['use_inbox_name'] = $use_inbox_name;

        return $this;
    }

    /**
     * Gets html
     *
     * @return bool|null
     */
    public function getHtml()
    {
        return $this->container['html'];
    }

    /**
     * Sets html
     *
     * @param bool|null $html html
     *
     * @return $this
     */
    public function setHtml($html)
    {
        $this->container['html'] = $html;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


