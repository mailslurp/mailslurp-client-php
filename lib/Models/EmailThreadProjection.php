<?php
/**
 * EmailThreadProjection
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MailSlurp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MailSlurp\Models;

use \ArrayAccess;
use \MailSlurp\ObjectSerializer;

/**
 * EmailThreadProjection Class Doc Comment
 *
 * @category Class
 * @description An email thread is a message thread created for a email based on Message-ID, In-Reply-To, and References headers
 * @package  MailSlurp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EmailThreadProjection implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EmailThreadProjection';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'subject' => 'string',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'unread' => 'bool',
        'sender' => '\MailSlurp\Models\SenderProjection',
        'recipients' => '\MailSlurp\Models\EmailRecipientsProjection',
        'user_id' => 'string',
        'inbox_id' => 'string',
        'to' => 'string[]',
        'cc' => 'string[]',
        'bcc' => 'string[]',
        'has_attachments' => 'bool',
        'message_count' => 'int',
        'last_body_excerpt' => 'string',
        'last_text_excerpt' => 'string',
        'last_created_at' => '\DateTime',
        'last_from' => 'string',
        'last_sender' => '\MailSlurp\Models\SenderProjection',
        'id' => 'string',
        'from' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'subject' => null,
        'created_at' => 'date-time',
        'updated_at' => 'date-time',
        'unread' => null,
        'sender' => null,
        'recipients' => null,
        'user_id' => 'uuid',
        'inbox_id' => 'uuid',
        'to' => null,
        'cc' => null,
        'bcc' => null,
        'has_attachments' => null,
        'message_count' => 'int32',
        'last_body_excerpt' => null,
        'last_text_excerpt' => null,
        'last_created_at' => 'date-time',
        'last_from' => null,
        'last_sender' => null,
        'id' => 'uuid',
        'from' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'subject' => false,
		'created_at' => false,
		'updated_at' => false,
		'unread' => false,
		'sender' => false,
		'recipients' => false,
		'user_id' => false,
		'inbox_id' => false,
		'to' => false,
		'cc' => false,
		'bcc' => false,
		'has_attachments' => false,
		'message_count' => false,
		'last_body_excerpt' => false,
		'last_text_excerpt' => false,
		'last_created_at' => false,
		'last_from' => false,
		'last_sender' => false,
		'id' => false,
		'from' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'subject' => 'subject',
        'created_at' => 'createdAt',
        'updated_at' => 'updatedAt',
        'unread' => 'unread',
        'sender' => 'sender',
        'recipients' => 'recipients',
        'user_id' => 'userId',
        'inbox_id' => 'inboxId',
        'to' => 'to',
        'cc' => 'cc',
        'bcc' => 'bcc',
        'has_attachments' => 'hasAttachments',
        'message_count' => 'messageCount',
        'last_body_excerpt' => 'lastBodyExcerpt',
        'last_text_excerpt' => 'lastTextExcerpt',
        'last_created_at' => 'lastCreatedAt',
        'last_from' => 'lastFrom',
        'last_sender' => 'lastSender',
        'id' => 'id',
        'from' => 'from'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'subject' => 'setSubject',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'unread' => 'setUnread',
        'sender' => 'setSender',
        'recipients' => 'setRecipients',
        'user_id' => 'setUserId',
        'inbox_id' => 'setInboxId',
        'to' => 'setTo',
        'cc' => 'setCc',
        'bcc' => 'setBcc',
        'has_attachments' => 'setHasAttachments',
        'message_count' => 'setMessageCount',
        'last_body_excerpt' => 'setLastBodyExcerpt',
        'last_text_excerpt' => 'setLastTextExcerpt',
        'last_created_at' => 'setLastCreatedAt',
        'last_from' => 'setLastFrom',
        'last_sender' => 'setLastSender',
        'id' => 'setId',
        'from' => 'setFrom'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'subject' => 'getSubject',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'unread' => 'getUnread',
        'sender' => 'getSender',
        'recipients' => 'getRecipients',
        'user_id' => 'getUserId',
        'inbox_id' => 'getInboxId',
        'to' => 'getTo',
        'cc' => 'getCc',
        'bcc' => 'getBcc',
        'has_attachments' => 'getHasAttachments',
        'message_count' => 'getMessageCount',
        'last_body_excerpt' => 'getLastBodyExcerpt',
        'last_text_excerpt' => 'getLastTextExcerpt',
        'last_created_at' => 'getLastCreatedAt',
        'last_from' => 'getLastFrom',
        'last_sender' => 'getLastSender',
        'id' => 'getId',
        'from' => 'getFrom'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('subject', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('unread', $data ?? [], null);
        $this->setIfExists('sender', $data ?? [], null);
        $this->setIfExists('recipients', $data ?? [], null);
        $this->setIfExists('user_id', $data ?? [], null);
        $this->setIfExists('inbox_id', $data ?? [], null);
        $this->setIfExists('to', $data ?? [], null);
        $this->setIfExists('cc', $data ?? [], null);
        $this->setIfExists('bcc', $data ?? [], null);
        $this->setIfExists('has_attachments', $data ?? [], null);
        $this->setIfExists('message_count', $data ?? [], null);
        $this->setIfExists('last_body_excerpt', $data ?? [], null);
        $this->setIfExists('last_text_excerpt', $data ?? [], null);
        $this->setIfExists('last_created_at', $data ?? [], null);
        $this->setIfExists('last_from', $data ?? [], null);
        $this->setIfExists('last_sender', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('from', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['updated_at'] === null) {
            $invalidProperties[] = "'updated_at' can't be null";
        }
        if ($this->container['unread'] === null) {
            $invalidProperties[] = "'unread' can't be null";
        }
        if ($this->container['user_id'] === null) {
            $invalidProperties[] = "'user_id' can't be null";
        }
        if ($this->container['to'] === null) {
            $invalidProperties[] = "'to' can't be null";
        }
        if ($this->container['has_attachments'] === null) {
            $invalidProperties[] = "'has_attachments' can't be null";
        }
        if ($this->container['message_count'] === null) {
            $invalidProperties[] = "'message_count' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets subject
     *
     * @return string|null
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string|null $subject Thread topic subject
     *
     * @return self
     */
    public function setSubject($subject)
    {

        if (is_null($subject)) {
            throw new \InvalidArgumentException('non-nullable subject cannot be null');
        }

        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at Created at DateTime
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {

        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }

        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at Updated at DateTime
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {

        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }

        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets unread
     *
     * @return bool
     */
    public function getUnread()
    {
        return $this->container['unread'];
    }

    /**
     * Sets unread
     *
     * @param bool $unread Has unread
     *
     * @return self
     */
    public function setUnread($unread)
    {

        if (is_null($unread)) {
            throw new \InvalidArgumentException('non-nullable unread cannot be null');
        }

        $this->container['unread'] = $unread;

        return $this;
    }

    /**
     * Gets sender
     *
     * @return \MailSlurp\Models\SenderProjection|null
     */
    public function getSender()
    {
        return $this->container['sender'];
    }

    /**
     * Sets sender
     *
     * @param \MailSlurp\Models\SenderProjection|null $sender sender
     *
     * @return self
     */
    public function setSender($sender)
    {

        if (is_null($sender)) {
            throw new \InvalidArgumentException('non-nullable sender cannot be null');
        }

        $this->container['sender'] = $sender;

        return $this;
    }

    /**
     * Gets recipients
     *
     * @return \MailSlurp\Models\EmailRecipientsProjection|null
     */
    public function getRecipients()
    {
        return $this->container['recipients'];
    }

    /**
     * Sets recipients
     *
     * @param \MailSlurp\Models\EmailRecipientsProjection|null $recipients recipients
     *
     * @return self
     */
    public function setRecipients($recipients)
    {

        if (is_null($recipients)) {
            throw new \InvalidArgumentException('non-nullable recipients cannot be null');
        }

        $this->container['recipients'] = $recipients;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return string
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param string $user_id User ID
     *
     * @return self
     */
    public function setUserId($user_id)
    {

        if (is_null($user_id)) {
            throw new \InvalidArgumentException('non-nullable user_id cannot be null');
        }

        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets inbox_id
     *
     * @return string|null
     */
    public function getInboxId()
    {
        return $this->container['inbox_id'];
    }

    /**
     * Sets inbox_id
     *
     * @param string|null $inbox_id Inbox ID
     *
     * @return self
     */
    public function setInboxId($inbox_id)
    {

        if (is_null($inbox_id)) {
            throw new \InvalidArgumentException('non-nullable inbox_id cannot be null');
        }

        $this->container['inbox_id'] = $inbox_id;

        return $this;
    }

    /**
     * Gets to
     *
     * @return string[]
     */
    public function getTo()
    {
        return $this->container['to'];
    }

    /**
     * Sets to
     *
     * @param string[] $to To recipients
     *
     * @return self
     */
    public function setTo($to)
    {

        if (is_null($to)) {
            throw new \InvalidArgumentException('non-nullable to cannot be null');
        }

        $this->container['to'] = $to;

        return $this;
    }

    /**
     * Gets cc
     *
     * @return string[]|null
     */
    public function getCc()
    {
        return $this->container['cc'];
    }

    /**
     * Sets cc
     *
     * @param string[]|null $cc CC recipients
     *
     * @return self
     */
    public function setCc($cc)
    {

        if (is_null($cc)) {
            throw new \InvalidArgumentException('non-nullable cc cannot be null');
        }

        $this->container['cc'] = $cc;

        return $this;
    }

    /**
     * Gets bcc
     *
     * @return string[]|null
     */
    public function getBcc()
    {
        return $this->container['bcc'];
    }

    /**
     * Sets bcc
     *
     * @param string[]|null $bcc BCC recipients
     *
     * @return self
     */
    public function setBcc($bcc)
    {

        if (is_null($bcc)) {
            throw new \InvalidArgumentException('non-nullable bcc cannot be null');
        }

        $this->container['bcc'] = $bcc;

        return $this;
    }

    /**
     * Gets has_attachments
     *
     * @return bool
     */
    public function getHasAttachments()
    {
        return $this->container['has_attachments'];
    }

    /**
     * Sets has_attachments
     *
     * @param bool $has_attachments Has attachments
     *
     * @return self
     */
    public function setHasAttachments($has_attachments)
    {

        if (is_null($has_attachments)) {
            throw new \InvalidArgumentException('non-nullable has_attachments cannot be null');
        }

        $this->container['has_attachments'] = $has_attachments;

        return $this;
    }

    /**
     * Gets message_count
     *
     * @return int
     */
    public function getMessageCount()
    {
        return $this->container['message_count'];
    }

    /**
     * Sets message_count
     *
     * @param int $message_count Number of messages in the thread
     *
     * @return self
     */
    public function setMessageCount($message_count)
    {

        if (is_null($message_count)) {
            throw new \InvalidArgumentException('non-nullable message_count cannot be null');
        }

        $this->container['message_count'] = $message_count;

        return $this;
    }

    /**
     * Gets last_body_excerpt
     *
     * @return string|null
     */
    public function getLastBodyExcerpt()
    {
        return $this->container['last_body_excerpt'];
    }

    /**
     * Sets last_body_excerpt
     *
     * @param string|null $last_body_excerpt Last body excerpt
     *
     * @return self
     */
    public function setLastBodyExcerpt($last_body_excerpt)
    {

        if (is_null($last_body_excerpt)) {
            throw new \InvalidArgumentException('non-nullable last_body_excerpt cannot be null');
        }

        $this->container['last_body_excerpt'] = $last_body_excerpt;

        return $this;
    }

    /**
     * Gets last_text_excerpt
     *
     * @return string|null
     */
    public function getLastTextExcerpt()
    {
        return $this->container['last_text_excerpt'];
    }

    /**
     * Sets last_text_excerpt
     *
     * @param string|null $last_text_excerpt Last text excerpt
     *
     * @return self
     */
    public function setLastTextExcerpt($last_text_excerpt)
    {

        if (is_null($last_text_excerpt)) {
            throw new \InvalidArgumentException('non-nullable last_text_excerpt cannot be null');
        }

        $this->container['last_text_excerpt'] = $last_text_excerpt;

        return $this;
    }

    /**
     * Gets last_created_at
     *
     * @return \DateTime|null
     */
    public function getLastCreatedAt()
    {
        return $this->container['last_created_at'];
    }

    /**
     * Sets last_created_at
     *
     * @param \DateTime|null $last_created_at Last email created time
     *
     * @return self
     */
    public function setLastCreatedAt($last_created_at)
    {

        if (is_null($last_created_at)) {
            throw new \InvalidArgumentException('non-nullable last_created_at cannot be null');
        }

        $this->container['last_created_at'] = $last_created_at;

        return $this;
    }

    /**
     * Gets last_from
     *
     * @return string|null
     */
    public function getLastFrom()
    {
        return $this->container['last_from'];
    }

    /**
     * Sets last_from
     *
     * @param string|null $last_from Last sender
     *
     * @return self
     */
    public function setLastFrom($last_from)
    {

        if (is_null($last_from)) {
            throw new \InvalidArgumentException('non-nullable last_from cannot be null');
        }

        $this->container['last_from'] = $last_from;

        return $this;
    }

    /**
     * Gets last_sender
     *
     * @return \MailSlurp\Models\SenderProjection|null
     */
    public function getLastSender()
    {
        return $this->container['last_sender'];
    }

    /**
     * Sets last_sender
     *
     * @param \MailSlurp\Models\SenderProjection|null $last_sender last_sender
     *
     * @return self
     */
    public function setLastSender($last_sender)
    {

        if (is_null($last_sender)) {
            throw new \InvalidArgumentException('non-nullable last_sender cannot be null');
        }

        $this->container['last_sender'] = $last_sender;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id ID of email thread
     *
     * @return self
     */
    public function setId($id)
    {

        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets from
     *
     * @return string|null
     */
    public function getFrom()
    {
        return $this->container['from'];
    }

    /**
     * Sets from
     *
     * @param string|null $from From sender
     *
     * @return self
     */
    public function setFrom($from)
    {

        if (is_null($from)) {
            throw new \InvalidArgumentException('non-nullable from cannot be null');
        }

        $this->container['from'] = $from;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


