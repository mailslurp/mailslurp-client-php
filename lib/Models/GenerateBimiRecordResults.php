<?php
/**
 * GenerateBimiRecordResults
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MailSlurp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MailSlurp\Models;

use \ArrayAccess;
use \MailSlurp\ObjectSerializer;

/**
 * GenerateBimiRecordResults Class Doc Comment
 *
 * @category Class
 * @package  MailSlurp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GenerateBimiRecordResults implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'GenerateBimiRecordResults';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'type' => 'string',
        'ttl' => 'int',
        'value' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'type' => null,
        'ttl' => 'int32',
        'value' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => false,
		'type' => false,
		'ttl' => false,
		'value' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'type' => 'type',
        'ttl' => 'ttl',
        'value' => 'value'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'type' => 'setType',
        'ttl' => 'setTtl',
        'value' => 'setValue'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'type' => 'getType',
        'ttl' => 'getTtl',
        'value' => 'getValue'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_A = 'A';
    public const TYPE_NS = 'NS';
    public const TYPE_MD = 'MD';
    public const TYPE_MF = 'MF';
    public const TYPE_CNAME = 'CNAME';
    public const TYPE_SOA = 'SOA';
    public const TYPE_MB = 'MB';
    public const TYPE_MG = 'MG';
    public const TYPE_MR = 'MR';
    public const TYPE_NULL = 'NULL';
    public const TYPE_WKS = 'WKS';
    public const TYPE_PTR = 'PTR';
    public const TYPE_HINFO = 'HINFO';
    public const TYPE_MINFO = 'MINFO';
    public const TYPE_MX = 'MX';
    public const TYPE_TXT = 'TXT';
    public const TYPE_RP = 'RP';
    public const TYPE_AFSDB = 'AFSDB';
    public const TYPE_X25 = 'X25';
    public const TYPE_ISDN = 'ISDN';
    public const TYPE_RT = 'RT';
    public const TYPE_NSAP = 'NSAP';
    public const TYPE_NSAP_PTR = 'NSAP_PTR';
    public const TYPE_SIG = 'SIG';
    public const TYPE_KEY = 'KEY';
    public const TYPE_PX = 'PX';
    public const TYPE_GPOS = 'GPOS';
    public const TYPE_AAAA = 'AAAA';
    public const TYPE_LOC = 'LOC';
    public const TYPE_NXT = 'NXT';
    public const TYPE_EID = 'EID';
    public const TYPE_NIMLOC = 'NIMLOC';
    public const TYPE_SRV = 'SRV';
    public const TYPE_ATMA = 'ATMA';
    public const TYPE_NAPTR = 'NAPTR';
    public const TYPE_KX = 'KX';
    public const TYPE_CERT = 'CERT';
    public const TYPE_A6 = 'A6';
    public const TYPE_DNAME = 'DNAME';
    public const TYPE_SINK = 'SINK';
    public const TYPE_OPT = 'OPT';
    public const TYPE_APL = 'APL';
    public const TYPE_DS = 'DS';
    public const TYPE_SSHFP = 'SSHFP';
    public const TYPE_IPSECKEY = 'IPSECKEY';
    public const TYPE_RRSIG = 'RRSIG';
    public const TYPE_NSEC = 'NSEC';
    public const TYPE_DNSKEY = 'DNSKEY';
    public const TYPE_DHCID = 'DHCID';
    public const TYPE_NSEC3 = 'NSEC3';
    public const TYPE_NSEC3_PARAM = 'NSEC3PARAM';
    public const TYPE_TLSA = 'TLSA';
    public const TYPE_SMIMEA = 'SMIMEA';
    public const TYPE_HIP = 'HIP';
    public const TYPE_NINFO = 'NINFO';
    public const TYPE_RKEY = 'RKEY';
    public const TYPE_TALINK = 'TALINK';
    public const TYPE_CDS = 'CDS';
    public const TYPE_CDNSKEY = 'CDNSKEY';
    public const TYPE_OPENPGPKEY = 'OPENPGPKEY';
    public const TYPE_CSYNC = 'CSYNC';
    public const TYPE_ZONEMD = 'ZONEMD';
    public const TYPE_SVCB = 'SVCB';
    public const TYPE_HTTPS = 'HTTPS';
    public const TYPE_SPF = 'SPF';
    public const TYPE_UINFO = 'UINFO';
    public const TYPE_UID = 'UID';
    public const TYPE_GID = 'GID';
    public const TYPE_UNSPEC = 'UNSPEC';
    public const TYPE_NID = 'NID';
    public const TYPE_L32 = 'L32';
    public const TYPE_L64 = 'L64';
    public const TYPE_LP = 'LP';
    public const TYPE_EUI48 = 'EUI48';
    public const TYPE_EUI64 = 'EUI64';
    public const TYPE_TKEY = 'TKEY';
    public const TYPE_TSIG = 'TSIG';
    public const TYPE_IXFR = 'IXFR';
    public const TYPE_AXFR = 'AXFR';
    public const TYPE_MAILB = 'MAILB';
    public const TYPE_MAILA = 'MAILA';
    public const TYPE_ANY = 'ANY';
    public const TYPE_URI = 'URI';
    public const TYPE_CAA = 'CAA';
    public const TYPE_AVC = 'AVC';
    public const TYPE_DOA = 'DOA';
    public const TYPE_AMTRELAY = 'AMTRELAY';
    public const TYPE_TA = 'TA';
    public const TYPE_DLV = 'DLV';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_A,
            self::TYPE_NS,
            self::TYPE_MD,
            self::TYPE_MF,
            self::TYPE_CNAME,
            self::TYPE_SOA,
            self::TYPE_MB,
            self::TYPE_MG,
            self::TYPE_MR,
            self::TYPE_NULL,
            self::TYPE_WKS,
            self::TYPE_PTR,
            self::TYPE_HINFO,
            self::TYPE_MINFO,
            self::TYPE_MX,
            self::TYPE_TXT,
            self::TYPE_RP,
            self::TYPE_AFSDB,
            self::TYPE_X25,
            self::TYPE_ISDN,
            self::TYPE_RT,
            self::TYPE_NSAP,
            self::TYPE_NSAP_PTR,
            self::TYPE_SIG,
            self::TYPE_KEY,
            self::TYPE_PX,
            self::TYPE_GPOS,
            self::TYPE_AAAA,
            self::TYPE_LOC,
            self::TYPE_NXT,
            self::TYPE_EID,
            self::TYPE_NIMLOC,
            self::TYPE_SRV,
            self::TYPE_ATMA,
            self::TYPE_NAPTR,
            self::TYPE_KX,
            self::TYPE_CERT,
            self::TYPE_A6,
            self::TYPE_DNAME,
            self::TYPE_SINK,
            self::TYPE_OPT,
            self::TYPE_APL,
            self::TYPE_DS,
            self::TYPE_SSHFP,
            self::TYPE_IPSECKEY,
            self::TYPE_RRSIG,
            self::TYPE_NSEC,
            self::TYPE_DNSKEY,
            self::TYPE_DHCID,
            self::TYPE_NSEC3,
            self::TYPE_NSEC3_PARAM,
            self::TYPE_TLSA,
            self::TYPE_SMIMEA,
            self::TYPE_HIP,
            self::TYPE_NINFO,
            self::TYPE_RKEY,
            self::TYPE_TALINK,
            self::TYPE_CDS,
            self::TYPE_CDNSKEY,
            self::TYPE_OPENPGPKEY,
            self::TYPE_CSYNC,
            self::TYPE_ZONEMD,
            self::TYPE_SVCB,
            self::TYPE_HTTPS,
            self::TYPE_SPF,
            self::TYPE_UINFO,
            self::TYPE_UID,
            self::TYPE_GID,
            self::TYPE_UNSPEC,
            self::TYPE_NID,
            self::TYPE_L32,
            self::TYPE_L64,
            self::TYPE_LP,
            self::TYPE_EUI48,
            self::TYPE_EUI64,
            self::TYPE_TKEY,
            self::TYPE_TSIG,
            self::TYPE_IXFR,
            self::TYPE_AXFR,
            self::TYPE_MAILB,
            self::TYPE_MAILA,
            self::TYPE_ANY,
            self::TYPE_URI,
            self::TYPE_CAA,
            self::TYPE_AVC,
            self::TYPE_DOA,
            self::TYPE_AMTRELAY,
            self::TYPE_TA,
            self::TYPE_DLV,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('ttl', $data ?? [], null);
        $this->setIfExists('value', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['ttl'] === null) {
            $invalidProperties[] = "'ttl' can't be null";
        }
        if ($this->container['value'] === null) {
            $invalidProperties[] = "'value' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {

        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Domain Name Server Record Types
     *
     * @return self
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }

        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets ttl
     *
     * @return int
     */
    public function getTtl()
    {
        return $this->container['ttl'];
    }

    /**
     * Sets ttl
     *
     * @param int $ttl ttl
     *
     * @return self
     */
    public function setTtl($ttl)
    {

        if (is_null($ttl)) {
            throw new \InvalidArgumentException('non-nullable ttl cannot be null');
        }

        $this->container['ttl'] = $ttl;

        return $this;
    }

    /**
     * Gets value
     *
     * @return string
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param string $value value
     *
     * @return self
     */
    public function setValue($value)
    {

        if (is_null($value)) {
            throw new \InvalidArgumentException('non-nullable value cannot be null');
        }

        $this->container['value'] = $value;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


