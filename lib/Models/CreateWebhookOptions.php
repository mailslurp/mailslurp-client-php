<?php
/**
 * CreateWebhookOptions
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MailSlurp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MailSlurp\Models;

use \ArrayAccess;
use \MailSlurp\ObjectSerializer;

/**
 * CreateWebhookOptions Class Doc Comment
 *
 * @category Class
 * @description Options for creating a webhook. Webhooks can be attached to inboxes and MailSlurp will POST a webhook payload to the URL specified whenever the webhook&#39;s event is triggered. Webhooks are great for processing many inbound emails and responding to other events at scale. Customize the payload sent to your endpoint by setting the &#x60;requestBodyTemplate&#x60; property to a string with moustache style variables. Property names from the standard payload model for the given event are available as variables.
 * @package  MailSlurp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreateWebhookOptions implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CreateWebhookOptions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'url' => 'string',
        'basic_auth' => '\MailSlurp\Models\BasicAuthOptions',
        'name' => 'string',
        'event_name' => 'string',
        'include_headers' => '\MailSlurp\Models\WebhookHeaders',
        'request_body_template' => 'string',
        'use_static_ip_range' => 'bool',
        'ignore_insecure_ssl_certificates' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'url' => null,
        'basic_auth' => null,
        'name' => null,
        'event_name' => null,
        'include_headers' => null,
        'request_body_template' => null,
        'use_static_ip_range' => null,
        'ignore_insecure_ssl_certificates' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'url' => false,
		'basic_auth' => true,
		'name' => true,
		'event_name' => true,
		'include_headers' => false,
		'request_body_template' => true,
		'use_static_ip_range' => true,
		'ignore_insecure_ssl_certificates' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'url' => 'url',
        'basic_auth' => 'basicAuth',
        'name' => 'name',
        'event_name' => 'eventName',
        'include_headers' => 'includeHeaders',
        'request_body_template' => 'requestBodyTemplate',
        'use_static_ip_range' => 'useStaticIpRange',
        'ignore_insecure_ssl_certificates' => 'ignoreInsecureSslCertificates'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'url' => 'setUrl',
        'basic_auth' => 'setBasicAuth',
        'name' => 'setName',
        'event_name' => 'setEventName',
        'include_headers' => 'setIncludeHeaders',
        'request_body_template' => 'setRequestBodyTemplate',
        'use_static_ip_range' => 'setUseStaticIpRange',
        'ignore_insecure_ssl_certificates' => 'setIgnoreInsecureSslCertificates'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'url' => 'getUrl',
        'basic_auth' => 'getBasicAuth',
        'name' => 'getName',
        'event_name' => 'getEventName',
        'include_headers' => 'getIncludeHeaders',
        'request_body_template' => 'getRequestBodyTemplate',
        'use_static_ip_range' => 'getUseStaticIpRange',
        'ignore_insecure_ssl_certificates' => 'getIgnoreInsecureSslCertificates'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const EVENT_NAME_EMAIL_RECEIVED = 'EMAIL_RECEIVED';
    public const EVENT_NAME_NEW_EMAIL = 'NEW_EMAIL';
    public const EVENT_NAME_NEW_CONTACT = 'NEW_CONTACT';
    public const EVENT_NAME_NEW_ATTACHMENT = 'NEW_ATTACHMENT';
    public const EVENT_NAME_EMAIL_OPENED = 'EMAIL_OPENED';
    public const EVENT_NAME_EMAIL_READ = 'EMAIL_READ';
    public const EVENT_NAME_DELIVERY_STATUS = 'DELIVERY_STATUS';
    public const EVENT_NAME_BOUNCE = 'BOUNCE';
    public const EVENT_NAME_BOUNCE_RECIPIENT = 'BOUNCE_RECIPIENT';
    public const EVENT_NAME_NEW_SMS = 'NEW_SMS';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEventNameAllowableValues()
    {
        return [
            self::EVENT_NAME_EMAIL_RECEIVED,
            self::EVENT_NAME_NEW_EMAIL,
            self::EVENT_NAME_NEW_CONTACT,
            self::EVENT_NAME_NEW_ATTACHMENT,
            self::EVENT_NAME_EMAIL_OPENED,
            self::EVENT_NAME_EMAIL_READ,
            self::EVENT_NAME_DELIVERY_STATUS,
            self::EVENT_NAME_BOUNCE,
            self::EVENT_NAME_BOUNCE_RECIPIENT,
            self::EVENT_NAME_NEW_SMS,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('basic_auth', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('event_name', $data ?? [], null);
        $this->setIfExists('include_headers', $data ?? [], null);
        $this->setIfExists('request_body_template', $data ?? [], null);
        $this->setIfExists('use_static_ip_range', $data ?? [], false);
        $this->setIfExists('ignore_insecure_ssl_certificates', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['url'] === null) {
            $invalidProperties[] = "'url' can't be null";
        }
        $allowedValues = $this->getEventNameAllowableValues();
        if (!is_null($this->container['event_name']) && !in_array($this->container['event_name'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'event_name', must be one of '%s'",
                $this->container['event_name'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url Public URL on your server that MailSlurp can post WebhookNotification payload to when an email is received or an event is trigger. The payload of the submitted JSON is dependent on the webhook event type. See docs.mailslurp.com/webhooks for event payload documentation.
     *
     * @return self
     */
    public function setUrl($url)
    {

        if (is_null($url)) {
            throw new \InvalidArgumentException('non-nullable url cannot be null');
        }

        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets basic_auth
     *
     * @return \MailSlurp\Models\BasicAuthOptions|null
     */
    public function getBasicAuth()
    {
        return $this->container['basic_auth'];
    }

    /**
     * Sets basic_auth
     *
     * @param \MailSlurp\Models\BasicAuthOptions|null $basic_auth basic_auth
     *
     * @return self
     */
    public function setBasicAuth($basic_auth)
    {

        if (is_null($basic_auth)) {
            array_push($this->openAPINullablesSetToNull, 'basic_auth');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('basic_auth', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['basic_auth'] = $basic_auth;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Optional name for the webhook
     *
     * @return self
     */
    public function setName($name)
    {

        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets event_name
     *
     * @return string|null
     */
    public function getEventName()
    {
        return $this->container['event_name'];
    }

    /**
     * Sets event_name
     *
     * @param string|null $event_name Optional webhook event name. Default is `EMAIL_RECEIVED` and is triggered when an email is received by the inbox associated with the webhook. Payload differ according to the webhook event name.
     *
     * @return self
     */
    public function setEventName($event_name)
    {
        $allowedValues = $this->getEventNameAllowableValues();
        if (!is_null($event_name) && !in_array($event_name, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'event_name', must be one of '%s'",
                    $event_name,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($event_name)) {
            array_push($this->openAPINullablesSetToNull, 'event_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('event_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['event_name'] = $event_name;

        return $this;
    }

    /**
     * Gets include_headers
     *
     * @return \MailSlurp\Models\WebhookHeaders|null
     */
    public function getIncludeHeaders()
    {
        return $this->container['include_headers'];
    }

    /**
     * Sets include_headers
     *
     * @param \MailSlurp\Models\WebhookHeaders|null $include_headers include_headers
     *
     * @return self
     */
    public function setIncludeHeaders($include_headers)
    {

        if (is_null($include_headers)) {
            throw new \InvalidArgumentException('non-nullable include_headers cannot be null');
        }

        $this->container['include_headers'] = $include_headers;

        return $this;
    }

    /**
     * Gets request_body_template
     *
     * @return string|null
     */
    public function getRequestBodyTemplate()
    {
        return $this->container['request_body_template'];
    }

    /**
     * Sets request_body_template
     *
     * @param string|null $request_body_template Template for the JSON body of the webhook request that will be sent to your server. Use Moustache style `{{variableName}}` templating to use parts of the standard webhook payload for the given event.
     *
     * @return self
     */
    public function setRequestBodyTemplate($request_body_template)
    {

        if (is_null($request_body_template)) {
            array_push($this->openAPINullablesSetToNull, 'request_body_template');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('request_body_template', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['request_body_template'] = $request_body_template;

        return $this;
    }

    /**
     * Gets use_static_ip_range
     *
     * @return bool|null
     */
    public function getUseStaticIpRange()
    {
        return $this->container['use_static_ip_range'];
    }

    /**
     * Sets use_static_ip_range
     *
     * @param bool|null $use_static_ip_range Use static IP range when calling webhook endpoint
     *
     * @return self
     */
    public function setUseStaticIpRange($use_static_ip_range)
    {

        if (is_null($use_static_ip_range)) {
            array_push($this->openAPINullablesSetToNull, 'use_static_ip_range');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('use_static_ip_range', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['use_static_ip_range'] = $use_static_ip_range;

        return $this;
    }

    /**
     * Gets ignore_insecure_ssl_certificates
     *
     * @return bool|null
     */
    public function getIgnoreInsecureSslCertificates()
    {
        return $this->container['ignore_insecure_ssl_certificates'];
    }

    /**
     * Sets ignore_insecure_ssl_certificates
     *
     * @param bool|null $ignore_insecure_ssl_certificates Ignore insecure SSL certificates when sending request. Useful for self-signed certs.
     *
     * @return self
     */
    public function setIgnoreInsecureSslCertificates($ignore_insecure_ssl_certificates)
    {

        if (is_null($ignore_insecure_ssl_certificates)) {
            array_push($this->openAPINullablesSetToNull, 'ignore_insecure_ssl_certificates');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ignore_insecure_ssl_certificates', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['ignore_insecure_ssl_certificates'] = $ignore_insecure_ssl_certificates;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


