<?php
/**
 * DomainNameRecord
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MailSlurp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MailSlurp\Models;

use \ArrayAccess;
use \MailSlurp\ObjectSerializer;

/**
 * DomainNameRecord Class Doc Comment
 *
 * @category Class
 * @description DNS Record required for verification of a domain. Record vary depending on domain type.
 * @package  MailSlurp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DomainNameRecord implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DomainNameRecord';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'label' => 'string',
        'required' => 'bool',
        'record_type' => 'string',
        'name' => 'string',
        'record_entries' => 'string[]',
        'ttl' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'label' => null,
        'required' => null,
        'record_type' => null,
        'name' => null,
        'record_entries' => null,
        'ttl' => 'int64'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'label' => false,
		'required' => false,
		'record_type' => false,
		'name' => false,
		'record_entries' => false,
		'ttl' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'label' => 'label',
        'required' => 'required',
        'record_type' => 'recordType',
        'name' => 'name',
        'record_entries' => 'recordEntries',
        'ttl' => 'ttl'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'label' => 'setLabel',
        'required' => 'setRequired',
        'record_type' => 'setRecordType',
        'name' => 'setName',
        'record_entries' => 'setRecordEntries',
        'ttl' => 'setTtl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'label' => 'getLabel',
        'required' => 'getRequired',
        'record_type' => 'getRecordType',
        'name' => 'getName',
        'record_entries' => 'getRecordEntries',
        'ttl' => 'getTtl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const LABEL_VERIFICATION = 'VERIFICATION';
    public const LABEL_MX = 'MX';
    public const LABEL_SPF = 'SPF';
    public const LABEL_DKIM = 'DKIM';
    public const LABEL_DMARC = 'DMARC';
    public const RECORD_TYPE_A = 'A';
    public const RECORD_TYPE_NS = 'NS';
    public const RECORD_TYPE_MD = 'MD';
    public const RECORD_TYPE_MF = 'MF';
    public const RECORD_TYPE_CNAME = 'CNAME';
    public const RECORD_TYPE_SOA = 'SOA';
    public const RECORD_TYPE_MB = 'MB';
    public const RECORD_TYPE_MG = 'MG';
    public const RECORD_TYPE_MR = 'MR';
    public const RECORD_TYPE_NULL = 'NULL';
    public const RECORD_TYPE_WKS = 'WKS';
    public const RECORD_TYPE_PTR = 'PTR';
    public const RECORD_TYPE_HINFO = 'HINFO';
    public const RECORD_TYPE_MINFO = 'MINFO';
    public const RECORD_TYPE_MX = 'MX';
    public const RECORD_TYPE_TXT = 'TXT';
    public const RECORD_TYPE_RP = 'RP';
    public const RECORD_TYPE_AFSDB = 'AFSDB';
    public const RECORD_TYPE_X25 = 'X25';
    public const RECORD_TYPE_ISDN = 'ISDN';
    public const RECORD_TYPE_RT = 'RT';
    public const RECORD_TYPE_NSAP = 'NSAP';
    public const RECORD_TYPE_NSAP_PTR = 'NSAP_PTR';
    public const RECORD_TYPE_SIG = 'SIG';
    public const RECORD_TYPE_KEY = 'KEY';
    public const RECORD_TYPE_PX = 'PX';
    public const RECORD_TYPE_GPOS = 'GPOS';
    public const RECORD_TYPE_AAAA = 'AAAA';
    public const RECORD_TYPE_LOC = 'LOC';
    public const RECORD_TYPE_NXT = 'NXT';
    public const RECORD_TYPE_EID = 'EID';
    public const RECORD_TYPE_NIMLOC = 'NIMLOC';
    public const RECORD_TYPE_SRV = 'SRV';
    public const RECORD_TYPE_ATMA = 'ATMA';
    public const RECORD_TYPE_NAPTR = 'NAPTR';
    public const RECORD_TYPE_KX = 'KX';
    public const RECORD_TYPE_CERT = 'CERT';
    public const RECORD_TYPE_A6 = 'A6';
    public const RECORD_TYPE_DNAME = 'DNAME';
    public const RECORD_TYPE_SINK = 'SINK';
    public const RECORD_TYPE_OPT = 'OPT';
    public const RECORD_TYPE_APL = 'APL';
    public const RECORD_TYPE_DS = 'DS';
    public const RECORD_TYPE_SSHFP = 'SSHFP';
    public const RECORD_TYPE_IPSECKEY = 'IPSECKEY';
    public const RECORD_TYPE_RRSIG = 'RRSIG';
    public const RECORD_TYPE_NSEC = 'NSEC';
    public const RECORD_TYPE_DNSKEY = 'DNSKEY';
    public const RECORD_TYPE_DHCID = 'DHCID';
    public const RECORD_TYPE_NSEC3 = 'NSEC3';
    public const RECORD_TYPE_NSEC3_PARAM = 'NSEC3PARAM';
    public const RECORD_TYPE_TLSA = 'TLSA';
    public const RECORD_TYPE_SMIMEA = 'SMIMEA';
    public const RECORD_TYPE_HIP = 'HIP';
    public const RECORD_TYPE_NINFO = 'NINFO';
    public const RECORD_TYPE_RKEY = 'RKEY';
    public const RECORD_TYPE_TALINK = 'TALINK';
    public const RECORD_TYPE_CDS = 'CDS';
    public const RECORD_TYPE_CDNSKEY = 'CDNSKEY';
    public const RECORD_TYPE_OPENPGPKEY = 'OPENPGPKEY';
    public const RECORD_TYPE_CSYNC = 'CSYNC';
    public const RECORD_TYPE_ZONEMD = 'ZONEMD';
    public const RECORD_TYPE_SVCB = 'SVCB';
    public const RECORD_TYPE_HTTPS = 'HTTPS';
    public const RECORD_TYPE_SPF = 'SPF';
    public const RECORD_TYPE_UINFO = 'UINFO';
    public const RECORD_TYPE_UID = 'UID';
    public const RECORD_TYPE_GID = 'GID';
    public const RECORD_TYPE_UNSPEC = 'UNSPEC';
    public const RECORD_TYPE_NID = 'NID';
    public const RECORD_TYPE_L32 = 'L32';
    public const RECORD_TYPE_L64 = 'L64';
    public const RECORD_TYPE_LP = 'LP';
    public const RECORD_TYPE_EUI48 = 'EUI48';
    public const RECORD_TYPE_EUI64 = 'EUI64';
    public const RECORD_TYPE_TKEY = 'TKEY';
    public const RECORD_TYPE_TSIG = 'TSIG';
    public const RECORD_TYPE_IXFR = 'IXFR';
    public const RECORD_TYPE_AXFR = 'AXFR';
    public const RECORD_TYPE_MAILB = 'MAILB';
    public const RECORD_TYPE_MAILA = 'MAILA';
    public const RECORD_TYPE_ANY = 'ANY';
    public const RECORD_TYPE_URI = 'URI';
    public const RECORD_TYPE_CAA = 'CAA';
    public const RECORD_TYPE_AVC = 'AVC';
    public const RECORD_TYPE_DOA = 'DOA';
    public const RECORD_TYPE_AMTRELAY = 'AMTRELAY';
    public const RECORD_TYPE_TA = 'TA';
    public const RECORD_TYPE_DLV = 'DLV';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLabelAllowableValues()
    {
        return [
            self::LABEL_VERIFICATION,
            self::LABEL_MX,
            self::LABEL_SPF,
            self::LABEL_DKIM,
            self::LABEL_DMARC,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRecordTypeAllowableValues()
    {
        return [
            self::RECORD_TYPE_A,
            self::RECORD_TYPE_NS,
            self::RECORD_TYPE_MD,
            self::RECORD_TYPE_MF,
            self::RECORD_TYPE_CNAME,
            self::RECORD_TYPE_SOA,
            self::RECORD_TYPE_MB,
            self::RECORD_TYPE_MG,
            self::RECORD_TYPE_MR,
            self::RECORD_TYPE_NULL,
            self::RECORD_TYPE_WKS,
            self::RECORD_TYPE_PTR,
            self::RECORD_TYPE_HINFO,
            self::RECORD_TYPE_MINFO,
            self::RECORD_TYPE_MX,
            self::RECORD_TYPE_TXT,
            self::RECORD_TYPE_RP,
            self::RECORD_TYPE_AFSDB,
            self::RECORD_TYPE_X25,
            self::RECORD_TYPE_ISDN,
            self::RECORD_TYPE_RT,
            self::RECORD_TYPE_NSAP,
            self::RECORD_TYPE_NSAP_PTR,
            self::RECORD_TYPE_SIG,
            self::RECORD_TYPE_KEY,
            self::RECORD_TYPE_PX,
            self::RECORD_TYPE_GPOS,
            self::RECORD_TYPE_AAAA,
            self::RECORD_TYPE_LOC,
            self::RECORD_TYPE_NXT,
            self::RECORD_TYPE_EID,
            self::RECORD_TYPE_NIMLOC,
            self::RECORD_TYPE_SRV,
            self::RECORD_TYPE_ATMA,
            self::RECORD_TYPE_NAPTR,
            self::RECORD_TYPE_KX,
            self::RECORD_TYPE_CERT,
            self::RECORD_TYPE_A6,
            self::RECORD_TYPE_DNAME,
            self::RECORD_TYPE_SINK,
            self::RECORD_TYPE_OPT,
            self::RECORD_TYPE_APL,
            self::RECORD_TYPE_DS,
            self::RECORD_TYPE_SSHFP,
            self::RECORD_TYPE_IPSECKEY,
            self::RECORD_TYPE_RRSIG,
            self::RECORD_TYPE_NSEC,
            self::RECORD_TYPE_DNSKEY,
            self::RECORD_TYPE_DHCID,
            self::RECORD_TYPE_NSEC3,
            self::RECORD_TYPE_NSEC3_PARAM,
            self::RECORD_TYPE_TLSA,
            self::RECORD_TYPE_SMIMEA,
            self::RECORD_TYPE_HIP,
            self::RECORD_TYPE_NINFO,
            self::RECORD_TYPE_RKEY,
            self::RECORD_TYPE_TALINK,
            self::RECORD_TYPE_CDS,
            self::RECORD_TYPE_CDNSKEY,
            self::RECORD_TYPE_OPENPGPKEY,
            self::RECORD_TYPE_CSYNC,
            self::RECORD_TYPE_ZONEMD,
            self::RECORD_TYPE_SVCB,
            self::RECORD_TYPE_HTTPS,
            self::RECORD_TYPE_SPF,
            self::RECORD_TYPE_UINFO,
            self::RECORD_TYPE_UID,
            self::RECORD_TYPE_GID,
            self::RECORD_TYPE_UNSPEC,
            self::RECORD_TYPE_NID,
            self::RECORD_TYPE_L32,
            self::RECORD_TYPE_L64,
            self::RECORD_TYPE_LP,
            self::RECORD_TYPE_EUI48,
            self::RECORD_TYPE_EUI64,
            self::RECORD_TYPE_TKEY,
            self::RECORD_TYPE_TSIG,
            self::RECORD_TYPE_IXFR,
            self::RECORD_TYPE_AXFR,
            self::RECORD_TYPE_MAILB,
            self::RECORD_TYPE_MAILA,
            self::RECORD_TYPE_ANY,
            self::RECORD_TYPE_URI,
            self::RECORD_TYPE_CAA,
            self::RECORD_TYPE_AVC,
            self::RECORD_TYPE_DOA,
            self::RECORD_TYPE_AMTRELAY,
            self::RECORD_TYPE_TA,
            self::RECORD_TYPE_DLV,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('label', $data ?? [], null);
        $this->setIfExists('required', $data ?? [], null);
        $this->setIfExists('record_type', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('record_entries', $data ?? [], null);
        $this->setIfExists('ttl', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['label'] === null) {
            $invalidProperties[] = "'label' can't be null";
        }
        $allowedValues = $this->getLabelAllowableValues();
        if (!is_null($this->container['label']) && !in_array($this->container['label'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'label', must be one of '%s'",
                $this->container['label'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['required'] === null) {
            $invalidProperties[] = "'required' can't be null";
        }
        if ($this->container['record_type'] === null) {
            $invalidProperties[] = "'record_type' can't be null";
        }
        $allowedValues = $this->getRecordTypeAllowableValues();
        if (!is_null($this->container['record_type']) && !in_array($this->container['record_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'record_type', must be one of '%s'",
                $this->container['record_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['record_entries'] === null) {
            $invalidProperties[] = "'record_entries' can't be null";
        }
        if ($this->container['ttl'] === null) {
            $invalidProperties[] = "'ttl' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets label
     *
     * @return string
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string $label Domain Name Server Record Label
     *
     * @return self
     */
    public function setLabel($label)
    {
        $allowedValues = $this->getLabelAllowableValues();
        if (!in_array($label, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'label', must be one of '%s'",
                    $label,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($label)) {
            throw new \InvalidArgumentException('non-nullable label cannot be null');
        }

        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets required
     *
     * @return bool
     */
    public function getRequired()
    {
        return $this->container['required'];
    }

    /**
     * Sets required
     *
     * @param bool $required required
     *
     * @return self
     */
    public function setRequired($required)
    {

        if (is_null($required)) {
            throw new \InvalidArgumentException('non-nullable required cannot be null');
        }

        $this->container['required'] = $required;

        return $this;
    }

    /**
     * Gets record_type
     *
     * @return string
     */
    public function getRecordType()
    {
        return $this->container['record_type'];
    }

    /**
     * Sets record_type
     *
     * @param string $record_type Domain Name Server Record Types
     *
     * @return self
     */
    public function setRecordType($record_type)
    {
        $allowedValues = $this->getRecordTypeAllowableValues();
        if (!in_array($record_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'record_type', must be one of '%s'",
                    $record_type,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($record_type)) {
            throw new \InvalidArgumentException('non-nullable record_type cannot be null');
        }

        $this->container['record_type'] = $record_type;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {

        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets record_entries
     *
     * @return string[]
     */
    public function getRecordEntries()
    {
        return $this->container['record_entries'];
    }

    /**
     * Sets record_entries
     *
     * @param string[] $record_entries record_entries
     *
     * @return self
     */
    public function setRecordEntries($record_entries)
    {

        if (is_null($record_entries)) {
            throw new \InvalidArgumentException('non-nullable record_entries cannot be null');
        }

        $this->container['record_entries'] = $record_entries;

        return $this;
    }

    /**
     * Gets ttl
     *
     * @return int
     */
    public function getTtl()
    {
        return $this->container['ttl'];
    }

    /**
     * Sets ttl
     *
     * @param int $ttl ttl
     *
     * @return self
     */
    public function setTtl($ttl)
    {

        if (is_null($ttl)) {
            throw new \InvalidArgumentException('non-nullable ttl cannot be null');
        }

        $this->container['ttl'] = $ttl;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


