<?php
/**
 * GenerateDmarcRecordOptions
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MailSlurp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MailSlurp\Models;

use \ArrayAccess;
use \MailSlurp\ObjectSerializer;

/**
 * GenerateDmarcRecordOptions Class Doc Comment
 *
 * @category Class
 * @package  MailSlurp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GenerateDmarcRecordOptions implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'GenerateDmarcRecordOptions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'domain' => 'string',
        'version' => 'string',
        'policy' => 'string',
        'subdomain_policy' => 'string',
        'report_email_address' => 'string[]',
        'forensic_email_address' => 'string[]',
        'percentage' => 'int',
        'report_format' => 'string',
        'seconds_between_reports' => 'int',
        'adkim' => 'string',
        'aspf' => 'string',
        'fo' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'domain' => null,
        'version' => null,
        'policy' => null,
        'subdomain_policy' => null,
        'report_email_address' => null,
        'forensic_email_address' => null,
        'percentage' => 'int32',
        'report_format' => null,
        'seconds_between_reports' => 'int32',
        'adkim' => null,
        'aspf' => null,
        'fo' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'domain' => false,
		'version' => false,
		'policy' => false,
		'subdomain_policy' => false,
		'report_email_address' => false,
		'forensic_email_address' => false,
		'percentage' => false,
		'report_format' => false,
		'seconds_between_reports' => false,
		'adkim' => false,
		'aspf' => false,
		'fo' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'domain' => 'domain',
        'version' => 'version',
        'policy' => 'policy',
        'subdomain_policy' => 'subdomainPolicy',
        'report_email_address' => 'reportEmailAddress',
        'forensic_email_address' => 'forensicEmailAddress',
        'percentage' => 'percentage',
        'report_format' => 'reportFormat',
        'seconds_between_reports' => 'secondsBetweenReports',
        'adkim' => 'adkim',
        'aspf' => 'aspf',
        'fo' => 'fo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'domain' => 'setDomain',
        'version' => 'setVersion',
        'policy' => 'setPolicy',
        'subdomain_policy' => 'setSubdomainPolicy',
        'report_email_address' => 'setReportEmailAddress',
        'forensic_email_address' => 'setForensicEmailAddress',
        'percentage' => 'setPercentage',
        'report_format' => 'setReportFormat',
        'seconds_between_reports' => 'setSecondsBetweenReports',
        'adkim' => 'setAdkim',
        'aspf' => 'setAspf',
        'fo' => 'setFo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'domain' => 'getDomain',
        'version' => 'getVersion',
        'policy' => 'getPolicy',
        'subdomain_policy' => 'getSubdomainPolicy',
        'report_email_address' => 'getReportEmailAddress',
        'forensic_email_address' => 'getForensicEmailAddress',
        'percentage' => 'getPercentage',
        'report_format' => 'getReportFormat',
        'seconds_between_reports' => 'getSecondsBetweenReports',
        'adkim' => 'getAdkim',
        'aspf' => 'getAspf',
        'fo' => 'getFo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const VERSION_DMARC1 = 'DMARC1';
    public const POLICY_NONE = 'NONE';
    public const POLICY_QUARANTINE = 'QUARANTINE';
    public const POLICY_REJECT = 'REJECT';
    public const SUBDOMAIN_POLICY_NONE = 'NONE';
    public const SUBDOMAIN_POLICY_QUARANTINE = 'QUARANTINE';
    public const SUBDOMAIN_POLICY_REJECT = 'REJECT';
    public const REPORT_FORMAT_AFRF = 'AFRF';
    public const ADKIM_STRICT = 'STRICT';
    public const ADKIM_RELAXED = 'RELAXED';
    public const ASPF_STRICT = 'STRICT';
    public const ASPF_RELAXED = 'RELAXED';
    public const FO__0 = 'FO_0';
    public const FO__1 = 'FO_1';
    public const FO_D = 'FO_D';
    public const FO_S = 'FO_S';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVersionAllowableValues()
    {
        return [
            self::VERSION_DMARC1,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPolicyAllowableValues()
    {
        return [
            self::POLICY_NONE,
            self::POLICY_QUARANTINE,
            self::POLICY_REJECT,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSubdomainPolicyAllowableValues()
    {
        return [
            self::SUBDOMAIN_POLICY_NONE,
            self::SUBDOMAIN_POLICY_QUARANTINE,
            self::SUBDOMAIN_POLICY_REJECT,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getReportFormatAllowableValues()
    {
        return [
            self::REPORT_FORMAT_AFRF,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAdkimAllowableValues()
    {
        return [
            self::ADKIM_STRICT,
            self::ADKIM_RELAXED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAspfAllowableValues()
    {
        return [
            self::ASPF_STRICT,
            self::ASPF_RELAXED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFoAllowableValues()
    {
        return [
            self::FO__0,
            self::FO__1,
            self::FO_D,
            self::FO_S,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('domain', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('policy', $data ?? [], null);
        $this->setIfExists('subdomain_policy', $data ?? [], null);
        $this->setIfExists('report_email_address', $data ?? [], null);
        $this->setIfExists('forensic_email_address', $data ?? [], null);
        $this->setIfExists('percentage', $data ?? [], null);
        $this->setIfExists('report_format', $data ?? [], null);
        $this->setIfExists('seconds_between_reports', $data ?? [], null);
        $this->setIfExists('adkim', $data ?? [], null);
        $this->setIfExists('aspf', $data ?? [], null);
        $this->setIfExists('fo', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['domain'] === null) {
            $invalidProperties[] = "'domain' can't be null";
        }
        if ($this->container['version'] === null) {
            $invalidProperties[] = "'version' can't be null";
        }
        $allowedValues = $this->getVersionAllowableValues();
        if (!is_null($this->container['version']) && !in_array($this->container['version'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'version', must be one of '%s'",
                $this->container['version'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['policy'] === null) {
            $invalidProperties[] = "'policy' can't be null";
        }
        $allowedValues = $this->getPolicyAllowableValues();
        if (!is_null($this->container['policy']) && !in_array($this->container['policy'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'policy', must be one of '%s'",
                $this->container['policy'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSubdomainPolicyAllowableValues();
        if (!is_null($this->container['subdomain_policy']) && !in_array($this->container['subdomain_policy'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'subdomain_policy', must be one of '%s'",
                $this->container['subdomain_policy'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['percentage']) && ($this->container['percentage'] > 100)) {
            $invalidProperties[] = "invalid value for 'percentage', must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['percentage']) && ($this->container['percentage'] < 1)) {
            $invalidProperties[] = "invalid value for 'percentage', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getReportFormatAllowableValues();
        if (!is_null($this->container['report_format']) && !in_array($this->container['report_format'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'report_format', must be one of '%s'",
                $this->container['report_format'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAdkimAllowableValues();
        if (!is_null($this->container['adkim']) && !in_array($this->container['adkim'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'adkim', must be one of '%s'",
                $this->container['adkim'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAspfAllowableValues();
        if (!is_null($this->container['aspf']) && !in_array($this->container['aspf'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'aspf', must be one of '%s'",
                $this->container['aspf'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFoAllowableValues();
        if (!is_null($this->container['fo']) && !in_array($this->container['fo'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'fo', must be one of '%s'",
                $this->container['fo'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets domain
     *
     * @return string
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param string $domain domain
     *
     * @return self
     */
    public function setDomain($domain)
    {

        if (is_null($domain)) {
            throw new \InvalidArgumentException('non-nullable domain cannot be null');
        }

        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string $version version
     *
     * @return self
     */
    public function setVersion($version)
    {
        $allowedValues = $this->getVersionAllowableValues();
        if (!in_array($version, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'version', must be one of '%s'",
                    $version,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }

        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets policy
     *
     * @return string
     */
    public function getPolicy()
    {
        return $this->container['policy'];
    }

    /**
     * Sets policy
     *
     * @param string $policy policy
     *
     * @return self
     */
    public function setPolicy($policy)
    {
        $allowedValues = $this->getPolicyAllowableValues();
        if (!in_array($policy, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'policy', must be one of '%s'",
                    $policy,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($policy)) {
            throw new \InvalidArgumentException('non-nullable policy cannot be null');
        }

        $this->container['policy'] = $policy;

        return $this;
    }

    /**
     * Gets subdomain_policy
     *
     * @return string|null
     */
    public function getSubdomainPolicy()
    {
        return $this->container['subdomain_policy'];
    }

    /**
     * Sets subdomain_policy
     *
     * @param string|null $subdomain_policy subdomain_policy
     *
     * @return self
     */
    public function setSubdomainPolicy($subdomain_policy)
    {
        $allowedValues = $this->getSubdomainPolicyAllowableValues();
        if (!is_null($subdomain_policy) && !in_array($subdomain_policy, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'subdomain_policy', must be one of '%s'",
                    $subdomain_policy,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($subdomain_policy)) {
            throw new \InvalidArgumentException('non-nullable subdomain_policy cannot be null');
        }

        $this->container['subdomain_policy'] = $subdomain_policy;

        return $this;
    }

    /**
     * Gets report_email_address
     *
     * @return string[]|null
     */
    public function getReportEmailAddress()
    {
        return $this->container['report_email_address'];
    }

    /**
     * Sets report_email_address
     *
     * @param string[]|null $report_email_address report_email_address
     *
     * @return self
     */
    public function setReportEmailAddress($report_email_address)
    {

        if (is_null($report_email_address)) {
            throw new \InvalidArgumentException('non-nullable report_email_address cannot be null');
        }

        $this->container['report_email_address'] = $report_email_address;

        return $this;
    }

    /**
     * Gets forensic_email_address
     *
     * @return string[]|null
     */
    public function getForensicEmailAddress()
    {
        return $this->container['forensic_email_address'];
    }

    /**
     * Sets forensic_email_address
     *
     * @param string[]|null $forensic_email_address forensic_email_address
     *
     * @return self
     */
    public function setForensicEmailAddress($forensic_email_address)
    {

        if (is_null($forensic_email_address)) {
            throw new \InvalidArgumentException('non-nullable forensic_email_address cannot be null');
        }

        $this->container['forensic_email_address'] = $forensic_email_address;

        return $this;
    }

    /**
     * Gets percentage
     *
     * @return int|null
     */
    public function getPercentage()
    {
        return $this->container['percentage'];
    }

    /**
     * Sets percentage
     *
     * @param int|null $percentage percentage
     *
     * @return self
     */
    public function setPercentage($percentage)
    {

        if (!is_null($percentage) && ($percentage > 100)) {
            throw new \InvalidArgumentException('invalid value for $percentage when calling GenerateDmarcRecordOptions., must be smaller than or equal to 100.');
        }
        if (!is_null($percentage) && ($percentage < 1)) {
            throw new \InvalidArgumentException('invalid value for $percentage when calling GenerateDmarcRecordOptions., must be bigger than or equal to 1.');
        }


        if (is_null($percentage)) {
            throw new \InvalidArgumentException('non-nullable percentage cannot be null');
        }

        $this->container['percentage'] = $percentage;

        return $this;
    }

    /**
     * Gets report_format
     *
     * @return string|null
     */
    public function getReportFormat()
    {
        return $this->container['report_format'];
    }

    /**
     * Sets report_format
     *
     * @param string|null $report_format report_format
     *
     * @return self
     */
    public function setReportFormat($report_format)
    {
        $allowedValues = $this->getReportFormatAllowableValues();
        if (!is_null($report_format) && !in_array($report_format, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'report_format', must be one of '%s'",
                    $report_format,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($report_format)) {
            throw new \InvalidArgumentException('non-nullable report_format cannot be null');
        }

        $this->container['report_format'] = $report_format;

        return $this;
    }

    /**
     * Gets seconds_between_reports
     *
     * @return int|null
     */
    public function getSecondsBetweenReports()
    {
        return $this->container['seconds_between_reports'];
    }

    /**
     * Sets seconds_between_reports
     *
     * @param int|null $seconds_between_reports seconds_between_reports
     *
     * @return self
     */
    public function setSecondsBetweenReports($seconds_between_reports)
    {

        if (is_null($seconds_between_reports)) {
            throw new \InvalidArgumentException('non-nullable seconds_between_reports cannot be null');
        }

        $this->container['seconds_between_reports'] = $seconds_between_reports;

        return $this;
    }

    /**
     * Gets adkim
     *
     * @return string|null
     */
    public function getAdkim()
    {
        return $this->container['adkim'];
    }

    /**
     * Sets adkim
     *
     * @param string|null $adkim adkim
     *
     * @return self
     */
    public function setAdkim($adkim)
    {
        $allowedValues = $this->getAdkimAllowableValues();
        if (!is_null($adkim) && !in_array($adkim, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'adkim', must be one of '%s'",
                    $adkim,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($adkim)) {
            throw new \InvalidArgumentException('non-nullable adkim cannot be null');
        }

        $this->container['adkim'] = $adkim;

        return $this;
    }

    /**
     * Gets aspf
     *
     * @return string|null
     */
    public function getAspf()
    {
        return $this->container['aspf'];
    }

    /**
     * Sets aspf
     *
     * @param string|null $aspf aspf
     *
     * @return self
     */
    public function setAspf($aspf)
    {
        $allowedValues = $this->getAspfAllowableValues();
        if (!is_null($aspf) && !in_array($aspf, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'aspf', must be one of '%s'",
                    $aspf,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($aspf)) {
            throw new \InvalidArgumentException('non-nullable aspf cannot be null');
        }

        $this->container['aspf'] = $aspf;

        return $this;
    }

    /**
     * Gets fo
     *
     * @return string|null
     */
    public function getFo()
    {
        return $this->container['fo'];
    }

    /**
     * Sets fo
     *
     * @param string|null $fo fo
     *
     * @return self
     */
    public function setFo($fo)
    {
        $allowedValues = $this->getFoAllowableValues();
        if (!is_null($fo) && !in_array($fo, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'fo', must be one of '%s'",
                    $fo,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($fo)) {
            throw new \InvalidArgumentException('non-nullable fo cannot be null');
        }

        $this->container['fo'] = $fo;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


