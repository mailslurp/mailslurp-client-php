<?php
/**
 * EmailFeatureSupportResult
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MailSlurp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MailSlurp\Models;

use \ArrayAccess;
use \MailSlurp\ObjectSerializer;

/**
 * EmailFeatureSupportResult Class Doc Comment
 *
 * @category Class
 * @package  MailSlurp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EmailFeatureSupportResult implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EmailFeatureSupportResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'names' => '\MailSlurp\Models\EmailFeatureNames',
        'detected_features' => 'string[]',
        'feature_overviews' => '\MailSlurp\Models\EmailFeatureOverview[]',
        'feature_percentages' => '\MailSlurp\Models\EmailFeatureSupportStatusPercentage[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'names' => null,
        'detected_features' => null,
        'feature_overviews' => null,
        'feature_percentages' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'names' => false,
		'detected_features' => false,
		'feature_overviews' => false,
		'feature_percentages' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'names' => 'names',
        'detected_features' => 'detectedFeatures',
        'feature_overviews' => 'featureOverviews',
        'feature_percentages' => 'featurePercentages'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'names' => 'setNames',
        'detected_features' => 'setDetectedFeatures',
        'feature_overviews' => 'setFeatureOverviews',
        'feature_percentages' => 'setFeaturePercentages'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'names' => 'getNames',
        'detected_features' => 'getDetectedFeatures',
        'feature_overviews' => 'getFeatureOverviews',
        'feature_percentages' => 'getFeaturePercentages'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const DETECTED_FEATURES_AMP = 'amp';
    public const DETECTED_FEATURES_CSS_ACCENT_COLOR = 'css-accent-color';
    public const DETECTED_FEATURES_CSS_ALIGN_ITEMS = 'css-align-items';
    public const DETECTED_FEATURES_CSS_ANIMATION = 'css-animation';
    public const DETECTED_FEATURES_CSS_ASPECT_RATIO = 'css-aspect-ratio';
    public const DETECTED_FEATURES_CSS_AT_FONT_FACE = 'css-at-font-face';
    public const DETECTED_FEATURES_CSS_AT_IMPORT = 'css-at-import';
    public const DETECTED_FEATURES_CSS_AT_KEYFRAMES = 'css-at-keyframes';
    public const DETECTED_FEATURES_CSS_AT_MEDIA = 'css-at-media';
    public const DETECTED_FEATURES_CSS_AT_SUPPORTS = 'css-at-supports';
    public const DETECTED_FEATURES_CSS_BACKGROUND_BLEND_MODE = 'css-background-blend-mode';
    public const DETECTED_FEATURES_CSS_BACKGROUND_CLIP = 'css-background-clip';
    public const DETECTED_FEATURES_CSS_BACKGROUND_COLOR = 'css-background-color';
    public const DETECTED_FEATURES_CSS_BACKGROUND_IMAGE = 'css-background-image';
    public const DETECTED_FEATURES_CSS_BACKGROUND_ORIGIN = 'css-background-origin';
    public const DETECTED_FEATURES_CSS_BACKGROUND_POSITION = 'css-background-position';
    public const DETECTED_FEATURES_CSS_BACKGROUND_REPEAT = 'css-background-repeat';
    public const DETECTED_FEATURES_CSS_BACKGROUND_SIZE = 'css-background-size';
    public const DETECTED_FEATURES_CSS_BACKGROUND = 'css-background';
    public const DETECTED_FEATURES_CSS_BLOCK_INLINE_SIZE = 'css-block-inline-size';
    public const DETECTED_FEATURES_CSS_BORDER_IMAGE = 'css-border-image';
    public const DETECTED_FEATURES_CSS_BORDER_INLINE_BLOCK_INDIVIDUAL = 'css-border-inline-block-individual';
    public const DETECTED_FEATURES_CSS_BORDER_INLINE_BLOCK_LONGHAND = 'css-border-inline-block-longhand';
    public const DETECTED_FEATURES_CSS_BORDER_INLINE_BLOCK = 'css-border-inline-block';
    public const DETECTED_FEATURES_CSS_BORDER_RADIUS_LOGICAL = 'css-border-radius-logical';
    public const DETECTED_FEATURES_CSS_BORDER_RADIUS = 'css-border-radius';
    public const DETECTED_FEATURES_CSS_BORDER = 'css-border';
    public const DETECTED_FEATURES_CSS_BOX_SHADOW = 'css-box-shadow';
    public const DETECTED_FEATURES_CSS_BOX_SIZING = 'css-box-sizing';
    public const DETECTED_FEATURES_CSS_CAPTION_SIDE = 'css-caption-side';
    public const DETECTED_FEATURES_CSS_CLIP_PATH = 'css-clip-path';
    public const DETECTED_FEATURES_CSS_COLUMN_COUNT = 'css-column-count';
    public const DETECTED_FEATURES_CSS_COLUMN_LAYOUT_PROPERTIES = 'css-column-layout-properties';
    public const DETECTED_FEATURES_CSS_DIRECTION = 'css-direction';
    public const DETECTED_FEATURES_CSS_DISPLAY_FLEX = 'css-display-flex';
    public const DETECTED_FEATURES_CSS_DISPLAY_GRID = 'css-display-grid';
    public const DETECTED_FEATURES_CSS_DISPLAY_NONE = 'css-display-none';
    public const DETECTED_FEATURES_CSS_DISPLAY = 'css-display';
    public const DETECTED_FEATURES_CSS_FILTER = 'css-filter';
    public const DETECTED_FEATURES_CSS_FLEX_DIRECTION = 'css-flex-direction';
    public const DETECTED_FEATURES_CSS_FLEX_WRAP = 'css-flex-wrap';
    public const DETECTED_FEATURES_CSS_FLOAT = 'css-float';
    public const DETECTED_FEATURES_CSS_FONT_KERNING = 'css-font-kerning';
    public const DETECTED_FEATURES_CSS_FONT_WEIGHT = 'css-font-weight';
    public const DETECTED_FEATURES_CSS_FONT = 'css-font';
    public const DETECTED_FEATURES_CSS_GAP = 'css-gap';
    public const DETECTED_FEATURES_CSS_GRID_TEMPLATE = 'css-grid-template';
    public const DETECTED_FEATURES_CSS_HEIGHT = 'css-height';
    public const DETECTED_FEATURES_CSS_HYPHENS = 'css-hyphens';
    public const DETECTED_FEATURES_CSS_INLINE_SIZE = 'css-inline-size';
    public const DETECTED_FEATURES_CSS_JUSTIFY_CONTENT = 'css-justify-content';
    public const DETECTED_FEATURES_CSS_LEFT_RIGHT_TOP_BOTTOM = 'css-left-right-top-bottom';
    public const DETECTED_FEATURES_CSS_LETTER_SPACING = 'css-letter-spacing';
    public const DETECTED_FEATURES_CSS_LINE_HEIGHT = 'css-line-height';
    public const DETECTED_FEATURES_CSS_LIST_STYLE_IMAGE = 'css-list-style-image';
    public const DETECTED_FEATURES_CSS_LIST_STYLE_POSITION = 'css-list-style-position';
    public const DETECTED_FEATURES_CSS_LIST_STYLE_TYPE = 'css-list-style-type';
    public const DETECTED_FEATURES_CSS_LIST_STYLE = 'css-list-style';
    public const DETECTED_FEATURES_CSS_MARGIN_BLOCK_START_END = 'css-margin-block-start-end';
    public const DETECTED_FEATURES_CSS_MARGIN_INLINE_BLOCK = 'css-margin-inline-block';
    public const DETECTED_FEATURES_CSS_MARGIN_INLINE_START_END = 'css-margin-inline-start-end';
    public const DETECTED_FEATURES_CSS_MARGIN_INLINE = 'css-margin-inline';
    public const DETECTED_FEATURES_CSS_MARGIN = 'css-margin';
    public const DETECTED_FEATURES_CSS_MAX_BLOCK_SIZE = 'css-max-block-size';
    public const DETECTED_FEATURES_CSS_MAX_HEIGHT = 'css-max-height';
    public const DETECTED_FEATURES_CSS_MAX_WIDTH = 'css-max-width';
    public const DETECTED_FEATURES_CSS_MIN_HEIGHT = 'css-min-height';
    public const DETECTED_FEATURES_CSS_MIN_INLINE_SIZE = 'css-min-inline-size';
    public const DETECTED_FEATURES_CSS_MIN_WIDTH = 'css-min-width';
    public const DETECTED_FEATURES_CSS_MIX_BLEND_MODE = 'css-mix-blend-mode';
    public const DETECTED_FEATURES_CSS_OBJECT_FIT = 'css-object-fit';
    public const DETECTED_FEATURES_CSS_OBJECT_POSITION = 'css-object-position';
    public const DETECTED_FEATURES_CSS_OPACITY = 'css-opacity';
    public const DETECTED_FEATURES_CSS_OUTLINE_OFFSET = 'css-outline-offset';
    public const DETECTED_FEATURES_CSS_OUTLINE = 'css-outline';
    public const DETECTED_FEATURES_CSS_OVERFLOW_WRAP = 'css-overflow-wrap';
    public const DETECTED_FEATURES_CSS_OVERFLOW = 'css-overflow';
    public const DETECTED_FEATURES_CSS_PADDING_BLOCK_START_END = 'css-padding-block-start-end';
    public const DETECTED_FEATURES_CSS_PADDING_INLINE_BLOCK = 'css-padding-inline-block';
    public const DETECTED_FEATURES_CSS_PADDING_INLINE_START_END = 'css-padding-inline-start-end';
    public const DETECTED_FEATURES_CSS_PADDING = 'css-padding';
    public const DETECTED_FEATURES_CSS_POSITION = 'css-position';
    public const DETECTED_FEATURES_CSS_TAB_SIZE = 'css-tab-size';
    public const DETECTED_FEATURES_CSS_TABLE_LAYOUT = 'css-table-layout';
    public const DETECTED_FEATURES_CSS_TEXT_ALIGN_LAST = 'css-text-align-last';
    public const DETECTED_FEATURES_CSS_TEXT_ALIGN = 'css-text-align';
    public const DETECTED_FEATURES_CSS_TEXT_DECORATION_COLOR = 'css-text-decoration-color';
    public const DETECTED_FEATURES_CSS_TEXT_DECORATION_THICKNESS = 'css-text-decoration-thickness';
    public const DETECTED_FEATURES_CSS_TEXT_DECORATION = 'css-text-decoration';
    public const DETECTED_FEATURES_CSS_TEXT_EMPHASIS_POSITION = 'css-text-emphasis-position';
    public const DETECTED_FEATURES_CSS_TEXT_EMPHASIS = 'css-text-emphasis';
    public const DETECTED_FEATURES_CSS_TEXT_INDENT = 'css-text-indent';
    public const DETECTED_FEATURES_CSS_TEXT_OVERFLOW = 'css-text-overflow';
    public const DETECTED_FEATURES_CSS_TEXT_SHADOW = 'css-text-shadow';
    public const DETECTED_FEATURES_CSS_TEXT_TRANSFORM = 'css-text-transform';
    public const DETECTED_FEATURES_CSS_TEXT_UNDERLINE_OFFSET = 'css-text-underline-offset';
    public const DETECTED_FEATURES_CSS_TRANSFORM = 'css-transform';
    public const DETECTED_FEATURES_CSS_VERTICAL_ALIGN = 'css-vertical-align';
    public const DETECTED_FEATURES_CSS_VISIBILITY = 'css-visibility';
    public const DETECTED_FEATURES_CSS_WHITE_SPACE = 'css-white-space';
    public const DETECTED_FEATURES_CSS_WIDTH = 'css-width';
    public const DETECTED_FEATURES_CSS_WORD_BREAK = 'css-word-break';
    public const DETECTED_FEATURES_CSS_WRITING_MODE = 'css-writing-mode';
    public const DETECTED_FEATURES_CSS_Z_INDEX = 'css-z-index';
    public const DETECTED_FEATURES_HTML_ABBR = 'html-abbr';
    public const DETECTED_FEATURES_HTML_ADDRESS = 'html-address';
    public const DETECTED_FEATURES_HTML_ALIGN = 'html-align';
    public const DETECTED_FEATURES_HTML_ANCHOR_LINKS = 'html-anchor-links';
    public const DETECTED_FEATURES_HTML_ARIA_DESCRIBEDBY = 'html-aria-describedby';
    public const DETECTED_FEATURES_HTML_ARIA_HIDDEN = 'html-aria-hidden';
    public const DETECTED_FEATURES_HTML_ARIA_LABEL = 'html-aria-label';
    public const DETECTED_FEATURES_HTML_ARIA_LABELLEDBY = 'html-aria-labelledby';
    public const DETECTED_FEATURES_HTML_ARIA_LIVE = 'html-aria-live';
    public const DETECTED_FEATURES_HTML_AUDIO = 'html-audio';
    public const DETECTED_FEATURES_HTML_BACKGROUND = 'html-background';
    public const DETECTED_FEATURES_HTML_BASE = 'html-base';
    public const DETECTED_FEATURES_HTML_BLOCKQUOTE = 'html-blockquote';
    public const DETECTED_FEATURES_HTML_BODY = 'html-body';
    public const DETECTED_FEATURES_HTML_BUTTON_RESET = 'html-button-reset';
    public const DETECTED_FEATURES_HTML_BUTTON_SUBMIT = 'html-button-submit';
    public const DETECTED_FEATURES_HTML_CODE = 'html-code';
    public const DETECTED_FEATURES_HTML_DEL = 'html-del';
    public const DETECTED_FEATURES_HTML_DFN = 'html-dfn';
    public const DETECTED_FEATURES_HTML_DIALOG = 'html-dialog';
    public const DETECTED_FEATURES_HTML_DIR = 'html-dir';
    public const DETECTED_FEATURES_HTML_DIV = 'html-div';
    public const DETECTED_FEATURES_HTML_DOCTYPE = 'html-doctype';
    public const DETECTED_FEATURES_HTML_FORM = 'html-form';
    public const DETECTED_FEATURES_HTML_H1_H6 = 'html-h1-h6';
    public const DETECTED_FEATURES_HTML_HEIGHT = 'html-height';
    public const DETECTED_FEATURES_HTML_IMAGE_MAPS = 'html-image-maps';
    public const DETECTED_FEATURES_HTML_INPUT_CHECKBOX = 'html-input-checkbox';
    public const DETECTED_FEATURES_HTML_INPUT_HIDDEN = 'html-input-hidden';
    public const DETECTED_FEATURES_HTML_INPUT_RADIO = 'html-input-radio';
    public const DETECTED_FEATURES_HTML_INPUT_RESET = 'html-input-reset';
    public const DETECTED_FEATURES_HTML_INPUT_SUBMIT = 'html-input-submit';
    public const DETECTED_FEATURES_HTML_INPUT_TEXT = 'html-input-text';
    public const DETECTED_FEATURES_HTML_LANG = 'html-lang';
    public const DETECTED_FEATURES_HTML_LINK = 'html-link';
    public const DETECTED_FEATURES_HTML_LISTS = 'html-lists';
    public const DETECTED_FEATURES_HTML_LOADING_ATTRIBUTE = 'html-loading-attribute';
    public const DETECTED_FEATURES_HTML_MAILTO_LINKS = 'html-mailto-links';
    public const DETECTED_FEATURES_HTML_MARQUEE = 'html-marquee';
    public const DETECTED_FEATURES_HTML_METER = 'html-meter';
    public const DETECTED_FEATURES_HTML_OBJECT = 'html-object';
    public const DETECTED_FEATURES_HTML_P = 'html-p';
    public const DETECTED_FEATURES_HTML_PICTURE = 'html-picture';
    public const DETECTED_FEATURES_HTML_PRE = 'html-pre';
    public const DETECTED_FEATURES_HTML_PROGRESS = 'html-progress';
    public const DETECTED_FEATURES_HTML_REQUIRED = 'html-required';
    public const DETECTED_FEATURES_HTML_ROLE = 'html-role';
    public const DETECTED_FEATURES_HTML_RP = 'html-rp';
    public const DETECTED_FEATURES_HTML_RT = 'html-rt';
    public const DETECTED_FEATURES_HTML_RUBY = 'html-ruby';
    public const DETECTED_FEATURES_HTML_SELECT = 'html-select';
    public const DETECTED_FEATURES_HTML_SEMANTICS = 'html-semantics';
    public const DETECTED_FEATURES_HTML_SMALL = 'html-small';
    public const DETECTED_FEATURES_HTML_SPAN = 'html-span';
    public const DETECTED_FEATURES_HTML_SRCSET = 'html-srcset';
    public const DETECTED_FEATURES_HTML_STRIKE = 'html-strike';
    public const DETECTED_FEATURES_HTML_STRONG = 'html-strong';
    public const DETECTED_FEATURES_HTML_STYLE = 'html-style';
    public const DETECTED_FEATURES_HTML_SVG = 'html-svg';
    public const DETECTED_FEATURES_HTML_TABLE = 'html-table';
    public const DETECTED_FEATURES_HTML_TARGET = 'html-target';
    public const DETECTED_FEATURES_HTML_TEXTAREA = 'html-textarea';
    public const DETECTED_FEATURES_HTML_VALIGN = 'html-valign';
    public const DETECTED_FEATURES_HTML_VIDEO = 'html-video';
    public const DETECTED_FEATURES_HTML_WBR = 'html-wbr';
    public const DETECTED_FEATURES_HTML_WIDTH = 'html-width';
    public const DETECTED_FEATURES_IMAGE_AVIF = 'image-avif';
    public const DETECTED_FEATURES_IMAGE_BASE64 = 'image-base64';
    public const DETECTED_FEATURES_IMAGE_BMP = 'image-bmp';
    public const DETECTED_FEATURES_IMAGE_GIF = 'image-gif';
    public const DETECTED_FEATURES_IMAGE_ICO = 'image-ico';
    public const DETECTED_FEATURES_IMAGE_JPG = 'image-jpg';
    public const DETECTED_FEATURES_IMAGE_PNG = 'image-png';
    public const DETECTED_FEATURES_IMAGE_SVG = 'image-svg';
    public const DETECTED_FEATURES_IMAGE_WEBP = 'image-webp';
    public const DETECTED_FEATURES_UNSUPPORTED = 'unsupported';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDetectedFeaturesAllowableValues()
    {
        return [
            self::DETECTED_FEATURES_AMP,
            self::DETECTED_FEATURES_CSS_ACCENT_COLOR,
            self::DETECTED_FEATURES_CSS_ALIGN_ITEMS,
            self::DETECTED_FEATURES_CSS_ANIMATION,
            self::DETECTED_FEATURES_CSS_ASPECT_RATIO,
            self::DETECTED_FEATURES_CSS_AT_FONT_FACE,
            self::DETECTED_FEATURES_CSS_AT_IMPORT,
            self::DETECTED_FEATURES_CSS_AT_KEYFRAMES,
            self::DETECTED_FEATURES_CSS_AT_MEDIA,
            self::DETECTED_FEATURES_CSS_AT_SUPPORTS,
            self::DETECTED_FEATURES_CSS_BACKGROUND_BLEND_MODE,
            self::DETECTED_FEATURES_CSS_BACKGROUND_CLIP,
            self::DETECTED_FEATURES_CSS_BACKGROUND_COLOR,
            self::DETECTED_FEATURES_CSS_BACKGROUND_IMAGE,
            self::DETECTED_FEATURES_CSS_BACKGROUND_ORIGIN,
            self::DETECTED_FEATURES_CSS_BACKGROUND_POSITION,
            self::DETECTED_FEATURES_CSS_BACKGROUND_REPEAT,
            self::DETECTED_FEATURES_CSS_BACKGROUND_SIZE,
            self::DETECTED_FEATURES_CSS_BACKGROUND,
            self::DETECTED_FEATURES_CSS_BLOCK_INLINE_SIZE,
            self::DETECTED_FEATURES_CSS_BORDER_IMAGE,
            self::DETECTED_FEATURES_CSS_BORDER_INLINE_BLOCK_INDIVIDUAL,
            self::DETECTED_FEATURES_CSS_BORDER_INLINE_BLOCK_LONGHAND,
            self::DETECTED_FEATURES_CSS_BORDER_INLINE_BLOCK,
            self::DETECTED_FEATURES_CSS_BORDER_RADIUS_LOGICAL,
            self::DETECTED_FEATURES_CSS_BORDER_RADIUS,
            self::DETECTED_FEATURES_CSS_BORDER,
            self::DETECTED_FEATURES_CSS_BOX_SHADOW,
            self::DETECTED_FEATURES_CSS_BOX_SIZING,
            self::DETECTED_FEATURES_CSS_CAPTION_SIDE,
            self::DETECTED_FEATURES_CSS_CLIP_PATH,
            self::DETECTED_FEATURES_CSS_COLUMN_COUNT,
            self::DETECTED_FEATURES_CSS_COLUMN_LAYOUT_PROPERTIES,
            self::DETECTED_FEATURES_CSS_DIRECTION,
            self::DETECTED_FEATURES_CSS_DISPLAY_FLEX,
            self::DETECTED_FEATURES_CSS_DISPLAY_GRID,
            self::DETECTED_FEATURES_CSS_DISPLAY_NONE,
            self::DETECTED_FEATURES_CSS_DISPLAY,
            self::DETECTED_FEATURES_CSS_FILTER,
            self::DETECTED_FEATURES_CSS_FLEX_DIRECTION,
            self::DETECTED_FEATURES_CSS_FLEX_WRAP,
            self::DETECTED_FEATURES_CSS_FLOAT,
            self::DETECTED_FEATURES_CSS_FONT_KERNING,
            self::DETECTED_FEATURES_CSS_FONT_WEIGHT,
            self::DETECTED_FEATURES_CSS_FONT,
            self::DETECTED_FEATURES_CSS_GAP,
            self::DETECTED_FEATURES_CSS_GRID_TEMPLATE,
            self::DETECTED_FEATURES_CSS_HEIGHT,
            self::DETECTED_FEATURES_CSS_HYPHENS,
            self::DETECTED_FEATURES_CSS_INLINE_SIZE,
            self::DETECTED_FEATURES_CSS_JUSTIFY_CONTENT,
            self::DETECTED_FEATURES_CSS_LEFT_RIGHT_TOP_BOTTOM,
            self::DETECTED_FEATURES_CSS_LETTER_SPACING,
            self::DETECTED_FEATURES_CSS_LINE_HEIGHT,
            self::DETECTED_FEATURES_CSS_LIST_STYLE_IMAGE,
            self::DETECTED_FEATURES_CSS_LIST_STYLE_POSITION,
            self::DETECTED_FEATURES_CSS_LIST_STYLE_TYPE,
            self::DETECTED_FEATURES_CSS_LIST_STYLE,
            self::DETECTED_FEATURES_CSS_MARGIN_BLOCK_START_END,
            self::DETECTED_FEATURES_CSS_MARGIN_INLINE_BLOCK,
            self::DETECTED_FEATURES_CSS_MARGIN_INLINE_START_END,
            self::DETECTED_FEATURES_CSS_MARGIN_INLINE,
            self::DETECTED_FEATURES_CSS_MARGIN,
            self::DETECTED_FEATURES_CSS_MAX_BLOCK_SIZE,
            self::DETECTED_FEATURES_CSS_MAX_HEIGHT,
            self::DETECTED_FEATURES_CSS_MAX_WIDTH,
            self::DETECTED_FEATURES_CSS_MIN_HEIGHT,
            self::DETECTED_FEATURES_CSS_MIN_INLINE_SIZE,
            self::DETECTED_FEATURES_CSS_MIN_WIDTH,
            self::DETECTED_FEATURES_CSS_MIX_BLEND_MODE,
            self::DETECTED_FEATURES_CSS_OBJECT_FIT,
            self::DETECTED_FEATURES_CSS_OBJECT_POSITION,
            self::DETECTED_FEATURES_CSS_OPACITY,
            self::DETECTED_FEATURES_CSS_OUTLINE_OFFSET,
            self::DETECTED_FEATURES_CSS_OUTLINE,
            self::DETECTED_FEATURES_CSS_OVERFLOW_WRAP,
            self::DETECTED_FEATURES_CSS_OVERFLOW,
            self::DETECTED_FEATURES_CSS_PADDING_BLOCK_START_END,
            self::DETECTED_FEATURES_CSS_PADDING_INLINE_BLOCK,
            self::DETECTED_FEATURES_CSS_PADDING_INLINE_START_END,
            self::DETECTED_FEATURES_CSS_PADDING,
            self::DETECTED_FEATURES_CSS_POSITION,
            self::DETECTED_FEATURES_CSS_TAB_SIZE,
            self::DETECTED_FEATURES_CSS_TABLE_LAYOUT,
            self::DETECTED_FEATURES_CSS_TEXT_ALIGN_LAST,
            self::DETECTED_FEATURES_CSS_TEXT_ALIGN,
            self::DETECTED_FEATURES_CSS_TEXT_DECORATION_COLOR,
            self::DETECTED_FEATURES_CSS_TEXT_DECORATION_THICKNESS,
            self::DETECTED_FEATURES_CSS_TEXT_DECORATION,
            self::DETECTED_FEATURES_CSS_TEXT_EMPHASIS_POSITION,
            self::DETECTED_FEATURES_CSS_TEXT_EMPHASIS,
            self::DETECTED_FEATURES_CSS_TEXT_INDENT,
            self::DETECTED_FEATURES_CSS_TEXT_OVERFLOW,
            self::DETECTED_FEATURES_CSS_TEXT_SHADOW,
            self::DETECTED_FEATURES_CSS_TEXT_TRANSFORM,
            self::DETECTED_FEATURES_CSS_TEXT_UNDERLINE_OFFSET,
            self::DETECTED_FEATURES_CSS_TRANSFORM,
            self::DETECTED_FEATURES_CSS_VERTICAL_ALIGN,
            self::DETECTED_FEATURES_CSS_VISIBILITY,
            self::DETECTED_FEATURES_CSS_WHITE_SPACE,
            self::DETECTED_FEATURES_CSS_WIDTH,
            self::DETECTED_FEATURES_CSS_WORD_BREAK,
            self::DETECTED_FEATURES_CSS_WRITING_MODE,
            self::DETECTED_FEATURES_CSS_Z_INDEX,
            self::DETECTED_FEATURES_HTML_ABBR,
            self::DETECTED_FEATURES_HTML_ADDRESS,
            self::DETECTED_FEATURES_HTML_ALIGN,
            self::DETECTED_FEATURES_HTML_ANCHOR_LINKS,
            self::DETECTED_FEATURES_HTML_ARIA_DESCRIBEDBY,
            self::DETECTED_FEATURES_HTML_ARIA_HIDDEN,
            self::DETECTED_FEATURES_HTML_ARIA_LABEL,
            self::DETECTED_FEATURES_HTML_ARIA_LABELLEDBY,
            self::DETECTED_FEATURES_HTML_ARIA_LIVE,
            self::DETECTED_FEATURES_HTML_AUDIO,
            self::DETECTED_FEATURES_HTML_BACKGROUND,
            self::DETECTED_FEATURES_HTML_BASE,
            self::DETECTED_FEATURES_HTML_BLOCKQUOTE,
            self::DETECTED_FEATURES_HTML_BODY,
            self::DETECTED_FEATURES_HTML_BUTTON_RESET,
            self::DETECTED_FEATURES_HTML_BUTTON_SUBMIT,
            self::DETECTED_FEATURES_HTML_CODE,
            self::DETECTED_FEATURES_HTML_DEL,
            self::DETECTED_FEATURES_HTML_DFN,
            self::DETECTED_FEATURES_HTML_DIALOG,
            self::DETECTED_FEATURES_HTML_DIR,
            self::DETECTED_FEATURES_HTML_DIV,
            self::DETECTED_FEATURES_HTML_DOCTYPE,
            self::DETECTED_FEATURES_HTML_FORM,
            self::DETECTED_FEATURES_HTML_H1_H6,
            self::DETECTED_FEATURES_HTML_HEIGHT,
            self::DETECTED_FEATURES_HTML_IMAGE_MAPS,
            self::DETECTED_FEATURES_HTML_INPUT_CHECKBOX,
            self::DETECTED_FEATURES_HTML_INPUT_HIDDEN,
            self::DETECTED_FEATURES_HTML_INPUT_RADIO,
            self::DETECTED_FEATURES_HTML_INPUT_RESET,
            self::DETECTED_FEATURES_HTML_INPUT_SUBMIT,
            self::DETECTED_FEATURES_HTML_INPUT_TEXT,
            self::DETECTED_FEATURES_HTML_LANG,
            self::DETECTED_FEATURES_HTML_LINK,
            self::DETECTED_FEATURES_HTML_LISTS,
            self::DETECTED_FEATURES_HTML_LOADING_ATTRIBUTE,
            self::DETECTED_FEATURES_HTML_MAILTO_LINKS,
            self::DETECTED_FEATURES_HTML_MARQUEE,
            self::DETECTED_FEATURES_HTML_METER,
            self::DETECTED_FEATURES_HTML_OBJECT,
            self::DETECTED_FEATURES_HTML_P,
            self::DETECTED_FEATURES_HTML_PICTURE,
            self::DETECTED_FEATURES_HTML_PRE,
            self::DETECTED_FEATURES_HTML_PROGRESS,
            self::DETECTED_FEATURES_HTML_REQUIRED,
            self::DETECTED_FEATURES_HTML_ROLE,
            self::DETECTED_FEATURES_HTML_RP,
            self::DETECTED_FEATURES_HTML_RT,
            self::DETECTED_FEATURES_HTML_RUBY,
            self::DETECTED_FEATURES_HTML_SELECT,
            self::DETECTED_FEATURES_HTML_SEMANTICS,
            self::DETECTED_FEATURES_HTML_SMALL,
            self::DETECTED_FEATURES_HTML_SPAN,
            self::DETECTED_FEATURES_HTML_SRCSET,
            self::DETECTED_FEATURES_HTML_STRIKE,
            self::DETECTED_FEATURES_HTML_STRONG,
            self::DETECTED_FEATURES_HTML_STYLE,
            self::DETECTED_FEATURES_HTML_SVG,
            self::DETECTED_FEATURES_HTML_TABLE,
            self::DETECTED_FEATURES_HTML_TARGET,
            self::DETECTED_FEATURES_HTML_TEXTAREA,
            self::DETECTED_FEATURES_HTML_VALIGN,
            self::DETECTED_FEATURES_HTML_VIDEO,
            self::DETECTED_FEATURES_HTML_WBR,
            self::DETECTED_FEATURES_HTML_WIDTH,
            self::DETECTED_FEATURES_IMAGE_AVIF,
            self::DETECTED_FEATURES_IMAGE_BASE64,
            self::DETECTED_FEATURES_IMAGE_BMP,
            self::DETECTED_FEATURES_IMAGE_GIF,
            self::DETECTED_FEATURES_IMAGE_ICO,
            self::DETECTED_FEATURES_IMAGE_JPG,
            self::DETECTED_FEATURES_IMAGE_PNG,
            self::DETECTED_FEATURES_IMAGE_SVG,
            self::DETECTED_FEATURES_IMAGE_WEBP,
            self::DETECTED_FEATURES_UNSUPPORTED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('names', $data ?? [], null);
        $this->setIfExists('detected_features', $data ?? [], null);
        $this->setIfExists('feature_overviews', $data ?? [], null);
        $this->setIfExists('feature_percentages', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['names'] === null) {
            $invalidProperties[] = "'names' can't be null";
        }
        if ($this->container['detected_features'] === null) {
            $invalidProperties[] = "'detected_features' can't be null";
        }
        if ($this->container['feature_overviews'] === null) {
            $invalidProperties[] = "'feature_overviews' can't be null";
        }
        if ($this->container['feature_percentages'] === null) {
            $invalidProperties[] = "'feature_percentages' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets names
     *
     * @return \MailSlurp\Models\EmailFeatureNames
     */
    public function getNames()
    {
        return $this->container['names'];
    }

    /**
     * Sets names
     *
     * @param \MailSlurp\Models\EmailFeatureNames $names names
     *
     * @return self
     */
    public function setNames($names)
    {

        if (is_null($names)) {
            throw new \InvalidArgumentException('non-nullable names cannot be null');
        }

        $this->container['names'] = $names;

        return $this;
    }

    /**
     * Gets detected_features
     *
     * @return string[]
     */
    public function getDetectedFeatures()
    {
        return $this->container['detected_features'];
    }

    /**
     * Sets detected_features
     *
     * @param string[] $detected_features detected_features
     *
     * @return self
     */
    public function setDetectedFeatures($detected_features)
    {
        $allowedValues = $this->getDetectedFeaturesAllowableValues();
        if (array_diff($detected_features, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'detected_features', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }



        if (is_null($detected_features)) {
            throw new \InvalidArgumentException('non-nullable detected_features cannot be null');
        }

        $this->container['detected_features'] = $detected_features;

        return $this;
    }

    /**
     * Gets feature_overviews
     *
     * @return \MailSlurp\Models\EmailFeatureOverview[]
     */
    public function getFeatureOverviews()
    {
        return $this->container['feature_overviews'];
    }

    /**
     * Sets feature_overviews
     *
     * @param \MailSlurp\Models\EmailFeatureOverview[] $feature_overviews feature_overviews
     *
     * @return self
     */
    public function setFeatureOverviews($feature_overviews)
    {

        if (is_null($feature_overviews)) {
            throw new \InvalidArgumentException('non-nullable feature_overviews cannot be null');
        }

        $this->container['feature_overviews'] = $feature_overviews;

        return $this;
    }

    /**
     * Gets feature_percentages
     *
     * @return \MailSlurp\Models\EmailFeatureSupportStatusPercentage[]
     */
    public function getFeaturePercentages()
    {
        return $this->container['feature_percentages'];
    }

    /**
     * Sets feature_percentages
     *
     * @param \MailSlurp\Models\EmailFeatureSupportStatusPercentage[] $feature_percentages feature_percentages
     *
     * @return self
     */
    public function setFeaturePercentages($feature_percentages)
    {

        if (is_null($feature_percentages)) {
            throw new \InvalidArgumentException('non-nullable feature_percentages cannot be null');
        }

        $this->container['feature_percentages'] = $feature_percentages;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


