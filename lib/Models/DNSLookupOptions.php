<?php
/**
 * DNSLookupOptions
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MailSlurp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MailSlurp\Models;

use \ArrayAccess;
use \MailSlurp\ObjectSerializer;

/**
 * DNSLookupOptions Class Doc Comment
 *
 * @category Class
 * @description Options for DNS query.
 * @package  MailSlurp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DNSLookupOptions implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DNSLookupOptions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'hostname' => 'string',
        'record_types' => 'string[]',
        'omit_final_dns_dot' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'hostname' => null,
        'record_types' => null,
        'omit_final_dns_dot' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'hostname' => false,
		'record_types' => false,
		'omit_final_dns_dot' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'hostname' => 'hostname',
        'record_types' => 'recordTypes',
        'omit_final_dns_dot' => 'omitFinalDNSDot'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'hostname' => 'setHostname',
        'record_types' => 'setRecordTypes',
        'omit_final_dns_dot' => 'setOmitFinalDnsDot'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'hostname' => 'getHostname',
        'record_types' => 'getRecordTypes',
        'omit_final_dns_dot' => 'getOmitFinalDnsDot'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const RECORD_TYPES_A = 'A';
    public const RECORD_TYPES_NS = 'NS';
    public const RECORD_TYPES_MD = 'MD';
    public const RECORD_TYPES_MF = 'MF';
    public const RECORD_TYPES_CNAME = 'CNAME';
    public const RECORD_TYPES_SOA = 'SOA';
    public const RECORD_TYPES_MB = 'MB';
    public const RECORD_TYPES_MG = 'MG';
    public const RECORD_TYPES_MR = 'MR';
    public const RECORD_TYPES_NULL = 'NULL';
    public const RECORD_TYPES_WKS = 'WKS';
    public const RECORD_TYPES_PTR = 'PTR';
    public const RECORD_TYPES_HINFO = 'HINFO';
    public const RECORD_TYPES_MINFO = 'MINFO';
    public const RECORD_TYPES_MX = 'MX';
    public const RECORD_TYPES_TXT = 'TXT';
    public const RECORD_TYPES_RP = 'RP';
    public const RECORD_TYPES_AFSDB = 'AFSDB';
    public const RECORD_TYPES_X25 = 'X25';
    public const RECORD_TYPES_ISDN = 'ISDN';
    public const RECORD_TYPES_RT = 'RT';
    public const RECORD_TYPES_NSAP = 'NSAP';
    public const RECORD_TYPES_NSAP_PTR = 'NSAP_PTR';
    public const RECORD_TYPES_SIG = 'SIG';
    public const RECORD_TYPES_KEY = 'KEY';
    public const RECORD_TYPES_PX = 'PX';
    public const RECORD_TYPES_GPOS = 'GPOS';
    public const RECORD_TYPES_AAAA = 'AAAA';
    public const RECORD_TYPES_LOC = 'LOC';
    public const RECORD_TYPES_NXT = 'NXT';
    public const RECORD_TYPES_EID = 'EID';
    public const RECORD_TYPES_NIMLOC = 'NIMLOC';
    public const RECORD_TYPES_SRV = 'SRV';
    public const RECORD_TYPES_ATMA = 'ATMA';
    public const RECORD_TYPES_NAPTR = 'NAPTR';
    public const RECORD_TYPES_KX = 'KX';
    public const RECORD_TYPES_CERT = 'CERT';
    public const RECORD_TYPES_A6 = 'A6';
    public const RECORD_TYPES_DNAME = 'DNAME';
    public const RECORD_TYPES_SINK = 'SINK';
    public const RECORD_TYPES_OPT = 'OPT';
    public const RECORD_TYPES_APL = 'APL';
    public const RECORD_TYPES_DS = 'DS';
    public const RECORD_TYPES_SSHFP = 'SSHFP';
    public const RECORD_TYPES_IPSECKEY = 'IPSECKEY';
    public const RECORD_TYPES_RRSIG = 'RRSIG';
    public const RECORD_TYPES_NSEC = 'NSEC';
    public const RECORD_TYPES_DNSKEY = 'DNSKEY';
    public const RECORD_TYPES_DHCID = 'DHCID';
    public const RECORD_TYPES_NSEC3 = 'NSEC3';
    public const RECORD_TYPES_NSEC3_PARAM = 'NSEC3PARAM';
    public const RECORD_TYPES_TLSA = 'TLSA';
    public const RECORD_TYPES_SMIMEA = 'SMIMEA';
    public const RECORD_TYPES_HIP = 'HIP';
    public const RECORD_TYPES_NINFO = 'NINFO';
    public const RECORD_TYPES_RKEY = 'RKEY';
    public const RECORD_TYPES_TALINK = 'TALINK';
    public const RECORD_TYPES_CDS = 'CDS';
    public const RECORD_TYPES_CDNSKEY = 'CDNSKEY';
    public const RECORD_TYPES_OPENPGPKEY = 'OPENPGPKEY';
    public const RECORD_TYPES_CSYNC = 'CSYNC';
    public const RECORD_TYPES_ZONEMD = 'ZONEMD';
    public const RECORD_TYPES_SVCB = 'SVCB';
    public const RECORD_TYPES_HTTPS = 'HTTPS';
    public const RECORD_TYPES_SPF = 'SPF';
    public const RECORD_TYPES_UINFO = 'UINFO';
    public const RECORD_TYPES_UID = 'UID';
    public const RECORD_TYPES_GID = 'GID';
    public const RECORD_TYPES_UNSPEC = 'UNSPEC';
    public const RECORD_TYPES_NID = 'NID';
    public const RECORD_TYPES_L32 = 'L32';
    public const RECORD_TYPES_L64 = 'L64';
    public const RECORD_TYPES_LP = 'LP';
    public const RECORD_TYPES_EUI48 = 'EUI48';
    public const RECORD_TYPES_EUI64 = 'EUI64';
    public const RECORD_TYPES_TKEY = 'TKEY';
    public const RECORD_TYPES_TSIG = 'TSIG';
    public const RECORD_TYPES_IXFR = 'IXFR';
    public const RECORD_TYPES_AXFR = 'AXFR';
    public const RECORD_TYPES_MAILB = 'MAILB';
    public const RECORD_TYPES_MAILA = 'MAILA';
    public const RECORD_TYPES_ANY = 'ANY';
    public const RECORD_TYPES_URI = 'URI';
    public const RECORD_TYPES_CAA = 'CAA';
    public const RECORD_TYPES_AVC = 'AVC';
    public const RECORD_TYPES_DOA = 'DOA';
    public const RECORD_TYPES_AMTRELAY = 'AMTRELAY';
    public const RECORD_TYPES_TA = 'TA';
    public const RECORD_TYPES_DLV = 'DLV';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRecordTypesAllowableValues()
    {
        return [
            self::RECORD_TYPES_A,
            self::RECORD_TYPES_NS,
            self::RECORD_TYPES_MD,
            self::RECORD_TYPES_MF,
            self::RECORD_TYPES_CNAME,
            self::RECORD_TYPES_SOA,
            self::RECORD_TYPES_MB,
            self::RECORD_TYPES_MG,
            self::RECORD_TYPES_MR,
            self::RECORD_TYPES_NULL,
            self::RECORD_TYPES_WKS,
            self::RECORD_TYPES_PTR,
            self::RECORD_TYPES_HINFO,
            self::RECORD_TYPES_MINFO,
            self::RECORD_TYPES_MX,
            self::RECORD_TYPES_TXT,
            self::RECORD_TYPES_RP,
            self::RECORD_TYPES_AFSDB,
            self::RECORD_TYPES_X25,
            self::RECORD_TYPES_ISDN,
            self::RECORD_TYPES_RT,
            self::RECORD_TYPES_NSAP,
            self::RECORD_TYPES_NSAP_PTR,
            self::RECORD_TYPES_SIG,
            self::RECORD_TYPES_KEY,
            self::RECORD_TYPES_PX,
            self::RECORD_TYPES_GPOS,
            self::RECORD_TYPES_AAAA,
            self::RECORD_TYPES_LOC,
            self::RECORD_TYPES_NXT,
            self::RECORD_TYPES_EID,
            self::RECORD_TYPES_NIMLOC,
            self::RECORD_TYPES_SRV,
            self::RECORD_TYPES_ATMA,
            self::RECORD_TYPES_NAPTR,
            self::RECORD_TYPES_KX,
            self::RECORD_TYPES_CERT,
            self::RECORD_TYPES_A6,
            self::RECORD_TYPES_DNAME,
            self::RECORD_TYPES_SINK,
            self::RECORD_TYPES_OPT,
            self::RECORD_TYPES_APL,
            self::RECORD_TYPES_DS,
            self::RECORD_TYPES_SSHFP,
            self::RECORD_TYPES_IPSECKEY,
            self::RECORD_TYPES_RRSIG,
            self::RECORD_TYPES_NSEC,
            self::RECORD_TYPES_DNSKEY,
            self::RECORD_TYPES_DHCID,
            self::RECORD_TYPES_NSEC3,
            self::RECORD_TYPES_NSEC3_PARAM,
            self::RECORD_TYPES_TLSA,
            self::RECORD_TYPES_SMIMEA,
            self::RECORD_TYPES_HIP,
            self::RECORD_TYPES_NINFO,
            self::RECORD_TYPES_RKEY,
            self::RECORD_TYPES_TALINK,
            self::RECORD_TYPES_CDS,
            self::RECORD_TYPES_CDNSKEY,
            self::RECORD_TYPES_OPENPGPKEY,
            self::RECORD_TYPES_CSYNC,
            self::RECORD_TYPES_ZONEMD,
            self::RECORD_TYPES_SVCB,
            self::RECORD_TYPES_HTTPS,
            self::RECORD_TYPES_SPF,
            self::RECORD_TYPES_UINFO,
            self::RECORD_TYPES_UID,
            self::RECORD_TYPES_GID,
            self::RECORD_TYPES_UNSPEC,
            self::RECORD_TYPES_NID,
            self::RECORD_TYPES_L32,
            self::RECORD_TYPES_L64,
            self::RECORD_TYPES_LP,
            self::RECORD_TYPES_EUI48,
            self::RECORD_TYPES_EUI64,
            self::RECORD_TYPES_TKEY,
            self::RECORD_TYPES_TSIG,
            self::RECORD_TYPES_IXFR,
            self::RECORD_TYPES_AXFR,
            self::RECORD_TYPES_MAILB,
            self::RECORD_TYPES_MAILA,
            self::RECORD_TYPES_ANY,
            self::RECORD_TYPES_URI,
            self::RECORD_TYPES_CAA,
            self::RECORD_TYPES_AVC,
            self::RECORD_TYPES_DOA,
            self::RECORD_TYPES_AMTRELAY,
            self::RECORD_TYPES_TA,
            self::RECORD_TYPES_DLV,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('hostname', $data ?? [], null);
        $this->setIfExists('record_types', $data ?? [], null);
        $this->setIfExists('omit_final_dns_dot', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['hostname'] === null) {
            $invalidProperties[] = "'hostname' can't be null";
        }
        if ($this->container['record_types'] === null) {
            $invalidProperties[] = "'record_types' can't be null";
        }
        if ($this->container['omit_final_dns_dot'] === null) {
            $invalidProperties[] = "'omit_final_dns_dot' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets hostname
     *
     * @return string
     */
    public function getHostname()
    {
        return $this->container['hostname'];
    }

    /**
     * Sets hostname
     *
     * @param string $hostname List of record types you wish to query such as MX, DNS, TXT, NS, A etc.
     *
     * @return self
     */
    public function setHostname($hostname)
    {

        if (is_null($hostname)) {
            throw new \InvalidArgumentException('non-nullable hostname cannot be null');
        }

        $this->container['hostname'] = $hostname;

        return $this;
    }

    /**
     * Gets record_types
     *
     * @return string[]
     */
    public function getRecordTypes()
    {
        return $this->container['record_types'];
    }

    /**
     * Sets record_types
     *
     * @param string[] $record_types List of record types you wish to query such as MX, DNS, TXT, NS, A etc.
     *
     * @return self
     */
    public function setRecordTypes($record_types)
    {
        $allowedValues = $this->getRecordTypesAllowableValues();
        if (array_diff($record_types, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'record_types', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($record_types)) {
            throw new \InvalidArgumentException('non-nullable record_types cannot be null');
        }

        $this->container['record_types'] = $record_types;

        return $this;
    }

    /**
     * Gets omit_final_dns_dot
     *
     * @return bool
     */
    public function getOmitFinalDnsDot()
    {
        return $this->container['omit_final_dns_dot'];
    }

    /**
     * Sets omit_final_dns_dot
     *
     * @param bool $omit_final_dns_dot Optionally control whether to omit the final dot in full DNS name values.
     *
     * @return self
     */
    public function setOmitFinalDnsDot($omit_final_dns_dot)
    {

        if (is_null($omit_final_dns_dot)) {
            throw new \InvalidArgumentException('non-nullable omit_final_dns_dot cannot be null');
        }

        $this->container['omit_final_dns_dot'] = $omit_final_dns_dot;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


