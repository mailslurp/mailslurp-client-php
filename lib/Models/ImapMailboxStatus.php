<?php
/**
 * ImapMailboxStatus
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MailSlurp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MailSlurp\Models;

use \ArrayAccess;
use \MailSlurp\ObjectSerializer;

/**
 * ImapMailboxStatus Class Doc Comment
 *
 * @category Class
 * @package  MailSlurp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ImapMailboxStatus implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ImapMailboxStatus';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'read_only' => 'bool',
        'items' => 'array<string,object>',
        'flags' => 'string[]',
        'permanent_flags' => 'string[]',
        'unseen_seq_num' => 'int',
        'messages' => 'int',
        'recent' => 'int',
        'unseen' => 'int',
        'uid_next' => 'int',
        'uid_validity' => 'int',
        'append_limit' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'read_only' => null,
        'items' => null,
        'flags' => null,
        'permanent_flags' => null,
        'unseen_seq_num' => 'int64',
        'messages' => 'int32',
        'recent' => 'int32',
        'unseen' => 'int32',
        'uid_next' => 'int64',
        'uid_validity' => 'int32',
        'append_limit' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => false,
		'read_only' => false,
		'items' => true,
		'flags' => true,
		'permanent_flags' => true,
		'unseen_seq_num' => false,
		'messages' => false,
		'recent' => false,
		'unseen' => false,
		'uid_next' => false,
		'uid_validity' => false,
		'append_limit' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'read_only' => 'readOnly',
        'items' => 'items',
        'flags' => 'flags',
        'permanent_flags' => 'permanentFlags',
        'unseen_seq_num' => 'unseenSeqNum',
        'messages' => 'messages',
        'recent' => 'recent',
        'unseen' => 'unseen',
        'uid_next' => 'uidNext',
        'uid_validity' => 'uidValidity',
        'append_limit' => 'appendLimit'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'read_only' => 'setReadOnly',
        'items' => 'setItems',
        'flags' => 'setFlags',
        'permanent_flags' => 'setPermanentFlags',
        'unseen_seq_num' => 'setUnseenSeqNum',
        'messages' => 'setMessages',
        'recent' => 'setRecent',
        'unseen' => 'setUnseen',
        'uid_next' => 'setUidNext',
        'uid_validity' => 'setUidValidity',
        'append_limit' => 'setAppendLimit'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'read_only' => 'getReadOnly',
        'items' => 'getItems',
        'flags' => 'getFlags',
        'permanent_flags' => 'getPermanentFlags',
        'unseen_seq_num' => 'getUnseenSeqNum',
        'messages' => 'getMessages',
        'recent' => 'getRecent',
        'unseen' => 'getUnseen',
        'uid_next' => 'getUidNext',
        'uid_validity' => 'getUidValidity',
        'append_limit' => 'getAppendLimit'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('read_only', $data ?? [], null);
        $this->setIfExists('items', $data ?? [], null);
        $this->setIfExists('flags', $data ?? [], null);
        $this->setIfExists('permanent_flags', $data ?? [], null);
        $this->setIfExists('unseen_seq_num', $data ?? [], null);
        $this->setIfExists('messages', $data ?? [], null);
        $this->setIfExists('recent', $data ?? [], null);
        $this->setIfExists('unseen', $data ?? [], null);
        $this->setIfExists('uid_next', $data ?? [], null);
        $this->setIfExists('uid_validity', $data ?? [], null);
        $this->setIfExists('append_limit', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['read_only'] === null) {
            $invalidProperties[] = "'read_only' can't be null";
        }
        if ($this->container['items'] === null) {
            $invalidProperties[] = "'items' can't be null";
        }
        if ($this->container['flags'] === null) {
            $invalidProperties[] = "'flags' can't be null";
        }
        if ($this->container['permanent_flags'] === null) {
            $invalidProperties[] = "'permanent_flags' can't be null";
        }
        if ($this->container['unseen_seq_num'] === null) {
            $invalidProperties[] = "'unseen_seq_num' can't be null";
        }
        if ($this->container['messages'] === null) {
            $invalidProperties[] = "'messages' can't be null";
        }
        if ($this->container['recent'] === null) {
            $invalidProperties[] = "'recent' can't be null";
        }
        if ($this->container['unseen'] === null) {
            $invalidProperties[] = "'unseen' can't be null";
        }
        if ($this->container['uid_next'] === null) {
            $invalidProperties[] = "'uid_next' can't be null";
        }
        if ($this->container['uid_validity'] === null) {
            $invalidProperties[] = "'uid_validity' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The mailbox name.
     *
     * @return self
     */
    public function setName($name)
    {

        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets read_only
     *
     * @return bool
     */
    public function getReadOnly()
    {
        return $this->container['read_only'];
    }

    /**
     * Sets read_only
     *
     * @param bool $read_only True if the mailbox is open in read-only mode.
     *
     * @return self
     */
    public function setReadOnly($read_only)
    {

        if (is_null($read_only)) {
            throw new \InvalidArgumentException('non-nullable read_only cannot be null');
        }

        $this->container['read_only'] = $read_only;

        return $this;
    }

    /**
     * Gets items
     *
     * @return array<string,object>
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     *
     * @param array<string,object> $items The mailbox items that are currently filled in. This map's values should not be used directly, they must only be used by libraries implementing extensions of the IMAP protocol.
     *
     * @return self
     */
    public function setItems($items)
    {

        if (is_null($items)) {
            array_push($this->openAPINullablesSetToNull, 'items');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('items', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['items'] = $items;

        return $this;
    }

    /**
     * Gets flags
     *
     * @return string[]
     */
    public function getFlags()
    {
        return $this->container['flags'];
    }

    /**
     * Sets flags
     *
     * @param string[] $flags The mailbox flags.
     *
     * @return self
     */
    public function setFlags($flags)
    {

        if (is_null($flags)) {
            array_push($this->openAPINullablesSetToNull, 'flags');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('flags', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['flags'] = $flags;

        return $this;
    }

    /**
     * Gets permanent_flags
     *
     * @return string[]
     */
    public function getPermanentFlags()
    {
        return $this->container['permanent_flags'];
    }

    /**
     * Sets permanent_flags
     *
     * @param string[] $permanent_flags The mailbox permanent flags.
     *
     * @return self
     */
    public function setPermanentFlags($permanent_flags)
    {

        if (is_null($permanent_flags)) {
            array_push($this->openAPINullablesSetToNull, 'permanent_flags');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('permanent_flags', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['permanent_flags'] = $permanent_flags;

        return $this;
    }

    /**
     * Gets unseen_seq_num
     *
     * @return int
     */
    public function getUnseenSeqNum()
    {
        return $this->container['unseen_seq_num'];
    }

    /**
     * Sets unseen_seq_num
     *
     * @param int $unseen_seq_num The sequence number of the first unseen message in the mailbox.
     *
     * @return self
     */
    public function setUnseenSeqNum($unseen_seq_num)
    {

        if (is_null($unseen_seq_num)) {
            throw new \InvalidArgumentException('non-nullable unseen_seq_num cannot be null');
        }

        $this->container['unseen_seq_num'] = $unseen_seq_num;

        return $this;
    }

    /**
     * Gets messages
     *
     * @return int
     */
    public function getMessages()
    {
        return $this->container['messages'];
    }

    /**
     * Sets messages
     *
     * @param int $messages The number of messages in this mailbox.
     *
     * @return self
     */
    public function setMessages($messages)
    {

        if (is_null($messages)) {
            throw new \InvalidArgumentException('non-nullable messages cannot be null');
        }

        $this->container['messages'] = $messages;

        return $this;
    }

    /**
     * Gets recent
     *
     * @return int
     */
    public function getRecent()
    {
        return $this->container['recent'];
    }

    /**
     * Sets recent
     *
     * @param int $recent The number of messages not seen since the last time the mailbox was opened.
     *
     * @return self
     */
    public function setRecent($recent)
    {

        if (is_null($recent)) {
            throw new \InvalidArgumentException('non-nullable recent cannot be null');
        }

        $this->container['recent'] = $recent;

        return $this;
    }

    /**
     * Gets unseen
     *
     * @return int
     */
    public function getUnseen()
    {
        return $this->container['unseen'];
    }

    /**
     * Sets unseen
     *
     * @param int $unseen The number of unread messages.
     *
     * @return self
     */
    public function setUnseen($unseen)
    {

        if (is_null($unseen)) {
            throw new \InvalidArgumentException('non-nullable unseen cannot be null');
        }

        $this->container['unseen'] = $unseen;

        return $this;
    }

    /**
     * Gets uid_next
     *
     * @return int
     */
    public function getUidNext()
    {
        return $this->container['uid_next'];
    }

    /**
     * Sets uid_next
     *
     * @param int $uid_next The next UID.
     *
     * @return self
     */
    public function setUidNext($uid_next)
    {

        if (is_null($uid_next)) {
            throw new \InvalidArgumentException('non-nullable uid_next cannot be null');
        }

        $this->container['uid_next'] = $uid_next;

        return $this;
    }

    /**
     * Gets uid_validity
     *
     * @return int
     */
    public function getUidValidity()
    {
        return $this->container['uid_validity'];
    }

    /**
     * Sets uid_validity
     *
     * @param int $uid_validity Together with a UID, it is a unique identifier for a message. Must be greater than or equal to 1.
     *
     * @return self
     */
    public function setUidValidity($uid_validity)
    {

        if (is_null($uid_validity)) {
            throw new \InvalidArgumentException('non-nullable uid_validity cannot be null');
        }

        $this->container['uid_validity'] = $uid_validity;

        return $this;
    }

    /**
     * Gets append_limit
     *
     * @return int|null
     */
    public function getAppendLimit()
    {
        return $this->container['append_limit'];
    }

    /**
     * Sets append_limit
     *
     * @param int|null $append_limit Per-mailbox limit of message size. Set only if server supports the APPENDLIMIT extension
     *
     * @return self
     */
    public function setAppendLimit($append_limit)
    {

        if (is_null($append_limit)) {
            array_push($this->openAPINullablesSetToNull, 'append_limit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('append_limit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['append_limit'] = $append_limit;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


