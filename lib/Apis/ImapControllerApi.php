<?php
/**
 * ImapControllerApi
 * PHP version 7.4
 *
 * @category Class
 * @package  MailSlurp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MailSlurp\Apis;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use MailSlurp\ApiException;
use MailSlurp\Configuration;
use MailSlurp\HeaderSelector;
use MailSlurp\ObjectSerializer;

/**
 * ImapControllerApi Class Doc Comment
 *
 * @category Class
 * @package  MailSlurp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ImapControllerApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'imapServerFetch' => [
            'application/json',
        ],
        'imapServerList' => [
            'application/json',
        ],
        'imapServerSearch' => [
            'application/json',
        ],
        'imapServerUpdateFlags' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation imapServerFetch
     *
     * Fetch message in an inbox
     *
     * @param  int $seq_num seq_num (required)
     * @param  string $inbox_id Inbox ID to search (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['imapServerFetch'] to see the possible values for this operation
     *
     * @throws \MailSlurp\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MailSlurp\Models\ImapServerFetchResult
     */
    public function imapServerFetch($seq_num, $inbox_id = null, string $contentType = self::contentTypes['imapServerFetch'][0])
    {
        list($response) = $this->imapServerFetchWithHttpInfo($seq_num, $inbox_id, $contentType);
        return $response;
    }

    /**
     * Operation imapServerFetchWithHttpInfo
     *
     * Fetch message in an inbox
     *
     * @param  int $seq_num (required)
     * @param  string $inbox_id Inbox ID to search (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['imapServerFetch'] to see the possible values for this operation
     *
     * @throws \MailSlurp\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MailSlurp\Models\ImapServerFetchResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function imapServerFetchWithHttpInfo($seq_num, $inbox_id = null, string $contentType = self::contentTypes['imapServerFetch'][0])
    {
        $request = $this->imapServerFetchRequest($seq_num, $inbox_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MailSlurp\Models\ImapServerFetchResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MailSlurp\Models\ImapServerFetchResult' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MailSlurp\Models\ImapServerFetchResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MailSlurp\Models\ImapServerFetchResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MailSlurp\Models\ImapServerFetchResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation imapServerFetchAsync
     *
     * Fetch message in an inbox
     *
     * @param  int $seq_num (required)
     * @param  string $inbox_id Inbox ID to search (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['imapServerFetch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function imapServerFetchAsync($seq_num, $inbox_id = null, string $contentType = self::contentTypes['imapServerFetch'][0])
    {
        return $this->imapServerFetchAsyncWithHttpInfo($seq_num, $inbox_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation imapServerFetchAsyncWithHttpInfo
     *
     * Fetch message in an inbox
     *
     * @param  int $seq_num (required)
     * @param  string $inbox_id Inbox ID to search (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['imapServerFetch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function imapServerFetchAsyncWithHttpInfo($seq_num, $inbox_id = null, string $contentType = self::contentTypes['imapServerFetch'][0])
    {
        $returnType = '\MailSlurp\Models\ImapServerFetchResult';
        $request = $this->imapServerFetchRequest($seq_num, $inbox_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'imapServerFetch'
     *
     * @param  int $seq_num (required)
     * @param  string $inbox_id Inbox ID to search (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['imapServerFetch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function imapServerFetchRequest($seq_num, $inbox_id = null, string $contentType = self::contentTypes['imapServerFetch'][0])
    {

        // verify the required parameter 'seq_num' is set
        if ($seq_num === null || (is_array($seq_num) && count($seq_num) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $seq_num when calling imapServerFetch'
            );
        }



        $resourcePath = '/imap/server/fetch';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $inbox_id,
            'inboxId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $seq_num,
            'seqNum', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation imapServerList
     *
     * List messages in an inbox
     *
     * @param  \MailSlurp\Models\ImapServerListOptions $imap_server_list_options imap_server_list_options (required)
     * @param  string $inbox_id Inbox ID to list (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['imapServerList'] to see the possible values for this operation
     *
     * @throws \MailSlurp\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MailSlurp\Models\ImapServerListResult
     */
    public function imapServerList($imap_server_list_options, $inbox_id = null, string $contentType = self::contentTypes['imapServerList'][0])
    {
        list($response) = $this->imapServerListWithHttpInfo($imap_server_list_options, $inbox_id, $contentType);
        return $response;
    }

    /**
     * Operation imapServerListWithHttpInfo
     *
     * List messages in an inbox
     *
     * @param  \MailSlurp\Models\ImapServerListOptions $imap_server_list_options (required)
     * @param  string $inbox_id Inbox ID to list (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['imapServerList'] to see the possible values for this operation
     *
     * @throws \MailSlurp\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MailSlurp\Models\ImapServerListResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function imapServerListWithHttpInfo($imap_server_list_options, $inbox_id = null, string $contentType = self::contentTypes['imapServerList'][0])
    {
        $request = $this->imapServerListRequest($imap_server_list_options, $inbox_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MailSlurp\Models\ImapServerListResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MailSlurp\Models\ImapServerListResult' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MailSlurp\Models\ImapServerListResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MailSlurp\Models\ImapServerListResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MailSlurp\Models\ImapServerListResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation imapServerListAsync
     *
     * List messages in an inbox
     *
     * @param  \MailSlurp\Models\ImapServerListOptions $imap_server_list_options (required)
     * @param  string $inbox_id Inbox ID to list (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['imapServerList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function imapServerListAsync($imap_server_list_options, $inbox_id = null, string $contentType = self::contentTypes['imapServerList'][0])
    {
        return $this->imapServerListAsyncWithHttpInfo($imap_server_list_options, $inbox_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation imapServerListAsyncWithHttpInfo
     *
     * List messages in an inbox
     *
     * @param  \MailSlurp\Models\ImapServerListOptions $imap_server_list_options (required)
     * @param  string $inbox_id Inbox ID to list (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['imapServerList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function imapServerListAsyncWithHttpInfo($imap_server_list_options, $inbox_id = null, string $contentType = self::contentTypes['imapServerList'][0])
    {
        $returnType = '\MailSlurp\Models\ImapServerListResult';
        $request = $this->imapServerListRequest($imap_server_list_options, $inbox_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'imapServerList'
     *
     * @param  \MailSlurp\Models\ImapServerListOptions $imap_server_list_options (required)
     * @param  string $inbox_id Inbox ID to list (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['imapServerList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function imapServerListRequest($imap_server_list_options, $inbox_id = null, string $contentType = self::contentTypes['imapServerList'][0])
    {

        // verify the required parameter 'imap_server_list_options' is set
        if ($imap_server_list_options === null || (is_array($imap_server_list_options) && count($imap_server_list_options) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $imap_server_list_options when calling imapServerList'
            );
        }



        $resourcePath = '/imap/server/list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $inbox_id,
            'inboxId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($imap_server_list_options)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($imap_server_list_options));
            } else {
                $httpBody = $imap_server_list_options;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation imapServerSearch
     *
     * Search messages in an inbox
     *
     * @param  \MailSlurp\Models\ImapServerSearchOptions $imap_server_search_options imap_server_search_options (required)
     * @param  string $inbox_id Inbox ID to search (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['imapServerSearch'] to see the possible values for this operation
     *
     * @throws \MailSlurp\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MailSlurp\Models\ImapServerSearchResult
     */
    public function imapServerSearch($imap_server_search_options, $inbox_id = null, string $contentType = self::contentTypes['imapServerSearch'][0])
    {
        list($response) = $this->imapServerSearchWithHttpInfo($imap_server_search_options, $inbox_id, $contentType);
        return $response;
    }

    /**
     * Operation imapServerSearchWithHttpInfo
     *
     * Search messages in an inbox
     *
     * @param  \MailSlurp\Models\ImapServerSearchOptions $imap_server_search_options (required)
     * @param  string $inbox_id Inbox ID to search (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['imapServerSearch'] to see the possible values for this operation
     *
     * @throws \MailSlurp\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MailSlurp\Models\ImapServerSearchResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function imapServerSearchWithHttpInfo($imap_server_search_options, $inbox_id = null, string $contentType = self::contentTypes['imapServerSearch'][0])
    {
        $request = $this->imapServerSearchRequest($imap_server_search_options, $inbox_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MailSlurp\Models\ImapServerSearchResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MailSlurp\Models\ImapServerSearchResult' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MailSlurp\Models\ImapServerSearchResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MailSlurp\Models\ImapServerSearchResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MailSlurp\Models\ImapServerSearchResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation imapServerSearchAsync
     *
     * Search messages in an inbox
     *
     * @param  \MailSlurp\Models\ImapServerSearchOptions $imap_server_search_options (required)
     * @param  string $inbox_id Inbox ID to search (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['imapServerSearch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function imapServerSearchAsync($imap_server_search_options, $inbox_id = null, string $contentType = self::contentTypes['imapServerSearch'][0])
    {
        return $this->imapServerSearchAsyncWithHttpInfo($imap_server_search_options, $inbox_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation imapServerSearchAsyncWithHttpInfo
     *
     * Search messages in an inbox
     *
     * @param  \MailSlurp\Models\ImapServerSearchOptions $imap_server_search_options (required)
     * @param  string $inbox_id Inbox ID to search (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['imapServerSearch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function imapServerSearchAsyncWithHttpInfo($imap_server_search_options, $inbox_id = null, string $contentType = self::contentTypes['imapServerSearch'][0])
    {
        $returnType = '\MailSlurp\Models\ImapServerSearchResult';
        $request = $this->imapServerSearchRequest($imap_server_search_options, $inbox_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'imapServerSearch'
     *
     * @param  \MailSlurp\Models\ImapServerSearchOptions $imap_server_search_options (required)
     * @param  string $inbox_id Inbox ID to search (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['imapServerSearch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function imapServerSearchRequest($imap_server_search_options, $inbox_id = null, string $contentType = self::contentTypes['imapServerSearch'][0])
    {

        // verify the required parameter 'imap_server_search_options' is set
        if ($imap_server_search_options === null || (is_array($imap_server_search_options) && count($imap_server_search_options) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $imap_server_search_options when calling imapServerSearch'
            );
        }



        $resourcePath = '/imap/server/search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $inbox_id,
            'inboxId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($imap_server_search_options)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($imap_server_search_options));
            } else {
                $httpBody = $imap_server_search_options;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation imapServerUpdateFlags
     *
     * @param  \MailSlurp\Models\ImapUpdateFlagsOptions $imap_update_flags_options imap_update_flags_options (required)
     * @param  string $inbox_id inbox_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['imapServerUpdateFlags'] to see the possible values for this operation
     *
     * @throws \MailSlurp\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function imapServerUpdateFlags($imap_update_flags_options, $inbox_id = null, string $contentType = self::contentTypes['imapServerUpdateFlags'][0])
    {
        $this->imapServerUpdateFlagsWithHttpInfo($imap_update_flags_options, $inbox_id, $contentType);
    }

    /**
     * Operation imapServerUpdateFlagsWithHttpInfo
     *
     * @param  \MailSlurp\Models\ImapUpdateFlagsOptions $imap_update_flags_options (required)
     * @param  string $inbox_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['imapServerUpdateFlags'] to see the possible values for this operation
     *
     * @throws \MailSlurp\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function imapServerUpdateFlagsWithHttpInfo($imap_update_flags_options, $inbox_id = null, string $contentType = self::contentTypes['imapServerUpdateFlags'][0])
    {
        $request = $this->imapServerUpdateFlagsRequest($imap_update_flags_options, $inbox_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation imapServerUpdateFlagsAsync
     *
     * @param  \MailSlurp\Models\ImapUpdateFlagsOptions $imap_update_flags_options (required)
     * @param  string $inbox_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['imapServerUpdateFlags'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function imapServerUpdateFlagsAsync($imap_update_flags_options, $inbox_id = null, string $contentType = self::contentTypes['imapServerUpdateFlags'][0])
    {
        return $this->imapServerUpdateFlagsAsyncWithHttpInfo($imap_update_flags_options, $inbox_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation imapServerUpdateFlagsAsyncWithHttpInfo
     *
     * @param  \MailSlurp\Models\ImapUpdateFlagsOptions $imap_update_flags_options (required)
     * @param  string $inbox_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['imapServerUpdateFlags'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function imapServerUpdateFlagsAsyncWithHttpInfo($imap_update_flags_options, $inbox_id = null, string $contentType = self::contentTypes['imapServerUpdateFlags'][0])
    {
        $returnType = '';
        $request = $this->imapServerUpdateFlagsRequest($imap_update_flags_options, $inbox_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'imapServerUpdateFlags'
     *
     * @param  \MailSlurp\Models\ImapUpdateFlagsOptions $imap_update_flags_options (required)
     * @param  string $inbox_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['imapServerUpdateFlags'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function imapServerUpdateFlagsRequest($imap_update_flags_options, $inbox_id = null, string $contentType = self::contentTypes['imapServerUpdateFlags'][0])
    {

        // verify the required parameter 'imap_update_flags_options' is set
        if ($imap_update_flags_options === null || (is_array($imap_update_flags_options) && count($imap_update_flags_options) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $imap_update_flags_options when calling imapServerUpdateFlags'
            );
        }



        $resourcePath = '/imap/server/update-flags';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $inbox_id,
            'inboxId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($imap_update_flags_options)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($imap_update_flags_options));
            } else {
                $httpBody = $imap_update_flags_options;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
