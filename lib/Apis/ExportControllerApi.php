<?php
/**
 * ExportControllerApi
 * PHP version 7.4
 *
 * @category Class
 * @package  MailSlurp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MailSlurp\Apis;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use MailSlurp\ApiException;
use MailSlurp\Configuration;
use MailSlurp\HeaderSelector;
use MailSlurp\ObjectSerializer;

/**
 * ExportControllerApi Class Doc Comment
 *
 * @category Class
 * @package  MailSlurp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ExportControllerApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'exportEntities' => [
            'application/json',
        ],
        'getExportLink' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation exportEntities
     *
     * Export inboxes link callable via browser
     *
     * @param  string $export_type export_type (required)
     * @param  string $api_key api_key (required)
     * @param  string $output_format output_format (required)
     * @param  string $filter filter (optional)
     * @param  string $list_separator_token list_separator_token (optional)
     * @param  bool $exclude_previously_exported exclude_previously_exported (optional)
     * @param  \DateTime $created_earliest_time created_earliest_time (optional)
     * @param  \DateTime $created_oldest_time created_oldest_time (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exportEntities'] to see the possible values for this operation
     *
     * @throws \MailSlurp\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function exportEntities($export_type, $api_key, $output_format, $filter = null, $list_separator_token = null, $exclude_previously_exported = null, $created_earliest_time = null, $created_oldest_time = null, string $contentType = self::contentTypes['exportEntities'][0])
    {
        list($response) = $this->exportEntitiesWithHttpInfo($export_type, $api_key, $output_format, $filter, $list_separator_token, $exclude_previously_exported, $created_earliest_time, $created_oldest_time, $contentType);
        return $response;
    }

    /**
     * Operation exportEntitiesWithHttpInfo
     *
     * Export inboxes link callable via browser
     *
     * @param  string $export_type (required)
     * @param  string $api_key (required)
     * @param  string $output_format (required)
     * @param  string $filter (optional)
     * @param  string $list_separator_token (optional)
     * @param  bool $exclude_previously_exported (optional)
     * @param  \DateTime $created_earliest_time (optional)
     * @param  \DateTime $created_oldest_time (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exportEntities'] to see the possible values for this operation
     *
     * @throws \MailSlurp\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function exportEntitiesWithHttpInfo($export_type, $api_key, $output_format, $filter = null, $list_separator_token = null, $exclude_previously_exported = null, $created_earliest_time = null, $created_oldest_time = null, string $contentType = self::contentTypes['exportEntities'][0])
    {
        $request = $this->exportEntitiesRequest($export_type, $api_key, $output_format, $filter, $list_separator_token, $exclude_previously_exported, $created_earliest_time, $created_oldest_time, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation exportEntitiesAsync
     *
     * Export inboxes link callable via browser
     *
     * @param  string $export_type (required)
     * @param  string $api_key (required)
     * @param  string $output_format (required)
     * @param  string $filter (optional)
     * @param  string $list_separator_token (optional)
     * @param  bool $exclude_previously_exported (optional)
     * @param  \DateTime $created_earliest_time (optional)
     * @param  \DateTime $created_oldest_time (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exportEntities'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function exportEntitiesAsync($export_type, $api_key, $output_format, $filter = null, $list_separator_token = null, $exclude_previously_exported = null, $created_earliest_time = null, $created_oldest_time = null, string $contentType = self::contentTypes['exportEntities'][0])
    {
        return $this->exportEntitiesAsyncWithHttpInfo($export_type, $api_key, $output_format, $filter, $list_separator_token, $exclude_previously_exported, $created_earliest_time, $created_oldest_time, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation exportEntitiesAsyncWithHttpInfo
     *
     * Export inboxes link callable via browser
     *
     * @param  string $export_type (required)
     * @param  string $api_key (required)
     * @param  string $output_format (required)
     * @param  string $filter (optional)
     * @param  string $list_separator_token (optional)
     * @param  bool $exclude_previously_exported (optional)
     * @param  \DateTime $created_earliest_time (optional)
     * @param  \DateTime $created_oldest_time (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exportEntities'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function exportEntitiesAsyncWithHttpInfo($export_type, $api_key, $output_format, $filter = null, $list_separator_token = null, $exclude_previously_exported = null, $created_earliest_time = null, $created_oldest_time = null, string $contentType = self::contentTypes['exportEntities'][0])
    {
        $returnType = 'string';
        $request = $this->exportEntitiesRequest($export_type, $api_key, $output_format, $filter, $list_separator_token, $exclude_previously_exported, $created_earliest_time, $created_oldest_time, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'exportEntities'
     *
     * @param  string $export_type (required)
     * @param  string $api_key (required)
     * @param  string $output_format (required)
     * @param  string $filter (optional)
     * @param  string $list_separator_token (optional)
     * @param  bool $exclude_previously_exported (optional)
     * @param  \DateTime $created_earliest_time (optional)
     * @param  \DateTime $created_oldest_time (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exportEntities'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function exportEntitiesRequest($export_type, $api_key, $output_format, $filter = null, $list_separator_token = null, $exclude_previously_exported = null, $created_earliest_time = null, $created_oldest_time = null, string $contentType = self::contentTypes['exportEntities'][0])
    {

        // verify the required parameter 'export_type' is set
        if ($export_type === null || (is_array($export_type) && count($export_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $export_type when calling exportEntities'
            );
        }

        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling exportEntities'
            );
        }

        // verify the required parameter 'output_format' is set
        if ($output_format === null || (is_array($output_format) && count($output_format) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $output_format when calling exportEntities'
            );
        }







        $resourcePath = '/export';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $export_type,
            'exportType', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $api_key,
            'apiKey', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $output_format,
            'outputFormat', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            'filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $list_separator_token,
            'listSeparatorToken', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $exclude_previously_exported,
            'excludePreviouslyExported', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $created_earliest_time,
            'createdEarliestTime', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $created_oldest_time,
            'createdOldestTime', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getExportLink
     *
     * Get export link
     *
     * @param  string $export_type export_type (required)
     * @param  \MailSlurp\Models\ExportOptions $export_options export_options (required)
     * @param  string $api_key api_key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getExportLink'] to see the possible values for this operation
     *
     * @throws \MailSlurp\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MailSlurp\Models\ExportLink
     */
    public function getExportLink($export_type, $export_options, $api_key = null, string $contentType = self::contentTypes['getExportLink'][0])
    {
        list($response) = $this->getExportLinkWithHttpInfo($export_type, $export_options, $api_key, $contentType);
        return $response;
    }

    /**
     * Operation getExportLinkWithHttpInfo
     *
     * Get export link
     *
     * @param  string $export_type (required)
     * @param  \MailSlurp\Models\ExportOptions $export_options (required)
     * @param  string $api_key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getExportLink'] to see the possible values for this operation
     *
     * @throws \MailSlurp\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MailSlurp\Models\ExportLink, HTTP status code, HTTP response headers (array of strings)
     */
    public function getExportLinkWithHttpInfo($export_type, $export_options, $api_key = null, string $contentType = self::contentTypes['getExportLink'][0])
    {
        $request = $this->getExportLinkRequest($export_type, $export_options, $api_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\MailSlurp\Models\ExportLink' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MailSlurp\Models\ExportLink' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MailSlurp\Models\ExportLink', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MailSlurp\Models\ExportLink';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MailSlurp\Models\ExportLink',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getExportLinkAsync
     *
     * Get export link
     *
     * @param  string $export_type (required)
     * @param  \MailSlurp\Models\ExportOptions $export_options (required)
     * @param  string $api_key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getExportLink'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getExportLinkAsync($export_type, $export_options, $api_key = null, string $contentType = self::contentTypes['getExportLink'][0])
    {
        return $this->getExportLinkAsyncWithHttpInfo($export_type, $export_options, $api_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getExportLinkAsyncWithHttpInfo
     *
     * Get export link
     *
     * @param  string $export_type (required)
     * @param  \MailSlurp\Models\ExportOptions $export_options (required)
     * @param  string $api_key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getExportLink'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getExportLinkAsyncWithHttpInfo($export_type, $export_options, $api_key = null, string $contentType = self::contentTypes['getExportLink'][0])
    {
        $returnType = '\MailSlurp\Models\ExportLink';
        $request = $this->getExportLinkRequest($export_type, $export_options, $api_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getExportLink'
     *
     * @param  string $export_type (required)
     * @param  \MailSlurp\Models\ExportOptions $export_options (required)
     * @param  string $api_key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getExportLink'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getExportLinkRequest($export_type, $export_options, $api_key = null, string $contentType = self::contentTypes['getExportLink'][0])
    {

        // verify the required parameter 'export_type' is set
        if ($export_type === null || (is_array($export_type) && count($export_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $export_type when calling getExportLink'
            );
        }

        // verify the required parameter 'export_options' is set
        if ($export_options === null || (is_array($export_options) && count($export_options) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $export_options when calling getExportLink'
            );
        }



        $resourcePath = '/export';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $export_type,
            'exportType', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $api_key,
            'apiKey', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($export_options)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($export_options));
            } else {
                $httpBody = $export_options;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
