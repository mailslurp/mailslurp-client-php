<?php
/**
 * WaitForControllerApi
 * PHP version 5
 *
 * @category Class
 * @package  MailSlurp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MailSlurp\Apis;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use MailSlurp\ApiException;
use MailSlurp\Configuration;
use MailSlurp\HeaderSelector;
use MailSlurp\ObjectSerializer;

/**
 * WaitForControllerApi Class Doc Comment
 *
 * @category Class
 * @package  MailSlurp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class WaitForControllerApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation waitFor
     *
     * Wait for an email to match the provided filter conditions such as subject contains keyword.
     *
     * @param  \MailSlurp\Models\WaitForConditions $wait_for_conditions wait_for_conditions (required)
     *
     * @throws \MailSlurp\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MailSlurp\Models\EmailPreview[]
     */
    public function waitFor($wait_for_conditions)
    {
        list($response) = $this->waitForWithHttpInfo($wait_for_conditions);
        return $response;
    }

    /**
     * Operation waitForWithHttpInfo
     *
     * Wait for an email to match the provided filter conditions such as subject contains keyword.
     *
     * @param  \MailSlurp\Models\WaitForConditions $wait_for_conditions (required)
     *
     * @throws \MailSlurp\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MailSlurp\Models\EmailPreview[], HTTP status code, HTTP response headers (array of strings)
     */
    public function waitForWithHttpInfo($wait_for_conditions)
    {
        $request = $this->waitForRequest($wait_for_conditions);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\MailSlurp\Models\EmailPreview[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MailSlurp\Models\EmailPreview[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MailSlurp\Models\EmailPreview[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MailSlurp\Models\EmailPreview[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation waitForAsync
     *
     * Wait for an email to match the provided filter conditions such as subject contains keyword.
     *
     * @param  \MailSlurp\Models\WaitForConditions $wait_for_conditions (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function waitForAsync($wait_for_conditions)
    {
        return $this->waitForAsyncWithHttpInfo($wait_for_conditions)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation waitForAsyncWithHttpInfo
     *
     * Wait for an email to match the provided filter conditions such as subject contains keyword.
     *
     * @param  \MailSlurp\Models\WaitForConditions $wait_for_conditions (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function waitForAsyncWithHttpInfo($wait_for_conditions)
    {
        $returnType = '\MailSlurp\Models\EmailPreview[]';
        $request = $this->waitForRequest($wait_for_conditions);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'waitFor'
     *
     * @param  \MailSlurp\Models\WaitForConditions $wait_for_conditions (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function waitForRequest($wait_for_conditions)
    {
        // verify the required parameter 'wait_for_conditions' is set
        if ($wait_for_conditions === null || (is_array($wait_for_conditions) && count($wait_for_conditions) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $wait_for_conditions when calling waitFor'
            );
        }

        $resourcePath = '/waitFor';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // body params
        $_tempBody = null;
        if (isset($wait_for_conditions)) {
            $_tempBody = $wait_for_conditions;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation waitForEmailCount
     *
     * Wait for and return count number of emails. Hold connection until inbox count matches expected or timeout occurs
     *
     * @param  string $inbox_id Id of the inbox we are fetching emails from (required)
     * @param  int $count Number of emails to wait for. Must be greater that 1 (required)
     * @param  int $timeout Max milliseconds to wait (optional)
     * @param  bool $unread_only Optional filter for unread only (optional, default to false)
     * @param  \DateTime $before Filter for emails that were received before the given timestamp (optional)
     * @param  \DateTime $since Filter for emails that were received after the given timestamp (optional)
     * @param  string $sort Sort direction (optional)
     * @param  int $delay Max milliseconds delay between calls (optional)
     *
     * @throws \MailSlurp\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MailSlurp\Models\EmailPreview[]
     */
    public function waitForEmailCount($inbox_id, $count, $timeout = null, $unread_only = false, $before = null, $since = null, $sort = null, $delay = null)
    {
        list($response) = $this->waitForEmailCountWithHttpInfo($inbox_id, $count, $timeout, $unread_only, $before, $since, $sort, $delay);
        return $response;
    }

    /**
     * Operation waitForEmailCountWithHttpInfo
     *
     * Wait for and return count number of emails. Hold connection until inbox count matches expected or timeout occurs
     *
     * @param  string $inbox_id Id of the inbox we are fetching emails from (required)
     * @param  int $count Number of emails to wait for. Must be greater that 1 (required)
     * @param  int $timeout Max milliseconds to wait (optional)
     * @param  bool $unread_only Optional filter for unread only (optional, default to false)
     * @param  \DateTime $before Filter for emails that were received before the given timestamp (optional)
     * @param  \DateTime $since Filter for emails that were received after the given timestamp (optional)
     * @param  string $sort Sort direction (optional)
     * @param  int $delay Max milliseconds delay between calls (optional)
     *
     * @throws \MailSlurp\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MailSlurp\Models\EmailPreview[], HTTP status code, HTTP response headers (array of strings)
     */
    public function waitForEmailCountWithHttpInfo($inbox_id, $count, $timeout = null, $unread_only = false, $before = null, $since = null, $sort = null, $delay = null)
    {
        $request = $this->waitForEmailCountRequest($inbox_id, $count, $timeout, $unread_only, $before, $since, $sort, $delay);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\MailSlurp\Models\EmailPreview[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MailSlurp\Models\EmailPreview[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MailSlurp\Models\EmailPreview[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MailSlurp\Models\EmailPreview[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation waitForEmailCountAsync
     *
     * Wait for and return count number of emails. Hold connection until inbox count matches expected or timeout occurs
     *
     * @param  string $inbox_id Id of the inbox we are fetching emails from (required)
     * @param  int $count Number of emails to wait for. Must be greater that 1 (required)
     * @param  int $timeout Max milliseconds to wait (optional)
     * @param  bool $unread_only Optional filter for unread only (optional, default to false)
     * @param  \DateTime $before Filter for emails that were received before the given timestamp (optional)
     * @param  \DateTime $since Filter for emails that were received after the given timestamp (optional)
     * @param  string $sort Sort direction (optional)
     * @param  int $delay Max milliseconds delay between calls (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function waitForEmailCountAsync($inbox_id, $count, $timeout = null, $unread_only = false, $before = null, $since = null, $sort = null, $delay = null)
    {
        return $this->waitForEmailCountAsyncWithHttpInfo($inbox_id, $count, $timeout, $unread_only, $before, $since, $sort, $delay)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation waitForEmailCountAsyncWithHttpInfo
     *
     * Wait for and return count number of emails. Hold connection until inbox count matches expected or timeout occurs
     *
     * @param  string $inbox_id Id of the inbox we are fetching emails from (required)
     * @param  int $count Number of emails to wait for. Must be greater that 1 (required)
     * @param  int $timeout Max milliseconds to wait (optional)
     * @param  bool $unread_only Optional filter for unread only (optional, default to false)
     * @param  \DateTime $before Filter for emails that were received before the given timestamp (optional)
     * @param  \DateTime $since Filter for emails that were received after the given timestamp (optional)
     * @param  string $sort Sort direction (optional)
     * @param  int $delay Max milliseconds delay between calls (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function waitForEmailCountAsyncWithHttpInfo($inbox_id, $count, $timeout = null, $unread_only = false, $before = null, $since = null, $sort = null, $delay = null)
    {
        $returnType = '\MailSlurp\Models\EmailPreview[]';
        $request = $this->waitForEmailCountRequest($inbox_id, $count, $timeout, $unread_only, $before, $since, $sort, $delay);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'waitForEmailCount'
     *
     * @param  string $inbox_id Id of the inbox we are fetching emails from (required)
     * @param  int $count Number of emails to wait for. Must be greater that 1 (required)
     * @param  int $timeout Max milliseconds to wait (optional)
     * @param  bool $unread_only Optional filter for unread only (optional, default to false)
     * @param  \DateTime $before Filter for emails that were received before the given timestamp (optional)
     * @param  \DateTime $since Filter for emails that were received after the given timestamp (optional)
     * @param  string $sort Sort direction (optional)
     * @param  int $delay Max milliseconds delay between calls (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function waitForEmailCountRequest($inbox_id, $count, $timeout = null, $unread_only = false, $before = null, $since = null, $sort = null, $delay = null)
    {
        // verify the required parameter 'inbox_id' is set
        if ($inbox_id === null || (is_array($inbox_id) && count($inbox_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inbox_id when calling waitForEmailCount'
            );
        }
        // verify the required parameter 'count' is set
        if ($count === null || (is_array($count) && count($count) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $count when calling waitForEmailCount'
            );
        }
        if ($count < 1) {
            throw new \InvalidArgumentException('invalid value for "$count" when calling WaitForControllerApi.waitForEmailCount, must be bigger than or equal to 1.');
        }


        $resourcePath = '/waitForEmailCount';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($inbox_id !== null) {
            if('form' === 'form' && is_array($inbox_id)) {
                foreach($inbox_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['inboxId'] = $inbox_id;
            }
        }
        // query params
        if ($count !== null) {
            if('form' === 'form' && is_array($count)) {
                foreach($count as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['count'] = $count;
            }
        }
        // query params
        if ($timeout !== null) {
            if('form' === 'form' && is_array($timeout)) {
                foreach($timeout as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['timeout'] = $timeout;
            }
        }
        // query params
        if ($unread_only !== null) {
            if('form' === 'form' && is_array($unread_only)) {
                foreach($unread_only as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['unreadOnly'] = $unread_only;
            }
        }
        // query params
        if ($before !== null) {
            if('form' === 'form' && is_array($before)) {
                foreach($before as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['before'] = $before;
            }
        }
        // query params
        if ($since !== null) {
            if('form' === 'form' && is_array($since)) {
                foreach($since as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['since'] = $since;
            }
        }
        // query params
        if ($sort !== null) {
            if('form' === 'form' && is_array($sort)) {
                foreach($sort as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sort'] = $sort;
            }
        }
        // query params
        if ($delay !== null) {
            if('form' === 'form' && is_array($delay)) {
                foreach($delay as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['delay'] = $delay;
            }
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation waitForLatestEmail
     *
     * Fetch inbox's latest email or if empty wait for an email to arrive
     *
     * @param  string $inbox_id Id of the inbox we are fetching emails from (optional)
     * @param  int $timeout Max milliseconds to wait (optional)
     * @param  bool $unread_only Optional filter for unread only. (optional, default to false)
     * @param  \DateTime $before Filter for emails that were before after the given timestamp (optional)
     * @param  \DateTime $since Filter for emails that were received after the given timestamp (optional)
     * @param  string $sort Sort direction (optional)
     * @param  int $delay Max milliseconds delay between calls (optional)
     *
     * @throws \MailSlurp\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MailSlurp\Models\Email
     */
    public function waitForLatestEmail($inbox_id = null, $timeout = null, $unread_only = false, $before = null, $since = null, $sort = null, $delay = null)
    {
        list($response) = $this->waitForLatestEmailWithHttpInfo($inbox_id, $timeout, $unread_only, $before, $since, $sort, $delay);
        return $response;
    }

    /**
     * Operation waitForLatestEmailWithHttpInfo
     *
     * Fetch inbox's latest email or if empty wait for an email to arrive
     *
     * @param  string $inbox_id Id of the inbox we are fetching emails from (optional)
     * @param  int $timeout Max milliseconds to wait (optional)
     * @param  bool $unread_only Optional filter for unread only. (optional, default to false)
     * @param  \DateTime $before Filter for emails that were before after the given timestamp (optional)
     * @param  \DateTime $since Filter for emails that were received after the given timestamp (optional)
     * @param  string $sort Sort direction (optional)
     * @param  int $delay Max milliseconds delay between calls (optional)
     *
     * @throws \MailSlurp\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MailSlurp\Models\Email, HTTP status code, HTTP response headers (array of strings)
     */
    public function waitForLatestEmailWithHttpInfo($inbox_id = null, $timeout = null, $unread_only = false, $before = null, $since = null, $sort = null, $delay = null)
    {
        $request = $this->waitForLatestEmailRequest($inbox_id, $timeout, $unread_only, $before, $since, $sort, $delay);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\MailSlurp\Models\Email' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MailSlurp\Models\Email', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MailSlurp\Models\Email';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MailSlurp\Models\Email',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation waitForLatestEmailAsync
     *
     * Fetch inbox's latest email or if empty wait for an email to arrive
     *
     * @param  string $inbox_id Id of the inbox we are fetching emails from (optional)
     * @param  int $timeout Max milliseconds to wait (optional)
     * @param  bool $unread_only Optional filter for unread only. (optional, default to false)
     * @param  \DateTime $before Filter for emails that were before after the given timestamp (optional)
     * @param  \DateTime $since Filter for emails that were received after the given timestamp (optional)
     * @param  string $sort Sort direction (optional)
     * @param  int $delay Max milliseconds delay between calls (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function waitForLatestEmailAsync($inbox_id = null, $timeout = null, $unread_only = false, $before = null, $since = null, $sort = null, $delay = null)
    {
        return $this->waitForLatestEmailAsyncWithHttpInfo($inbox_id, $timeout, $unread_only, $before, $since, $sort, $delay)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation waitForLatestEmailAsyncWithHttpInfo
     *
     * Fetch inbox's latest email or if empty wait for an email to arrive
     *
     * @param  string $inbox_id Id of the inbox we are fetching emails from (optional)
     * @param  int $timeout Max milliseconds to wait (optional)
     * @param  bool $unread_only Optional filter for unread only. (optional, default to false)
     * @param  \DateTime $before Filter for emails that were before after the given timestamp (optional)
     * @param  \DateTime $since Filter for emails that were received after the given timestamp (optional)
     * @param  string $sort Sort direction (optional)
     * @param  int $delay Max milliseconds delay between calls (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function waitForLatestEmailAsyncWithHttpInfo($inbox_id = null, $timeout = null, $unread_only = false, $before = null, $since = null, $sort = null, $delay = null)
    {
        $returnType = '\MailSlurp\Models\Email';
        $request = $this->waitForLatestEmailRequest($inbox_id, $timeout, $unread_only, $before, $since, $sort, $delay);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'waitForLatestEmail'
     *
     * @param  string $inbox_id Id of the inbox we are fetching emails from (optional)
     * @param  int $timeout Max milliseconds to wait (optional)
     * @param  bool $unread_only Optional filter for unread only. (optional, default to false)
     * @param  \DateTime $before Filter for emails that were before after the given timestamp (optional)
     * @param  \DateTime $since Filter for emails that were received after the given timestamp (optional)
     * @param  string $sort Sort direction (optional)
     * @param  int $delay Max milliseconds delay between calls (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function waitForLatestEmailRequest($inbox_id = null, $timeout = null, $unread_only = false, $before = null, $since = null, $sort = null, $delay = null)
    {

        $resourcePath = '/waitForLatestEmail';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($inbox_id !== null) {
            if('form' === 'form' && is_array($inbox_id)) {
                foreach($inbox_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['inboxId'] = $inbox_id;
            }
        }
        // query params
        if ($timeout !== null) {
            if('form' === 'form' && is_array($timeout)) {
                foreach($timeout as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['timeout'] = $timeout;
            }
        }
        // query params
        if ($unread_only !== null) {
            if('form' === 'form' && is_array($unread_only)) {
                foreach($unread_only as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['unreadOnly'] = $unread_only;
            }
        }
        // query params
        if ($before !== null) {
            if('form' === 'form' && is_array($before)) {
                foreach($before as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['before'] = $before;
            }
        }
        // query params
        if ($since !== null) {
            if('form' === 'form' && is_array($since)) {
                foreach($since as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['since'] = $since;
            }
        }
        // query params
        if ($sort !== null) {
            if('form' === 'form' && is_array($sort)) {
                foreach($sort as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sort'] = $sort;
            }
        }
        // query params
        if ($delay !== null) {
            if('form' === 'form' && is_array($delay)) {
                foreach($delay as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['delay'] = $delay;
            }
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation waitForMatchingEmails
     *
     * Wait or return list of emails that match simple matching patterns
     *
     * @param  string $inbox_id Id of the inbox we are fetching emails from (required)
     * @param  int $count Number of emails to wait for. Must be greater or equal to 1 (required)
     * @param  \MailSlurp\Models\MatchOptions $match_options match_options (required)
     * @param  \DateTime $before Filter for emails that were received before the given timestamp (optional)
     * @param  \DateTime $since Filter for emails that were received after the given timestamp (optional)
     * @param  string $sort Sort direction (optional)
     * @param  int $delay Max milliseconds delay between calls (optional)
     * @param  int $timeout Max milliseconds to wait (optional)
     * @param  bool $unread_only Optional filter for unread only (optional, default to false)
     *
     * @throws \MailSlurp\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MailSlurp\Models\EmailPreview[]
     */
    public function waitForMatchingEmails($inbox_id, $count, $match_options, $before = null, $since = null, $sort = null, $delay = null, $timeout = null, $unread_only = false)
    {
        list($response) = $this->waitForMatchingEmailsWithHttpInfo($inbox_id, $count, $match_options, $before, $since, $sort, $delay, $timeout, $unread_only);
        return $response;
    }

    /**
     * Operation waitForMatchingEmailsWithHttpInfo
     *
     * Wait or return list of emails that match simple matching patterns
     *
     * @param  string $inbox_id Id of the inbox we are fetching emails from (required)
     * @param  int $count Number of emails to wait for. Must be greater or equal to 1 (required)
     * @param  \MailSlurp\Models\MatchOptions $match_options (required)
     * @param  \DateTime $before Filter for emails that were received before the given timestamp (optional)
     * @param  \DateTime $since Filter for emails that were received after the given timestamp (optional)
     * @param  string $sort Sort direction (optional)
     * @param  int $delay Max milliseconds delay between calls (optional)
     * @param  int $timeout Max milliseconds to wait (optional)
     * @param  bool $unread_only Optional filter for unread only (optional, default to false)
     *
     * @throws \MailSlurp\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MailSlurp\Models\EmailPreview[], HTTP status code, HTTP response headers (array of strings)
     */
    public function waitForMatchingEmailsWithHttpInfo($inbox_id, $count, $match_options, $before = null, $since = null, $sort = null, $delay = null, $timeout = null, $unread_only = false)
    {
        $request = $this->waitForMatchingEmailsRequest($inbox_id, $count, $match_options, $before, $since, $sort, $delay, $timeout, $unread_only);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\MailSlurp\Models\EmailPreview[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MailSlurp\Models\EmailPreview[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MailSlurp\Models\EmailPreview[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MailSlurp\Models\EmailPreview[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation waitForMatchingEmailsAsync
     *
     * Wait or return list of emails that match simple matching patterns
     *
     * @param  string $inbox_id Id of the inbox we are fetching emails from (required)
     * @param  int $count Number of emails to wait for. Must be greater or equal to 1 (required)
     * @param  \MailSlurp\Models\MatchOptions $match_options (required)
     * @param  \DateTime $before Filter for emails that were received before the given timestamp (optional)
     * @param  \DateTime $since Filter for emails that were received after the given timestamp (optional)
     * @param  string $sort Sort direction (optional)
     * @param  int $delay Max milliseconds delay between calls (optional)
     * @param  int $timeout Max milliseconds to wait (optional)
     * @param  bool $unread_only Optional filter for unread only (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function waitForMatchingEmailsAsync($inbox_id, $count, $match_options, $before = null, $since = null, $sort = null, $delay = null, $timeout = null, $unread_only = false)
    {
        return $this->waitForMatchingEmailsAsyncWithHttpInfo($inbox_id, $count, $match_options, $before, $since, $sort, $delay, $timeout, $unread_only)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation waitForMatchingEmailsAsyncWithHttpInfo
     *
     * Wait or return list of emails that match simple matching patterns
     *
     * @param  string $inbox_id Id of the inbox we are fetching emails from (required)
     * @param  int $count Number of emails to wait for. Must be greater or equal to 1 (required)
     * @param  \MailSlurp\Models\MatchOptions $match_options (required)
     * @param  \DateTime $before Filter for emails that were received before the given timestamp (optional)
     * @param  \DateTime $since Filter for emails that were received after the given timestamp (optional)
     * @param  string $sort Sort direction (optional)
     * @param  int $delay Max milliseconds delay between calls (optional)
     * @param  int $timeout Max milliseconds to wait (optional)
     * @param  bool $unread_only Optional filter for unread only (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function waitForMatchingEmailsAsyncWithHttpInfo($inbox_id, $count, $match_options, $before = null, $since = null, $sort = null, $delay = null, $timeout = null, $unread_only = false)
    {
        $returnType = '\MailSlurp\Models\EmailPreview[]';
        $request = $this->waitForMatchingEmailsRequest($inbox_id, $count, $match_options, $before, $since, $sort, $delay, $timeout, $unread_only);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'waitForMatchingEmails'
     *
     * @param  string $inbox_id Id of the inbox we are fetching emails from (required)
     * @param  int $count Number of emails to wait for. Must be greater or equal to 1 (required)
     * @param  \MailSlurp\Models\MatchOptions $match_options (required)
     * @param  \DateTime $before Filter for emails that were received before the given timestamp (optional)
     * @param  \DateTime $since Filter for emails that were received after the given timestamp (optional)
     * @param  string $sort Sort direction (optional)
     * @param  int $delay Max milliseconds delay between calls (optional)
     * @param  int $timeout Max milliseconds to wait (optional)
     * @param  bool $unread_only Optional filter for unread only (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function waitForMatchingEmailsRequest($inbox_id, $count, $match_options, $before = null, $since = null, $sort = null, $delay = null, $timeout = null, $unread_only = false)
    {
        // verify the required parameter 'inbox_id' is set
        if ($inbox_id === null || (is_array($inbox_id) && count($inbox_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inbox_id when calling waitForMatchingEmails'
            );
        }
        // verify the required parameter 'count' is set
        if ($count === null || (is_array($count) && count($count) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $count when calling waitForMatchingEmails'
            );
        }
        if ($count < 1) {
            throw new \InvalidArgumentException('invalid value for "$count" when calling WaitForControllerApi.waitForMatchingEmails, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'match_options' is set
        if ($match_options === null || (is_array($match_options) && count($match_options) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $match_options when calling waitForMatchingEmails'
            );
        }

        $resourcePath = '/waitForMatchingEmails';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($inbox_id !== null) {
            if('form' === 'form' && is_array($inbox_id)) {
                foreach($inbox_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['inboxId'] = $inbox_id;
            }
        }
        // query params
        if ($count !== null) {
            if('form' === 'form' && is_array($count)) {
                foreach($count as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['count'] = $count;
            }
        }
        // query params
        if ($before !== null) {
            if('form' === 'form' && is_array($before)) {
                foreach($before as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['before'] = $before;
            }
        }
        // query params
        if ($since !== null) {
            if('form' === 'form' && is_array($since)) {
                foreach($since as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['since'] = $since;
            }
        }
        // query params
        if ($sort !== null) {
            if('form' === 'form' && is_array($sort)) {
                foreach($sort as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sort'] = $sort;
            }
        }
        // query params
        if ($delay !== null) {
            if('form' === 'form' && is_array($delay)) {
                foreach($delay as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['delay'] = $delay;
            }
        }
        // query params
        if ($timeout !== null) {
            if('form' === 'form' && is_array($timeout)) {
                foreach($timeout as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['timeout'] = $timeout;
            }
        }
        // query params
        if ($unread_only !== null) {
            if('form' === 'form' && is_array($unread_only)) {
                foreach($unread_only as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['unreadOnly'] = $unread_only;
            }
        }



        // body params
        $_tempBody = null;
        if (isset($match_options)) {
            $_tempBody = $match_options;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation waitForMatchingFirstEmail
     *
     * Wait for or return the first email that matches provided MatchOptions array
     *
     * @param  string $inbox_id Id of the inbox we are matching an email for (required)
     * @param  \MailSlurp\Models\MatchOptions $match_options match_options (required)
     * @param  int $timeout Max milliseconds to wait (optional)
     * @param  bool $unread_only Optional filter for unread only (optional, default to false)
     * @param  \DateTime $since Filter for emails that were received after the given timestamp (optional)
     * @param  \DateTime $before Filter for emails that were received before the given timestamp (optional)
     * @param  string $sort Sort direction (optional)
     * @param  int $delay Max milliseconds delay between calls (optional)
     *
     * @throws \MailSlurp\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MailSlurp\Models\Email
     */
    public function waitForMatchingFirstEmail($inbox_id, $match_options, $timeout = null, $unread_only = false, $since = null, $before = null, $sort = null, $delay = null)
    {
        list($response) = $this->waitForMatchingFirstEmailWithHttpInfo($inbox_id, $match_options, $timeout, $unread_only, $since, $before, $sort, $delay);
        return $response;
    }

    /**
     * Operation waitForMatchingFirstEmailWithHttpInfo
     *
     * Wait for or return the first email that matches provided MatchOptions array
     *
     * @param  string $inbox_id Id of the inbox we are matching an email for (required)
     * @param  \MailSlurp\Models\MatchOptions $match_options (required)
     * @param  int $timeout Max milliseconds to wait (optional)
     * @param  bool $unread_only Optional filter for unread only (optional, default to false)
     * @param  \DateTime $since Filter for emails that were received after the given timestamp (optional)
     * @param  \DateTime $before Filter for emails that were received before the given timestamp (optional)
     * @param  string $sort Sort direction (optional)
     * @param  int $delay Max milliseconds delay between calls (optional)
     *
     * @throws \MailSlurp\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MailSlurp\Models\Email, HTTP status code, HTTP response headers (array of strings)
     */
    public function waitForMatchingFirstEmailWithHttpInfo($inbox_id, $match_options, $timeout = null, $unread_only = false, $since = null, $before = null, $sort = null, $delay = null)
    {
        $request = $this->waitForMatchingFirstEmailRequest($inbox_id, $match_options, $timeout, $unread_only, $since, $before, $sort, $delay);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\MailSlurp\Models\Email' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MailSlurp\Models\Email', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MailSlurp\Models\Email';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MailSlurp\Models\Email',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation waitForMatchingFirstEmailAsync
     *
     * Wait for or return the first email that matches provided MatchOptions array
     *
     * @param  string $inbox_id Id of the inbox we are matching an email for (required)
     * @param  \MailSlurp\Models\MatchOptions $match_options (required)
     * @param  int $timeout Max milliseconds to wait (optional)
     * @param  bool $unread_only Optional filter for unread only (optional, default to false)
     * @param  \DateTime $since Filter for emails that were received after the given timestamp (optional)
     * @param  \DateTime $before Filter for emails that were received before the given timestamp (optional)
     * @param  string $sort Sort direction (optional)
     * @param  int $delay Max milliseconds delay between calls (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function waitForMatchingFirstEmailAsync($inbox_id, $match_options, $timeout = null, $unread_only = false, $since = null, $before = null, $sort = null, $delay = null)
    {
        return $this->waitForMatchingFirstEmailAsyncWithHttpInfo($inbox_id, $match_options, $timeout, $unread_only, $since, $before, $sort, $delay)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation waitForMatchingFirstEmailAsyncWithHttpInfo
     *
     * Wait for or return the first email that matches provided MatchOptions array
     *
     * @param  string $inbox_id Id of the inbox we are matching an email for (required)
     * @param  \MailSlurp\Models\MatchOptions $match_options (required)
     * @param  int $timeout Max milliseconds to wait (optional)
     * @param  bool $unread_only Optional filter for unread only (optional, default to false)
     * @param  \DateTime $since Filter for emails that were received after the given timestamp (optional)
     * @param  \DateTime $before Filter for emails that were received before the given timestamp (optional)
     * @param  string $sort Sort direction (optional)
     * @param  int $delay Max milliseconds delay between calls (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function waitForMatchingFirstEmailAsyncWithHttpInfo($inbox_id, $match_options, $timeout = null, $unread_only = false, $since = null, $before = null, $sort = null, $delay = null)
    {
        $returnType = '\MailSlurp\Models\Email';
        $request = $this->waitForMatchingFirstEmailRequest($inbox_id, $match_options, $timeout, $unread_only, $since, $before, $sort, $delay);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'waitForMatchingFirstEmail'
     *
     * @param  string $inbox_id Id of the inbox we are matching an email for (required)
     * @param  \MailSlurp\Models\MatchOptions $match_options (required)
     * @param  int $timeout Max milliseconds to wait (optional)
     * @param  bool $unread_only Optional filter for unread only (optional, default to false)
     * @param  \DateTime $since Filter for emails that were received after the given timestamp (optional)
     * @param  \DateTime $before Filter for emails that were received before the given timestamp (optional)
     * @param  string $sort Sort direction (optional)
     * @param  int $delay Max milliseconds delay between calls (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function waitForMatchingFirstEmailRequest($inbox_id, $match_options, $timeout = null, $unread_only = false, $since = null, $before = null, $sort = null, $delay = null)
    {
        // verify the required parameter 'inbox_id' is set
        if ($inbox_id === null || (is_array($inbox_id) && count($inbox_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inbox_id when calling waitForMatchingFirstEmail'
            );
        }
        // verify the required parameter 'match_options' is set
        if ($match_options === null || (is_array($match_options) && count($match_options) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $match_options when calling waitForMatchingFirstEmail'
            );
        }

        $resourcePath = '/waitForMatchingFirstEmail';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($inbox_id !== null) {
            if('form' === 'form' && is_array($inbox_id)) {
                foreach($inbox_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['inboxId'] = $inbox_id;
            }
        }
        // query params
        if ($timeout !== null) {
            if('form' === 'form' && is_array($timeout)) {
                foreach($timeout as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['timeout'] = $timeout;
            }
        }
        // query params
        if ($unread_only !== null) {
            if('form' === 'form' && is_array($unread_only)) {
                foreach($unread_only as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['unreadOnly'] = $unread_only;
            }
        }
        // query params
        if ($since !== null) {
            if('form' === 'form' && is_array($since)) {
                foreach($since as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['since'] = $since;
            }
        }
        // query params
        if ($before !== null) {
            if('form' === 'form' && is_array($before)) {
                foreach($before as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['before'] = $before;
            }
        }
        // query params
        if ($sort !== null) {
            if('form' === 'form' && is_array($sort)) {
                foreach($sort as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sort'] = $sort;
            }
        }
        // query params
        if ($delay !== null) {
            if('form' === 'form' && is_array($delay)) {
                foreach($delay as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['delay'] = $delay;
            }
        }



        // body params
        $_tempBody = null;
        if (isset($match_options)) {
            $_tempBody = $match_options;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation waitForNthEmail
     *
     * Wait for or fetch the email with a given index in the inbox specified. If index doesn't exist waits for it to exist or timeout to occur.
     *
     * @param  string $inbox_id Id of the inbox you are fetching emails from (optional)
     * @param  int $index Zero based index of the email to wait for. If an inbox has 1 email already and you want to wait for the 2nd email pass index&#x3D;1 (optional, default to 0)
     * @param  int $timeout Max milliseconds to wait for the nth email if not already present (optional)
     * @param  bool $unread_only Optional filter for unread only (optional, default to false)
     * @param  \DateTime $since Filter for emails that were received after the given timestamp (optional)
     * @param  \DateTime $before Filter for emails that were received before the given timestamp (optional)
     * @param  string $sort Sort direction (optional)
     * @param  int $delay Max milliseconds delay between calls (optional)
     *
     * @throws \MailSlurp\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MailSlurp\Models\Email
     */
    public function waitForNthEmail($inbox_id = null, $index = 0, $timeout = null, $unread_only = false, $since = null, $before = null, $sort = null, $delay = null)
    {
        list($response) = $this->waitForNthEmailWithHttpInfo($inbox_id, $index, $timeout, $unread_only, $since, $before, $sort, $delay);
        return $response;
    }

    /**
     * Operation waitForNthEmailWithHttpInfo
     *
     * Wait for or fetch the email with a given index in the inbox specified. If index doesn't exist waits for it to exist or timeout to occur.
     *
     * @param  string $inbox_id Id of the inbox you are fetching emails from (optional)
     * @param  int $index Zero based index of the email to wait for. If an inbox has 1 email already and you want to wait for the 2nd email pass index&#x3D;1 (optional, default to 0)
     * @param  int $timeout Max milliseconds to wait for the nth email if not already present (optional)
     * @param  bool $unread_only Optional filter for unread only (optional, default to false)
     * @param  \DateTime $since Filter for emails that were received after the given timestamp (optional)
     * @param  \DateTime $before Filter for emails that were received before the given timestamp (optional)
     * @param  string $sort Sort direction (optional)
     * @param  int $delay Max milliseconds delay between calls (optional)
     *
     * @throws \MailSlurp\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MailSlurp\Models\Email, HTTP status code, HTTP response headers (array of strings)
     */
    public function waitForNthEmailWithHttpInfo($inbox_id = null, $index = 0, $timeout = null, $unread_only = false, $since = null, $before = null, $sort = null, $delay = null)
    {
        $request = $this->waitForNthEmailRequest($inbox_id, $index, $timeout, $unread_only, $since, $before, $sort, $delay);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\MailSlurp\Models\Email' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MailSlurp\Models\Email', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MailSlurp\Models\Email';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MailSlurp\Models\Email',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation waitForNthEmailAsync
     *
     * Wait for or fetch the email with a given index in the inbox specified. If index doesn't exist waits for it to exist or timeout to occur.
     *
     * @param  string $inbox_id Id of the inbox you are fetching emails from (optional)
     * @param  int $index Zero based index of the email to wait for. If an inbox has 1 email already and you want to wait for the 2nd email pass index&#x3D;1 (optional, default to 0)
     * @param  int $timeout Max milliseconds to wait for the nth email if not already present (optional)
     * @param  bool $unread_only Optional filter for unread only (optional, default to false)
     * @param  \DateTime $since Filter for emails that were received after the given timestamp (optional)
     * @param  \DateTime $before Filter for emails that were received before the given timestamp (optional)
     * @param  string $sort Sort direction (optional)
     * @param  int $delay Max milliseconds delay between calls (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function waitForNthEmailAsync($inbox_id = null, $index = 0, $timeout = null, $unread_only = false, $since = null, $before = null, $sort = null, $delay = null)
    {
        return $this->waitForNthEmailAsyncWithHttpInfo($inbox_id, $index, $timeout, $unread_only, $since, $before, $sort, $delay)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation waitForNthEmailAsyncWithHttpInfo
     *
     * Wait for or fetch the email with a given index in the inbox specified. If index doesn't exist waits for it to exist or timeout to occur.
     *
     * @param  string $inbox_id Id of the inbox you are fetching emails from (optional)
     * @param  int $index Zero based index of the email to wait for. If an inbox has 1 email already and you want to wait for the 2nd email pass index&#x3D;1 (optional, default to 0)
     * @param  int $timeout Max milliseconds to wait for the nth email if not already present (optional)
     * @param  bool $unread_only Optional filter for unread only (optional, default to false)
     * @param  \DateTime $since Filter for emails that were received after the given timestamp (optional)
     * @param  \DateTime $before Filter for emails that were received before the given timestamp (optional)
     * @param  string $sort Sort direction (optional)
     * @param  int $delay Max milliseconds delay between calls (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function waitForNthEmailAsyncWithHttpInfo($inbox_id = null, $index = 0, $timeout = null, $unread_only = false, $since = null, $before = null, $sort = null, $delay = null)
    {
        $returnType = '\MailSlurp\Models\Email';
        $request = $this->waitForNthEmailRequest($inbox_id, $index, $timeout, $unread_only, $since, $before, $sort, $delay);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'waitForNthEmail'
     *
     * @param  string $inbox_id Id of the inbox you are fetching emails from (optional)
     * @param  int $index Zero based index of the email to wait for. If an inbox has 1 email already and you want to wait for the 2nd email pass index&#x3D;1 (optional, default to 0)
     * @param  int $timeout Max milliseconds to wait for the nth email if not already present (optional)
     * @param  bool $unread_only Optional filter for unread only (optional, default to false)
     * @param  \DateTime $since Filter for emails that were received after the given timestamp (optional)
     * @param  \DateTime $before Filter for emails that were received before the given timestamp (optional)
     * @param  string $sort Sort direction (optional)
     * @param  int $delay Max milliseconds delay between calls (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function waitForNthEmailRequest($inbox_id = null, $index = 0, $timeout = null, $unread_only = false, $since = null, $before = null, $sort = null, $delay = null)
    {
        if ($index !== null && $index > 2147483647) {
            throw new \InvalidArgumentException('invalid value for "$index" when calling WaitForControllerApi.waitForNthEmail, must be smaller than or equal to 2147483647.');
        }
        if ($index !== null && $index < 0) {
            throw new \InvalidArgumentException('invalid value for "$index" when calling WaitForControllerApi.waitForNthEmail, must be bigger than or equal to 0.');
        }


        $resourcePath = '/waitForNthEmail';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($inbox_id !== null) {
            if('form' === 'form' && is_array($inbox_id)) {
                foreach($inbox_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['inboxId'] = $inbox_id;
            }
        }
        // query params
        if ($index !== null) {
            if('form' === 'form' && is_array($index)) {
                foreach($index as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['index'] = $index;
            }
        }
        // query params
        if ($timeout !== null) {
            if('form' === 'form' && is_array($timeout)) {
                foreach($timeout as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['timeout'] = $timeout;
            }
        }
        // query params
        if ($unread_only !== null) {
            if('form' === 'form' && is_array($unread_only)) {
                foreach($unread_only as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['unreadOnly'] = $unread_only;
            }
        }
        // query params
        if ($since !== null) {
            if('form' === 'form' && is_array($since)) {
                foreach($since as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['since'] = $since;
            }
        }
        // query params
        if ($before !== null) {
            if('form' === 'form' && is_array($before)) {
                foreach($before as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['before'] = $before;
            }
        }
        // query params
        if ($sort !== null) {
            if('form' === 'form' && is_array($sort)) {
                foreach($sort as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sort'] = $sort;
            }
        }
        // query params
        if ($delay !== null) {
            if('form' === 'form' && is_array($delay)) {
                foreach($delay as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['delay'] = $delay;
            }
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation waitForSms
     *
     * Wait for an SMS message to match the provided filter conditions such as body contains keyword.
     *
     * @param  \MailSlurp\Models\WaitForSmsConditions $wait_for_sms_conditions wait_for_sms_conditions (required)
     *
     * @throws \MailSlurp\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MailSlurp\Models\SmsPreview[]
     */
    public function waitForSms($wait_for_sms_conditions)
    {
        list($response) = $this->waitForSmsWithHttpInfo($wait_for_sms_conditions);
        return $response;
    }

    /**
     * Operation waitForSmsWithHttpInfo
     *
     * Wait for an SMS message to match the provided filter conditions such as body contains keyword.
     *
     * @param  \MailSlurp\Models\WaitForSmsConditions $wait_for_sms_conditions (required)
     *
     * @throws \MailSlurp\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MailSlurp\Models\SmsPreview[], HTTP status code, HTTP response headers (array of strings)
     */
    public function waitForSmsWithHttpInfo($wait_for_sms_conditions)
    {
        $request = $this->waitForSmsRequest($wait_for_sms_conditions);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\MailSlurp\Models\SmsPreview[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MailSlurp\Models\SmsPreview[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MailSlurp\Models\SmsPreview[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MailSlurp\Models\SmsPreview[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation waitForSmsAsync
     *
     * Wait for an SMS message to match the provided filter conditions such as body contains keyword.
     *
     * @param  \MailSlurp\Models\WaitForSmsConditions $wait_for_sms_conditions (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function waitForSmsAsync($wait_for_sms_conditions)
    {
        return $this->waitForSmsAsyncWithHttpInfo($wait_for_sms_conditions)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation waitForSmsAsyncWithHttpInfo
     *
     * Wait for an SMS message to match the provided filter conditions such as body contains keyword.
     *
     * @param  \MailSlurp\Models\WaitForSmsConditions $wait_for_sms_conditions (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function waitForSmsAsyncWithHttpInfo($wait_for_sms_conditions)
    {
        $returnType = '\MailSlurp\Models\SmsPreview[]';
        $request = $this->waitForSmsRequest($wait_for_sms_conditions);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'waitForSms'
     *
     * @param  \MailSlurp\Models\WaitForSmsConditions $wait_for_sms_conditions (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function waitForSmsRequest($wait_for_sms_conditions)
    {
        // verify the required parameter 'wait_for_sms_conditions' is set
        if ($wait_for_sms_conditions === null || (is_array($wait_for_sms_conditions) && count($wait_for_sms_conditions) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $wait_for_sms_conditions when calling waitForSms'
            );
        }

        $resourcePath = '/waitForSms';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // body params
        $_tempBody = null;
        if (isset($wait_for_sms_conditions)) {
            $_tempBody = $wait_for_sms_conditions;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
