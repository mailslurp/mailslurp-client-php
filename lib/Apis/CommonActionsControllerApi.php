<?php
/**
 * CommonActionsControllerApi
 * PHP version 7.4
 *
 * @category Class
 * @package  MailSlurp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MailSlurp\Apis;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use MailSlurp\ApiException;
use MailSlurp\Configuration;
use MailSlurp\HeaderSelector;
use MailSlurp\ObjectSerializer;

/**
 * CommonActionsControllerApi Class Doc Comment
 *
 * @category Class
 * @package  MailSlurp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CommonActionsControllerApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createNewEmailAddress' => [
            'application/json',
        ],
        'createRandomInbox' => [
            'application/json',
        ],
        'deleteEmailAddress' => [
            'application/json',
        ],
        'emptyInbox' => [
            'application/json',
        ],
        'sendEmailQuery' => [
            'application/json',
        ],
        'sendEmailSimple' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createNewEmailAddress
     *
     * Create new random inbox
     *
     * @param  bool $allow_team_access allow_team_access (optional)
     * @param  bool $use_domain_pool use_domain_pool (optional)
     * @param  \DateTime $expires_at expires_at (optional)
     * @param  int $expires_in expires_in (optional)
     * @param  string $email_address email_address (optional)
     * @param  string $inbox_type inbox_type (optional)
     * @param  string $description description (optional)
     * @param  string $name name (optional)
     * @param  string[] $tags tags (optional)
     * @param  bool $favourite favourite (optional)
     * @param  bool $virtual_inbox virtual_inbox (optional)
     * @param  bool $use_short_address use_short_address (optional)
     * @param  string $domain_name domain_name (optional)
     * @param  string $domain_id domain_id (optional)
     * @param  string $prefix prefix (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewEmailAddress'] to see the possible values for this operation
     *
     * @throws \MailSlurp\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MailSlurp\Models\InboxDto
     */
    public function createNewEmailAddress($allow_team_access = null, $use_domain_pool = null, $expires_at = null, $expires_in = null, $email_address = null, $inbox_type = null, $description = null, $name = null, $tags = null, $favourite = null, $virtual_inbox = null, $use_short_address = null, $domain_name = null, $domain_id = null, $prefix = null, string $contentType = self::contentTypes['createNewEmailAddress'][0])
    {
        list($response) = $this->createNewEmailAddressWithHttpInfo($allow_team_access, $use_domain_pool, $expires_at, $expires_in, $email_address, $inbox_type, $description, $name, $tags, $favourite, $virtual_inbox, $use_short_address, $domain_name, $domain_id, $prefix, $contentType);
        return $response;
    }

    /**
     * Operation createNewEmailAddressWithHttpInfo
     *
     * Create new random inbox
     *
     * @param  bool $allow_team_access (optional)
     * @param  bool $use_domain_pool (optional)
     * @param  \DateTime $expires_at (optional)
     * @param  int $expires_in (optional)
     * @param  string $email_address (optional)
     * @param  string $inbox_type (optional)
     * @param  string $description (optional)
     * @param  string $name (optional)
     * @param  string[] $tags (optional)
     * @param  bool $favourite (optional)
     * @param  bool $virtual_inbox (optional)
     * @param  bool $use_short_address (optional)
     * @param  string $domain_name (optional)
     * @param  string $domain_id (optional)
     * @param  string $prefix (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewEmailAddress'] to see the possible values for this operation
     *
     * @throws \MailSlurp\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MailSlurp\Models\InboxDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function createNewEmailAddressWithHttpInfo($allow_team_access = null, $use_domain_pool = null, $expires_at = null, $expires_in = null, $email_address = null, $inbox_type = null, $description = null, $name = null, $tags = null, $favourite = null, $virtual_inbox = null, $use_short_address = null, $domain_name = null, $domain_id = null, $prefix = null, string $contentType = self::contentTypes['createNewEmailAddress'][0])
    {
        $request = $this->createNewEmailAddressRequest($allow_team_access, $use_domain_pool, $expires_at, $expires_in, $email_address, $inbox_type, $description, $name, $tags, $favourite, $virtual_inbox, $use_short_address, $domain_name, $domain_id, $prefix, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\MailSlurp\Models\InboxDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MailSlurp\Models\InboxDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MailSlurp\Models\InboxDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MailSlurp\Models\InboxDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MailSlurp\Models\InboxDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createNewEmailAddressAsync
     *
     * Create new random inbox
     *
     * @param  bool $allow_team_access (optional)
     * @param  bool $use_domain_pool (optional)
     * @param  \DateTime $expires_at (optional)
     * @param  int $expires_in (optional)
     * @param  string $email_address (optional)
     * @param  string $inbox_type (optional)
     * @param  string $description (optional)
     * @param  string $name (optional)
     * @param  string[] $tags (optional)
     * @param  bool $favourite (optional)
     * @param  bool $virtual_inbox (optional)
     * @param  bool $use_short_address (optional)
     * @param  string $domain_name (optional)
     * @param  string $domain_id (optional)
     * @param  string $prefix (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewEmailAddress'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNewEmailAddressAsync($allow_team_access = null, $use_domain_pool = null, $expires_at = null, $expires_in = null, $email_address = null, $inbox_type = null, $description = null, $name = null, $tags = null, $favourite = null, $virtual_inbox = null, $use_short_address = null, $domain_name = null, $domain_id = null, $prefix = null, string $contentType = self::contentTypes['createNewEmailAddress'][0])
    {
        return $this->createNewEmailAddressAsyncWithHttpInfo($allow_team_access, $use_domain_pool, $expires_at, $expires_in, $email_address, $inbox_type, $description, $name, $tags, $favourite, $virtual_inbox, $use_short_address, $domain_name, $domain_id, $prefix, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createNewEmailAddressAsyncWithHttpInfo
     *
     * Create new random inbox
     *
     * @param  bool $allow_team_access (optional)
     * @param  bool $use_domain_pool (optional)
     * @param  \DateTime $expires_at (optional)
     * @param  int $expires_in (optional)
     * @param  string $email_address (optional)
     * @param  string $inbox_type (optional)
     * @param  string $description (optional)
     * @param  string $name (optional)
     * @param  string[] $tags (optional)
     * @param  bool $favourite (optional)
     * @param  bool $virtual_inbox (optional)
     * @param  bool $use_short_address (optional)
     * @param  string $domain_name (optional)
     * @param  string $domain_id (optional)
     * @param  string $prefix (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewEmailAddress'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNewEmailAddressAsyncWithHttpInfo($allow_team_access = null, $use_domain_pool = null, $expires_at = null, $expires_in = null, $email_address = null, $inbox_type = null, $description = null, $name = null, $tags = null, $favourite = null, $virtual_inbox = null, $use_short_address = null, $domain_name = null, $domain_id = null, $prefix = null, string $contentType = self::contentTypes['createNewEmailAddress'][0])
    {
        $returnType = '\MailSlurp\Models\InboxDto';
        $request = $this->createNewEmailAddressRequest($allow_team_access, $use_domain_pool, $expires_at, $expires_in, $email_address, $inbox_type, $description, $name, $tags, $favourite, $virtual_inbox, $use_short_address, $domain_name, $domain_id, $prefix, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createNewEmailAddress'
     *
     * @param  bool $allow_team_access (optional)
     * @param  bool $use_domain_pool (optional)
     * @param  \DateTime $expires_at (optional)
     * @param  int $expires_in (optional)
     * @param  string $email_address (optional)
     * @param  string $inbox_type (optional)
     * @param  string $description (optional)
     * @param  string $name (optional)
     * @param  string[] $tags (optional)
     * @param  bool $favourite (optional)
     * @param  bool $virtual_inbox (optional)
     * @param  bool $use_short_address (optional)
     * @param  string $domain_name (optional)
     * @param  string $domain_id (optional)
     * @param  string $prefix (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNewEmailAddress'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createNewEmailAddressRequest($allow_team_access = null, $use_domain_pool = null, $expires_at = null, $expires_in = null, $email_address = null, $inbox_type = null, $description = null, $name = null, $tags = null, $favourite = null, $virtual_inbox = null, $use_short_address = null, $domain_name = null, $domain_id = null, $prefix = null, string $contentType = self::contentTypes['createNewEmailAddress'][0])
    {

















        $resourcePath = '/newEmailAddress';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $allow_team_access,
            'allowTeamAccess', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $use_domain_pool,
            'useDomainPool', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expires_at,
            'expiresAt', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expires_in,
            'expiresIn', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $email_address,
            'emailAddress', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $inbox_type,
            'inboxType', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $description,
            'description', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name,
            'name', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tags,
            'tags', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $favourite,
            'favourite', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $virtual_inbox,
            'virtualInbox', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $use_short_address,
            'useShortAddress', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $domain_name,
            'domainName', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $domain_id,
            'domainId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $prefix,
            'prefix', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createRandomInbox
     *
     * Create new random inbox
     *
     * @param  bool $allow_team_access allow_team_access (optional)
     * @param  bool $use_domain_pool use_domain_pool (optional)
     * @param  \DateTime $expires_at expires_at (optional)
     * @param  int $expires_in expires_in (optional)
     * @param  string $email_address email_address (optional)
     * @param  string $inbox_type inbox_type (optional)
     * @param  string $description description (optional)
     * @param  string $name name (optional)
     * @param  string[] $tags tags (optional)
     * @param  bool $favourite favourite (optional)
     * @param  bool $virtual_inbox virtual_inbox (optional)
     * @param  bool $use_short_address use_short_address (optional)
     * @param  string $domain_name domain_name (optional)
     * @param  string $domain_id domain_id (optional)
     * @param  string $prefix prefix (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createRandomInbox'] to see the possible values for this operation
     *
     * @throws \MailSlurp\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MailSlurp\Models\InboxDto
     */
    public function createRandomInbox($allow_team_access = null, $use_domain_pool = null, $expires_at = null, $expires_in = null, $email_address = null, $inbox_type = null, $description = null, $name = null, $tags = null, $favourite = null, $virtual_inbox = null, $use_short_address = null, $domain_name = null, $domain_id = null, $prefix = null, string $contentType = self::contentTypes['createRandomInbox'][0])
    {
        list($response) = $this->createRandomInboxWithHttpInfo($allow_team_access, $use_domain_pool, $expires_at, $expires_in, $email_address, $inbox_type, $description, $name, $tags, $favourite, $virtual_inbox, $use_short_address, $domain_name, $domain_id, $prefix, $contentType);
        return $response;
    }

    /**
     * Operation createRandomInboxWithHttpInfo
     *
     * Create new random inbox
     *
     * @param  bool $allow_team_access (optional)
     * @param  bool $use_domain_pool (optional)
     * @param  \DateTime $expires_at (optional)
     * @param  int $expires_in (optional)
     * @param  string $email_address (optional)
     * @param  string $inbox_type (optional)
     * @param  string $description (optional)
     * @param  string $name (optional)
     * @param  string[] $tags (optional)
     * @param  bool $favourite (optional)
     * @param  bool $virtual_inbox (optional)
     * @param  bool $use_short_address (optional)
     * @param  string $domain_name (optional)
     * @param  string $domain_id (optional)
     * @param  string $prefix (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createRandomInbox'] to see the possible values for this operation
     *
     * @throws \MailSlurp\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MailSlurp\Models\InboxDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function createRandomInboxWithHttpInfo($allow_team_access = null, $use_domain_pool = null, $expires_at = null, $expires_in = null, $email_address = null, $inbox_type = null, $description = null, $name = null, $tags = null, $favourite = null, $virtual_inbox = null, $use_short_address = null, $domain_name = null, $domain_id = null, $prefix = null, string $contentType = self::contentTypes['createRandomInbox'][0])
    {
        $request = $this->createRandomInboxRequest($allow_team_access, $use_domain_pool, $expires_at, $expires_in, $email_address, $inbox_type, $description, $name, $tags, $favourite, $virtual_inbox, $use_short_address, $domain_name, $domain_id, $prefix, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\MailSlurp\Models\InboxDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\MailSlurp\Models\InboxDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MailSlurp\Models\InboxDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\MailSlurp\Models\InboxDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MailSlurp\Models\InboxDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createRandomInboxAsync
     *
     * Create new random inbox
     *
     * @param  bool $allow_team_access (optional)
     * @param  bool $use_domain_pool (optional)
     * @param  \DateTime $expires_at (optional)
     * @param  int $expires_in (optional)
     * @param  string $email_address (optional)
     * @param  string $inbox_type (optional)
     * @param  string $description (optional)
     * @param  string $name (optional)
     * @param  string[] $tags (optional)
     * @param  bool $favourite (optional)
     * @param  bool $virtual_inbox (optional)
     * @param  bool $use_short_address (optional)
     * @param  string $domain_name (optional)
     * @param  string $domain_id (optional)
     * @param  string $prefix (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createRandomInbox'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createRandomInboxAsync($allow_team_access = null, $use_domain_pool = null, $expires_at = null, $expires_in = null, $email_address = null, $inbox_type = null, $description = null, $name = null, $tags = null, $favourite = null, $virtual_inbox = null, $use_short_address = null, $domain_name = null, $domain_id = null, $prefix = null, string $contentType = self::contentTypes['createRandomInbox'][0])
    {
        return $this->createRandomInboxAsyncWithHttpInfo($allow_team_access, $use_domain_pool, $expires_at, $expires_in, $email_address, $inbox_type, $description, $name, $tags, $favourite, $virtual_inbox, $use_short_address, $domain_name, $domain_id, $prefix, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createRandomInboxAsyncWithHttpInfo
     *
     * Create new random inbox
     *
     * @param  bool $allow_team_access (optional)
     * @param  bool $use_domain_pool (optional)
     * @param  \DateTime $expires_at (optional)
     * @param  int $expires_in (optional)
     * @param  string $email_address (optional)
     * @param  string $inbox_type (optional)
     * @param  string $description (optional)
     * @param  string $name (optional)
     * @param  string[] $tags (optional)
     * @param  bool $favourite (optional)
     * @param  bool $virtual_inbox (optional)
     * @param  bool $use_short_address (optional)
     * @param  string $domain_name (optional)
     * @param  string $domain_id (optional)
     * @param  string $prefix (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createRandomInbox'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createRandomInboxAsyncWithHttpInfo($allow_team_access = null, $use_domain_pool = null, $expires_at = null, $expires_in = null, $email_address = null, $inbox_type = null, $description = null, $name = null, $tags = null, $favourite = null, $virtual_inbox = null, $use_short_address = null, $domain_name = null, $domain_id = null, $prefix = null, string $contentType = self::contentTypes['createRandomInbox'][0])
    {
        $returnType = '\MailSlurp\Models\InboxDto';
        $request = $this->createRandomInboxRequest($allow_team_access, $use_domain_pool, $expires_at, $expires_in, $email_address, $inbox_type, $description, $name, $tags, $favourite, $virtual_inbox, $use_short_address, $domain_name, $domain_id, $prefix, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createRandomInbox'
     *
     * @param  bool $allow_team_access (optional)
     * @param  bool $use_domain_pool (optional)
     * @param  \DateTime $expires_at (optional)
     * @param  int $expires_in (optional)
     * @param  string $email_address (optional)
     * @param  string $inbox_type (optional)
     * @param  string $description (optional)
     * @param  string $name (optional)
     * @param  string[] $tags (optional)
     * @param  bool $favourite (optional)
     * @param  bool $virtual_inbox (optional)
     * @param  bool $use_short_address (optional)
     * @param  string $domain_name (optional)
     * @param  string $domain_id (optional)
     * @param  string $prefix (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createRandomInbox'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createRandomInboxRequest($allow_team_access = null, $use_domain_pool = null, $expires_at = null, $expires_in = null, $email_address = null, $inbox_type = null, $description = null, $name = null, $tags = null, $favourite = null, $virtual_inbox = null, $use_short_address = null, $domain_name = null, $domain_id = null, $prefix = null, string $contentType = self::contentTypes['createRandomInbox'][0])
    {

















        $resourcePath = '/createInbox';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $allow_team_access,
            'allowTeamAccess', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $use_domain_pool,
            'useDomainPool', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expires_at,
            'expiresAt', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expires_in,
            'expiresIn', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $email_address,
            'emailAddress', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $inbox_type,
            'inboxType', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $description,
            'description', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name,
            'name', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tags,
            'tags', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $favourite,
            'favourite', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $virtual_inbox,
            'virtualInbox', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $use_short_address,
            'useShortAddress', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $domain_name,
            'domainName', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $domain_id,
            'domainId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $prefix,
            'prefix', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteEmailAddress
     *
     * Delete inbox email address by inbox id
     *
     * @param  string $inbox_id inbox_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEmailAddress'] to see the possible values for this operation
     *
     * @throws \MailSlurp\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteEmailAddress($inbox_id, string $contentType = self::contentTypes['deleteEmailAddress'][0])
    {
        $this->deleteEmailAddressWithHttpInfo($inbox_id, $contentType);
    }

    /**
     * Operation deleteEmailAddressWithHttpInfo
     *
     * Delete inbox email address by inbox id
     *
     * @param  string $inbox_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEmailAddress'] to see the possible values for this operation
     *
     * @throws \MailSlurp\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteEmailAddressWithHttpInfo($inbox_id, string $contentType = self::contentTypes['deleteEmailAddress'][0])
    {
        $request = $this->deleteEmailAddressRequest($inbox_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteEmailAddressAsync
     *
     * Delete inbox email address by inbox id
     *
     * @param  string $inbox_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEmailAddress'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEmailAddressAsync($inbox_id, string $contentType = self::contentTypes['deleteEmailAddress'][0])
    {
        return $this->deleteEmailAddressAsyncWithHttpInfo($inbox_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteEmailAddressAsyncWithHttpInfo
     *
     * Delete inbox email address by inbox id
     *
     * @param  string $inbox_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEmailAddress'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEmailAddressAsyncWithHttpInfo($inbox_id, string $contentType = self::contentTypes['deleteEmailAddress'][0])
    {
        $returnType = '';
        $request = $this->deleteEmailAddressRequest($inbox_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteEmailAddress'
     *
     * @param  string $inbox_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEmailAddress'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteEmailAddressRequest($inbox_id, string $contentType = self::contentTypes['deleteEmailAddress'][0])
    {

        // verify the required parameter 'inbox_id' is set
        if ($inbox_id === null || (is_array($inbox_id) && count($inbox_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inbox_id when calling deleteEmailAddress'
            );
        }


        $resourcePath = '/deleteEmailAddress';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $inbox_id,
            'inboxId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation emptyInbox
     *
     * Delete all emails in an inbox
     *
     * @param  string $inbox_id inbox_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['emptyInbox'] to see the possible values for this operation
     *
     * @throws \MailSlurp\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function emptyInbox($inbox_id, string $contentType = self::contentTypes['emptyInbox'][0])
    {
        $this->emptyInboxWithHttpInfo($inbox_id, $contentType);
    }

    /**
     * Operation emptyInboxWithHttpInfo
     *
     * Delete all emails in an inbox
     *
     * @param  string $inbox_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['emptyInbox'] to see the possible values for this operation
     *
     * @throws \MailSlurp\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function emptyInboxWithHttpInfo($inbox_id, string $contentType = self::contentTypes['emptyInbox'][0])
    {
        $request = $this->emptyInboxRequest($inbox_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation emptyInboxAsync
     *
     * Delete all emails in an inbox
     *
     * @param  string $inbox_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['emptyInbox'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function emptyInboxAsync($inbox_id, string $contentType = self::contentTypes['emptyInbox'][0])
    {
        return $this->emptyInboxAsyncWithHttpInfo($inbox_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation emptyInboxAsyncWithHttpInfo
     *
     * Delete all emails in an inbox
     *
     * @param  string $inbox_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['emptyInbox'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function emptyInboxAsyncWithHttpInfo($inbox_id, string $contentType = self::contentTypes['emptyInbox'][0])
    {
        $returnType = '';
        $request = $this->emptyInboxRequest($inbox_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'emptyInbox'
     *
     * @param  string $inbox_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['emptyInbox'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function emptyInboxRequest($inbox_id, string $contentType = self::contentTypes['emptyInbox'][0])
    {

        // verify the required parameter 'inbox_id' is set
        if ($inbox_id === null || (is_array($inbox_id) && count($inbox_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inbox_id when calling emptyInbox'
            );
        }


        $resourcePath = '/emptyInbox';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $inbox_id,
            'inboxId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendEmailQuery
     *
     * Send an email using query parameters
     *
     * @param  string $to Email address to send to (required)
     * @param  string $sender_id ID of inbox to send from. If null an inbox will be created for sending (optional)
     * @param  string $body Body of the email message. Supports HTML (optional)
     * @param  string $subject Subject line of the email (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendEmailQuery'] to see the possible values for this operation
     *
     * @throws \MailSlurp\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function sendEmailQuery($to, $sender_id = null, $body = null, $subject = null, string $contentType = self::contentTypes['sendEmailQuery'][0])
    {
        $this->sendEmailQueryWithHttpInfo($to, $sender_id, $body, $subject, $contentType);
    }

    /**
     * Operation sendEmailQueryWithHttpInfo
     *
     * Send an email using query parameters
     *
     * @param  string $to Email address to send to (required)
     * @param  string $sender_id ID of inbox to send from. If null an inbox will be created for sending (optional)
     * @param  string $body Body of the email message. Supports HTML (optional)
     * @param  string $subject Subject line of the email (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendEmailQuery'] to see the possible values for this operation
     *
     * @throws \MailSlurp\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendEmailQueryWithHttpInfo($to, $sender_id = null, $body = null, $subject = null, string $contentType = self::contentTypes['sendEmailQuery'][0])
    {
        $request = $this->sendEmailQueryRequest($to, $sender_id, $body, $subject, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation sendEmailQueryAsync
     *
     * Send an email using query parameters
     *
     * @param  string $to Email address to send to (required)
     * @param  string $sender_id ID of inbox to send from. If null an inbox will be created for sending (optional)
     * @param  string $body Body of the email message. Supports HTML (optional)
     * @param  string $subject Subject line of the email (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendEmailQuery'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendEmailQueryAsync($to, $sender_id = null, $body = null, $subject = null, string $contentType = self::contentTypes['sendEmailQuery'][0])
    {
        return $this->sendEmailQueryAsyncWithHttpInfo($to, $sender_id, $body, $subject, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendEmailQueryAsyncWithHttpInfo
     *
     * Send an email using query parameters
     *
     * @param  string $to Email address to send to (required)
     * @param  string $sender_id ID of inbox to send from. If null an inbox will be created for sending (optional)
     * @param  string $body Body of the email message. Supports HTML (optional)
     * @param  string $subject Subject line of the email (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendEmailQuery'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendEmailQueryAsyncWithHttpInfo($to, $sender_id = null, $body = null, $subject = null, string $contentType = self::contentTypes['sendEmailQuery'][0])
    {
        $returnType = '';
        $request = $this->sendEmailQueryRequest($to, $sender_id, $body, $subject, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendEmailQuery'
     *
     * @param  string $to Email address to send to (required)
     * @param  string $sender_id ID of inbox to send from. If null an inbox will be created for sending (optional)
     * @param  string $body Body of the email message. Supports HTML (optional)
     * @param  string $subject Subject line of the email (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendEmailQuery'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sendEmailQueryRequest($to, $sender_id = null, $body = null, $subject = null, string $contentType = self::contentTypes['sendEmailQuery'][0])
    {

        // verify the required parameter 'to' is set
        if ($to === null || (is_array($to) && count($to) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $to when calling sendEmailQuery'
            );
        }





        $resourcePath = '/sendEmailQuery';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sender_id,
            'senderId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $to,
            'to', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $body,
            'body', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $subject,
            'subject', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendEmailSimple
     *
     * Send an email
     *
     * @param  \MailSlurp\Models\SimpleSendEmailOptions $simple_send_email_options simple_send_email_options (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendEmailSimple'] to see the possible values for this operation
     *
     * @throws \MailSlurp\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function sendEmailSimple($simple_send_email_options, string $contentType = self::contentTypes['sendEmailSimple'][0])
    {
        $this->sendEmailSimpleWithHttpInfo($simple_send_email_options, $contentType);
    }

    /**
     * Operation sendEmailSimpleWithHttpInfo
     *
     * Send an email
     *
     * @param  \MailSlurp\Models\SimpleSendEmailOptions $simple_send_email_options (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendEmailSimple'] to see the possible values for this operation
     *
     * @throws \MailSlurp\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendEmailSimpleWithHttpInfo($simple_send_email_options, string $contentType = self::contentTypes['sendEmailSimple'][0])
    {
        $request = $this->sendEmailSimpleRequest($simple_send_email_options, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation sendEmailSimpleAsync
     *
     * Send an email
     *
     * @param  \MailSlurp\Models\SimpleSendEmailOptions $simple_send_email_options (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendEmailSimple'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendEmailSimpleAsync($simple_send_email_options, string $contentType = self::contentTypes['sendEmailSimple'][0])
    {
        return $this->sendEmailSimpleAsyncWithHttpInfo($simple_send_email_options, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendEmailSimpleAsyncWithHttpInfo
     *
     * Send an email
     *
     * @param  \MailSlurp\Models\SimpleSendEmailOptions $simple_send_email_options (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendEmailSimple'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendEmailSimpleAsyncWithHttpInfo($simple_send_email_options, string $contentType = self::contentTypes['sendEmailSimple'][0])
    {
        $returnType = '';
        $request = $this->sendEmailSimpleRequest($simple_send_email_options, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendEmailSimple'
     *
     * @param  \MailSlurp\Models\SimpleSendEmailOptions $simple_send_email_options (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendEmailSimple'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sendEmailSimpleRequest($simple_send_email_options, string $contentType = self::contentTypes['sendEmailSimple'][0])
    {

        // verify the required parameter 'simple_send_email_options' is set
        if ($simple_send_email_options === null || (is_array($simple_send_email_options) && count($simple_send_email_options) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $simple_send_email_options when calling sendEmailSimple'
            );
        }


        $resourcePath = '/sendEmail';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($simple_send_email_options)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($simple_send_email_options));
            } else {
                $httpBody = $simple_send_email_options;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
