<?php
/**
 * InboxControllerApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  MailSlurp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace MailSlurp\Test\Api;

use \MailSlurp\Configuration;
use \MailSlurp\ApiException;
use \MailSlurp\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * InboxControllerApiTest Class Doc Comment
 *
 * @category Class
 * @package  MailSlurp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class InboxControllerApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for cancelScheduledJob
     *
     * Cancel a scheduled email job.
     *
     */
    public function testCancelScheduledJob()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createInbox
     *
     * Create an inbox email address. An inbox has a real email address and can send and receive emails. Inboxes can be either `SMTP` or `HTTP` inboxes..
     *
     */
    public function testCreateInbox()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createInboxRuleset
     *
     * Create an inbox ruleset.
     *
     */
    public function testCreateInboxRuleset()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createInboxWithDefaults
     *
     * Create an inbox with default options. Uses MailSlurp domain pool address and is private..
     *
     */
    public function testCreateInboxWithDefaults()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createInboxWithOptions
     *
     * Create an inbox with options. Extended options for inbox creation..
     *
     */
    public function testCreateInboxWithOptions()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteAllInboxEmails
     *
     * Delete all emails in a given inboxes..
     *
     */
    public function testDeleteAllInboxEmails()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteAllInboxes
     *
     * Delete all inboxes.
     *
     */
    public function testDeleteAllInboxes()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteAllInboxesByDescription
     *
     * Delete inboxes by description.
     *
     */
    public function testDeleteAllInboxesByDescription()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteAllInboxesByName
     *
     * Delete inboxes by name.
     *
     */
    public function testDeleteAllInboxesByName()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteAllInboxesByTag
     *
     * Delete inboxes by tag.
     *
     */
    public function testDeleteAllInboxesByTag()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteInbox
     *
     * Delete inbox.
     *
     */
    public function testDeleteInbox()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for doesInboxExist
     *
     * Does inbox exist.
     *
     */
    public function testDoesInboxExist()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for flushExpired
     *
     * Remove expired inboxes.
     *
     */
    public function testFlushExpired()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getAllInboxes
     *
     * List All Inboxes Paginated.
     *
     */
    public function testGetAllInboxes()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getAllInboxesOffsetPaginated
     *
     * List All Inboxes Offset Paginated.
     *
     */
    public function testGetAllInboxesOffsetPaginated()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getAllScheduledJobs
     *
     * Get all scheduled email sending jobs for account.
     *
     */
    public function testGetAllScheduledJobs()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getDeliveryStatusesByInboxId
     *
     * .
     *
     */
    public function testGetDeliveryStatusesByInboxId()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getEmails
     *
     * Get emails in an Inbox. This method is not idempotent as it allows retries and waits if you want certain conditions to be met before returning. For simple listing and sorting of known emails use the email controller instead..
     *
     */
    public function testGetEmails()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getImapSmtpAccess
     *
     * .
     *
     */
    public function testGetImapSmtpAccess()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getInbox
     *
     * Get Inbox. Returns properties of an inbox..
     *
     */
    public function testGetInbox()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getInboxByEmailAddress
     *
     * Search for an inbox with the provided email address.
     *
     */
    public function testGetInboxByEmailAddress()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getInboxByName
     *
     * Search for an inbox with the given name.
     *
     */
    public function testGetInboxByName()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getInboxCount
     *
     * Get total inbox count.
     *
     */
    public function testGetInboxCount()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getInboxEmailCount
     *
     * Get email count in inbox.
     *
     */
    public function testGetInboxEmailCount()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getInboxEmailsPaginated
     *
     * Get inbox emails paginated.
     *
     */
    public function testGetInboxEmailsPaginated()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getInboxIds
     *
     * Get all inbox IDs.
     *
     */
    public function testGetInboxIds()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getInboxSentEmails
     *
     * Get Inbox Sent Emails.
     *
     */
    public function testGetInboxSentEmails()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getInboxTags
     *
     * Get inbox tags.
     *
     */
    public function testGetInboxTags()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getInboxes
     *
     * List Inboxes and email addresses.
     *
     */
    public function testGetInboxes()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getLatestEmailInInbox
     *
     * Get latest email in an inbox. Use `WaitForController` to get emails that may not have arrived yet..
     *
     */
    public function testGetLatestEmailInInbox()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOrganizationInboxes
     *
     * List Organization Inboxes Paginated.
     *
     */
    public function testGetOrganizationInboxes()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getScheduledJob
     *
     * Get a scheduled email job.
     *
     */
    public function testGetScheduledJob()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getScheduledJobsByInboxId
     *
     * Get all scheduled email sending jobs for the inbox.
     *
     */
    public function testGetScheduledJobsByInboxId()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for listInboxRulesets
     *
     * List inbox rulesets.
     *
     */
    public function testListInboxRulesets()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for listInboxTrackingPixels
     *
     * List inbox tracking pixels.
     *
     */
    public function testListInboxTrackingPixels()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for searchInboxes
     *
     * Search all inboxes and return matching inboxes.
     *
     */
    public function testSearchInboxes()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for sendEmail
     *
     * Send Email.
     *
     */
    public function testSendEmail()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for sendEmailAndConfirm
     *
     * Send email and return sent confirmation.
     *
     */
    public function testSendEmailAndConfirm()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for sendEmailWithQueue
     *
     * Send email with queue.
     *
     */
    public function testSendEmailWithQueue()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for sendSmtpEnvelope
     *
     * Send email using an SMTP mail envelope and message body and return sent confirmation.
     *
     */
    public function testSendSmtpEnvelope()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for sendTestEmail
     *
     * Send a test email to inbox.
     *
     */
    public function testSendTestEmail()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for sendWithSchedule
     *
     * Send email with with delay or schedule.
     *
     */
    public function testSendWithSchedule()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for setInboxFavourited
     *
     * Set inbox favourited state.
     *
     */
    public function testSetInboxFavourited()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateInbox
     *
     * Update Inbox. Change name and description. Email address is not editable..
     *
     */
    public function testUpdateInbox()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
