<?php
/**
 * ConnectorControllerApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  MailSlurp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * MailSlurp API
 *
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace MailSlurp\Test\Api;

use \MailSlurp\Configuration;
use \MailSlurp\ApiException;
use \MailSlurp\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * ConnectorControllerApiTest Class Doc Comment
 *
 * @category Class
 * @package  MailSlurp
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ConnectorControllerApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for createConnector
     *
     * Create an inbox connector.
     *
     */
    public function testCreateConnector()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createConnectorImapConnection
     *
     * Create an inbox connector IMAP connection.
     *
     */
    public function testCreateConnectorImapConnection()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createConnectorSmtpConnection
     *
     * Create an inbox connector SMTP connection.
     *
     */
    public function testCreateConnectorSmtpConnection()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createConnectorSyncSettings
     *
     * Create an inbox connector sync settings.
     *
     */
    public function testCreateConnectorSyncSettings()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createConnectorWithOptions
     *
     * Create an inbox connector with options.
     *
     */
    public function testCreateConnectorWithOptions()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteAllConnector
     *
     * Delete all inbox connectors.
     *
     */
    public function testDeleteAllConnector()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteConnector
     *
     * Delete an inbox connector.
     *
     */
    public function testDeleteConnector()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteConnectorImapConnection
     *
     * Delete an inbox connector IMAP connection.
     *
     */
    public function testDeleteConnectorImapConnection()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteConnectorSmtpConnection
     *
     * Delete an inbox connector SMTP connection.
     *
     */
    public function testDeleteConnectorSmtpConnection()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteConnectorSyncSettings
     *
     * Create an inbox connector sync settings.
     *
     */
    public function testDeleteConnectorSyncSettings()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getAllConnectorEvents
     *
     * Get all inbox connector events.
     *
     */
    public function testGetAllConnectorEvents()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getConnector
     *
     * Get an inbox connector.
     *
     */
    public function testGetConnector()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getConnectorByEmailAddress
     *
     * Get connector by email address.
     *
     */
    public function testGetConnectorByEmailAddress()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getConnectorByInboxId
     *
     * Get connector by inbox ID.
     *
     */
    public function testGetConnectorByInboxId()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getConnectorByName
     *
     * Get connector by name.
     *
     */
    public function testGetConnectorByName()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getConnectorEvent
     *
     * Get an inbox connector event.
     *
     */
    public function testGetConnectorEvent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getConnectorEvents
     *
     * Get an inbox connector events.
     *
     */
    public function testGetConnectorEvents()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getConnectorImapConnection
     *
     * Get an inbox connector IMAP connection.
     *
     */
    public function testGetConnectorImapConnection()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getConnectorProviderSettings
     *
     * Get SMTP and IMAP connection settings for common mail providers.
     *
     */
    public function testGetConnectorProviderSettings()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getConnectorSmtpConnection
     *
     * Get an inbox connector SMTP connection.
     *
     */
    public function testGetConnectorSmtpConnection()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getConnectorSyncSettings
     *
     * Get an inbox connector sync settings.
     *
     */
    public function testGetConnectorSyncSettings()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getConnectors
     *
     * Get inbox connectors.
     *
     */
    public function testGetConnectors()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for sendEmailFromConnector
     *
     * Send from an inbox connector.
     *
     */
    public function testSendEmailFromConnector()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for syncConnector
     *
     * Sync an inbox connector.
     *
     */
    public function testSyncConnector()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for testConnectorImapConnection
     *
     * Test an inbox connector IMAP connection.
     *
     */
    public function testTestConnectorImapConnection()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for testConnectorImapConnectionOptions
     *
     * Test an inbox connector IMAP connection options.
     *
     */
    public function testTestConnectorImapConnectionOptions()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for testConnectorSmtpConnection
     *
     * Test an inbox connector SMTP connection.
     *
     */
    public function testTestConnectorSmtpConnection()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for testConnectorSmtpConnectionOptions
     *
     * Test an inbox connector SMTP connection options.
     *
     */
    public function testTestConnectorSmtpConnectionOptions()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateConnector
     *
     * Update an inbox connector.
     *
     */
    public function testUpdateConnector()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateConnectorImapConnection
     *
     * Update an inbox connector IMAP connection.
     *
     */
    public function testUpdateConnectorImapConnection()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateConnectorSmtpConnection
     *
     * Update an inbox connector SMTP connection.
     *
     */
    public function testUpdateConnectorSmtpConnection()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
